
hacsmain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00000ffa  0000108e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  00800180  00800180  000011ae  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004a4  00000000  00000000  0000216a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d35  00000000  00000000  0000260e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d30  00000000  00000000  00004343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d21  00000000  00000000  00005073  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000320  00000000  00000000  00006d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000563  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cae  00000000  00000000  00007617  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000023c  00000000  00000000  000082c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  00008501  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_1>
   8:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3f       	cpi	r26, 0xFF	; 255
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include"Packet.h"
char command;
int flag_pass=1;
	 int main()
	 {
	  	init();   //// timer0 initializing
  92:	0e 94 f5 03 	call	0x7ea	; 0x7ea <init>
  		lcd_init(); //// lcd initialization
  96:	0e 94 19 01 	call	0x232	; 0x232 <lcd_init>
	 	init_uart( 0x40);// uart initialization 
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 00 03 	call	0x600	; 0x600 <init_uart>
		SPI_MasterInit();// SPI initialization 
  a2:	0e 94 2b 03 	call	0x656	; 0x656 <SPI_MasterInit>
		key_init();      // keypad initialization 
  a6:	0e 94 93 01 	call	0x326	; 0x326 <key_init>
		  while (1)
		  {		
			 	
			 if(flag_pass){
  aa:	80 91 60 00 	lds	r24, 0x0060
  ae:	90 91 61 00 	lds	r25, 0x0061
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	39 f0       	breq	.+14     	; 0xc4 <main+0x32>
			 EnterPassword();   /// called from keypad 
  b6:	0e 94 1d 02 	call	0x43a	; 0x43a <EnterPassword>
			 flag_pass=0;
  ba:	10 92 61 00 	sts	0x0061, r1
  be:	10 92 60 00 	sts	0x0060, r1
  c2:	f3 cf       	rjmp	.-26     	; 0xaa <main+0x18>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x32>

000000c6 <__vector_13>:
				
		  
	}
	}
ISR(USART_RXC_vect)
{	
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	if(isValidate()){
  e8:	0e 94 95 02 	call	0x52a	; 0x52a <isValidate>
  ec:	88 23       	and	r24, r24
  ee:	69 f0       	breq	.+26     	; 0x10a <__vector_13+0x44>
		lcdClear();
  f0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9d e0       	ldi	r25, 0x0D	; 13
  f8:	a3 e0       	ldi	r26, 0x03	; 3
  fa:	81 50       	subi	r24, 0x01	; 1
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	a0 40       	sbci	r26, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <__vector_13+0x34>
 102:	00 c0       	rjmp	.+0      	; 0x104 <__vector_13+0x3e>
 104:	00 00       	nop
		_delay_ms(100);
		receivePacket();
 106:	0e 94 d5 03 	call	0x7aa	; 0x7aa <receivePacket>
		}
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <lcd_nibble_transfer>:
 lcd_nibble_transfer(d<<4);   //lsn);
 
   } // end lcd_transfer()
void lcd_nibble_transfer( unsigned char d )  
   { 
     lcd_port|= (1<<lcd_E);
 12c:	db 9a       	sbi	0x1b, 3	; 27
	 asm volatile("NOP");   // Slow down timing 100 nS
 12e:	00 00       	nop
   	lcd_port= (lcd_port & 0x0f)| (d &0xf0);   //(always msn as 4 bit data bus)	
 130:	9b b3       	in	r25, 0x1b	; 27
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	89 2b       	or	r24, r25
 138:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	88 ec       	ldi	r24, 0xC8	; 200
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_nibble_transfer+0x10>
 	 //lcd_wait(8);   // Slow down  58 us
_delay_us(60);
	lcd_port &= ~(1<<lcd_E);
 140:	db 98       	cbi	0x1b, 3	; 27
 142:	88 ec       	ldi	r24, 0xC8	; 200
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_nibble_transfer+0x18>
//	lcd_wait(8);
_delay_us(60);
   } // end lcd_nibble_transfer()
 148:	08 95       	ret

0000014a <lcd_transfer>:
   } // end lcd_data_write()
//********************************************************************************************
// Low level functions
// Write to the lcd data bus - generate E pulse 
void lcd_transfer (unsigned char d)
   {
 14a:	1f 93       	push	r17
 14c:	18 2f       	mov	r17, r24
	 lcd_port|= (1<<lcd_E);
 14e:	db 9a       	sbi	0x1b, 3	; 27
	  asm volatile("NOP");  // Slow down timing 100 nS
 150:	00 00       	nop
     asm volatile("NOP"); // Slow down timing 100 nS
 152:	00 00       	nop
 lcd_nibble_transfer(d);   //(msn)
 154:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_nibble_transfer>
 
//	 asm volatile("NOP");   // Slow down timing 100 nS	 
	 	asm volatile("NOP");   // Slow down timing 100 nS
 158:	00 00       	nop
		lcd_port |= (1<<lcd_E);
 15a:	db 9a       	sbi	0x1b, 3	; 27

 lcd_nibble_transfer(d<<4);   //lsn);
 15c:	81 2f       	mov	r24, r17
 15e:	82 95       	swap	r24
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_nibble_transfer>
 
   } // end lcd_transfer()
 166:	1f 91       	pop	r17
 168:	08 95       	ret

0000016a <lcd_data_write>:
   lcd_transfer(cmd);
   } // end lcd_cmd_write()
void lcd_data_write(unsigned char d)

   {
   lcd_direction |= 0xfc;
 16a:	9a b3       	in	r25, 0x1a	; 26
 16c:	9c 6f       	ori	r25, 0xFC	; 252
 16e:	9a bb       	out	0x1a, r25	; 26
   lcd_port|=(1<<lcd_RS);				//rs=1 when writing data
 170:	da 9a       	sbi	0x1b, 2	; 27
   
  // lcd_port &= ~(1<<lcd_RW);
    asm volatile("NOP");   // Slow down timing 100 nS
 172:	00 00       	nop
   	asm volatile("NOP");   // Slow down timing 100 nS
 174:	00 00       	nop
   lcd_transfer(d); 
 176:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_transfer>
   } // end lcd_data_write()
 17a:	08 95       	ret

0000017c <lcd_cmd_write>:
//******************************************************************************************
// Medium level functions 
// Select RS / RW mode and call lower level funtion to complete the transfer
void lcd_cmd_write(unsigned char cmd)
   { 
    lcd_direction |= 0xfc;
 17c:	9a b3       	in	r25, 0x1a	; 26
 17e:	9c 6f       	ori	r25, 0xFC	; 252
 180:	9a bb       	out	0x1a, r25	; 26
     //lcd_RS=0;
  lcd_port &= ~(1<<lcd_RS);
 182:	da 98       	cbi	0x1b, 2	; 27
 
  // lcd_port &= ~(1<<lcd_RW);
  asm volatile("NOP");  // Slow down timing 100 nS
 184:	00 00       	nop
   asm volatile("NOP");   // Slow down timing 100 nS
 186:	00 00       	nop
   lcd_transfer(cmd);
 188:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_transfer>
   } // end lcd_cmd_write()
 18c:	08 95       	ret

0000018e <lcdClear>:
_delay_us(60);
   } // end lcd_nibble_transfer()
//clear the display
void lcdClear(void) {

lcd_cmd_write(CLR_DISPLAY);
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
//lcd_wait(WAIT_15m);
lcd_cmd_write(CLR_DISPLAY+RTN_HOME);
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
//lcd_wait(WAIT_15m);
}
 19a:	08 95       	ret

0000019c <LCDPutString>:
}
GoTo(x,y);
}
// Software function for delay insertion after commands/data tranfers
//! write a zero-terminated ASCII string to the display
void LCDPutString(char *str) {
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	e8 2e       	mov	r14, r24
 1a6:	e7 01       	movw	r28, r14
 1a8:	7e 01       	movw	r14, r28
 1aa:	f9 2e       	mov	r15, r25
 1ac:	e7 01       	movw	r28, r14
   char c;
for (; (c = *str) != 0; str++) lcd_data_write(c); 
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <LCDPutString+0x18>
 1b0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_data_write>
 1b4:	89 91       	ld	r24, Y+
 1b6:	88 23       	and	r24, r24
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <LCDPutString+0x14>
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	08 95       	ret

000001c4 <lcd_wait>:
   { 
   unsigned int i;

   for ( i = 0 ; i < count ; i++ );    //4 cycles per count
    // end lcd_wait()
   } // end lcd_transfer()
 1c4:	08 95       	ret

000001c6 <GoTo>:

//goto x-position and y-line called by parameters x, y used in main() and internally LCDPutChar()
void GoTo(unsigned char x, unsigned char y){
switch (y) {
 1c6:	61 30       	cpi	r22, 0x01	; 1
 1c8:	49 f0       	breq	.+18     	; 0x1dc <GoTo+0x16>
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	28 f0       	brcs	.+10     	; 0x1d8 <GoTo+0x12>
 1ce:	62 30       	cpi	r22, 0x02	; 2
 1d0:	39 f0       	breq	.+14     	; 0x1e0 <GoTo+0x1a>
 1d2:	63 30       	cpi	r22, 0x03	; 3
 1d4:	61 f4       	brne	.+24     	; 0x1ee <GoTo+0x28>
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <GoTo+0x22>
case 0: 
 lcd_cmd_write(SET_DRAM_ADDR+line_0+x);
 1d8:	80 58       	subi	r24, 0x80	; 128
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
 break;
 case 1: 
lcd_cmd_write(SET_DRAM_ADDR+line_1+x);
 1dc:	80 54       	subi	r24, 0x40	; 64
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
break;
case 2:
lcd_cmd_write(SET_DRAM_ADDR+line_2+x);
 1e0:	8c 56       	subi	r24, 0x6C	; 108
 1e2:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
 1e6:	08 95       	ret
 lcd_wait(WAIT_15m);  
break;
case 3:
lcd_cmd_write(SET_DRAM_ADDR+line_3+x);
 1e8:	8c 52       	subi	r24, 0x2C	; 44
 1ea:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
 1ee:	08 95       	ret

000001f0 <clearLine>:
lcd_cmd_write(CLR_DISPLAY);
//lcd_wait(WAIT_15m);
lcd_cmd_write(CLR_DISPLAY+RTN_HOME);
//lcd_wait(WAIT_15m);
}
void clearLine(unsigned char x, unsigned char y){
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	18 2f       	mov	r17, r24
 1fa:	06 2f       	mov	r16, r22
unsigned char max_x=20;
GoTo(x,y);
 1fc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
for (int i=x; i<max_x; i++)
 200:	c1 2f       	mov	r28, r17
 202:	d0 e0       	ldi	r29, 0x00	; 0
 204:	0a c0       	rjmp	.+20     	; 0x21a <clearLine+0x2a>
{
lcd_data_write(0x20);
 206:	80 e2       	ldi	r24, 0x20	; 32
 208:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_data_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	83 ec       	ldi	r24, 0xC3	; 195
 20e:	99 e0       	ldi	r25, 0x09	; 9
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <clearLine+0x20>
 214:	00 c0       	rjmp	.+0      	; 0x216 <clearLine+0x26>
 216:	00 00       	nop
//lcd_wait(WAIT_15m);
}
void clearLine(unsigned char x, unsigned char y){
unsigned char max_x=20;
GoTo(x,y);
for (int i=x; i<max_x; i++)
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	c4 31       	cpi	r28, 0x14	; 20
 21c:	d1 05       	cpc	r29, r1
 21e:	9c f3       	brlt	.-26     	; 0x206 <clearLine+0x16>
{
lcd_data_write(0x20);
_delay_ms(1);
}
GoTo(x,y);
 220:	81 2f       	mov	r24, r17
 222:	60 2f       	mov	r22, r16
 224:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <lcd_init>:
// LCD initialization sequence (works somewhat like a constructor)
//*******************************************************************
void lcd_init()    // Works like a constructor
   {
   // Power on delay
	lcd_direction |= 0xfc;							//	set port a as output
 232:	8a b3       	in	r24, 0x1a	; 26
 234:	8c 6f       	ori	r24, 0xFC	; 252
 236:	8a bb       	out	0x1a, r24	; 26
   lcd_wait( 20000 );                                   // Power on wait 
   lcd_wait( 20000 );
	lcd_port &= ~((1<<lcd_E) | (1<<lcd_RS)); // EN=0, RS=0
 238:	8b b3       	in	r24, 0x1b	; 27
 23a:	83 7f       	andi	r24, 0xF3	; 243
 23c:	8b bb       	out	0x1b, r24	; 27
//	lcd_port &= ~(1<<lcd_RW);               // Set RW = 0 in case it is connected
 
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 23e:	80 e3       	ldi	r24, 0x30	; 48
 240:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_nibble_transfer>
 244:	8f e5       	ldi	r24, 0x5F	; 95
 246:	9a ee       	ldi	r25, 0xEA	; 234
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_init+0x16>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_init+0x1c>
 24e:	00 00       	nop
   //lcd_wait(longdelay );  						 // wait 24 ms
   _delay_ms(24);
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 250:	80 e3       	ldi	r24, 0x30	; 48
 252:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_nibble_transfer>
 256:	af e5       	ldi	r26, 0x5F	; 95
 258:	ba ee       	ldi	r27, 0xEA	; 234
 25a:	11 97       	sbiw	r26, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x28>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_init+0x2e>
 260:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 262:	80 e3       	ldi	r24, 0x30	; 48
 264:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_nibble_transfer>
 268:	8f e5       	ldi	r24, 0x5F	; 95
 26a:	9a ee       	ldi	r25, 0xEA	; 234
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_init+0x3a>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_init+0x40>
 272:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION);
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_nibble_transfer>
 27a:	af e5       	ldi	r26, 0x5F	; 95
 27c:	ba ee       	ldi	r27, 0xEA	; 234
 27e:	11 97       	sbiw	r26, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_init+0x4c>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_init+0x52>
 284:	00 00       	nop
  // lcd_wait(longdelay);
   _delay_ms(24);
   lcd_cmd_write(SET_FUNCTION+LN2_BIT); //                // Function set: 0x28  2 lines
 286:	88 e2       	ldi	r24, 0x28	; 40
 288:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
 28c:	87 e8       	ldi	r24, 0x87	; 135
 28e:	93 e1       	ldi	r25, 0x13	; 19
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <lcd_init+0x5e>
 294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_init+0x64>
 296:	00 00       	nop
  // lcd_wait(WAIT_15m);                              // Wait 39 uS
 _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY);						//display off
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
 29e:	a7 e8       	ldi	r26, 0x87	; 135
 2a0:	b3 e1       	ldi	r27, 0x13	; 19
 2a2:	11 97       	sbiw	r26, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_init+0x70>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcd_init+0x76>
 2a8:	00 00       	nop
 //lcd_wait(WAIT_15m);
_delay_ms(2);	
	lcd_cmd_write(CLR_DISPLAY);       // Display clear: 0x01 clear data                 	 
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
 2b0:	87 e8       	ldi	r24, 0x87	; 135
 2b2:	93 e1       	ldi	r25, 0x13	; 19
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x82>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_init+0x88>
 2ba:	00 00       	nop
	
  // lcd_wait(WAIT_15m);                // 1.53 mS  
     _delay_ms(2);                                         
   lcd_cmd_write(SET_ENTRY_MODE+INC_BIT);          //  +INC_BIT  // Entry mode set: shift cursor 1 position to right
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
 2c2:	a7 e8       	ldi	r26, 0x87	; 135
 2c4:	b3 e1       	ldi	r27, 0x13	; 19
 2c6:	11 97       	sbiw	r26, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_init+0x94>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <lcd_init+0x9a>
 2cc:	00 00       	nop
  //   lcd_wait(WAIT_15m);      
  _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY+ON_BIT+CUR_BIT+BLK_BIT); //+CUR_BIT+BLK_BIT);   Display ON/OFF control: 0x0f
 2ce:	8f e0       	ldi	r24, 0x0F	; 15
 2d0:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
 2d4:	87 e8       	ldi	r24, 0x87	; 135
 2d6:	93 e1       	ldi	r25, 0x13	; 19
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_init+0xa6>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <lcd_init+0xac>
 2de:	00 00       	nop
  //   lcd_wait(WAIT_15m);                               // Wait 39 uS                      // 1.53 mS     
_delay_ms(2);	
	lcd_cmd_write(RTN_HOME);
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
 2e6:	a7 e8       	ldi	r26, 0x87	; 135
 2e8:	b3 e1       	ldi	r27, 0x13	; 19
 2ea:	11 97       	sbiw	r26, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_init+0xb8>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <lcd_init+0xbe>
 2f0:	00 00       	nop
  //lcd_wait(WAIT_15m);                            // 1.53 mS  
_delay_ms(2);
LCDPutString("==WelCome To HACS==");
 2f2:	82 e6       	ldi	r24, 0x62	; 98
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
 2fa:	8f e3       	ldi	r24, 0x3F	; 63
 2fc:	92 e4       	ldi	r25, 0x42	; 66
 2fe:	af e0       	ldi	r26, 0x0F	; 15
 300:	81 50       	subi	r24, 0x01	; 1
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	a0 40       	sbci	r26, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <lcd_init+0xce>
 308:	00 c0       	rjmp	.+0      	; 0x30a <lcd_init+0xd8>
 30a:	00 00       	nop
								_delay_ms(500);
				 				GoTo(0,1);
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
				 LCDPutString("    Swipe card");
 314:	86 e7       	ldi	r24, 0x76	; 118
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
				 GoTo(0,2);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
   } // end lcd_init()
 324:	08 95       	ret

00000326 <key_init>:
							  {'7','8','9','D'},
							  {'A','0','B','C'} };

void key_init ()
{
  key_DDRA  |=(1<<key_row0 )|(1<<key_row1); 
 326:	8a b3       	in	r24, 0x1a	; 26
 328:	83 60       	ori	r24, 0x03	; 3
 32a:	8a bb       	out	0x1a, r24	; 26
  key_DDRC  &=(1<<key_col0 )|(1<<key_col1); 
 32c:	84 b3       	in	r24, 0x14	; 20
 32e:	80 7c       	andi	r24, 0xC0	; 192
 330:	84 bb       	out	0x14, r24	; 20
  lcd_init();
 332:	0e 94 19 01 	call	0x232	; 0x232 <lcd_init>
}
 336:	08 95       	ret

00000338 <key_look>:
void key_look()
{
unsigned char column;
unsigned char lastkey;

			 	lastkey=(key_PINC & 0xC0);
 338:	93 b3       	in	r25, 0x13	; 19
 33a:	af e4       	ldi	r26, 0x4F	; 79
 33c:	b3 ec       	ldi	r27, 0xC3	; 195
 33e:	11 97       	sbiw	r26, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <key_look+0x6>
 342:	00 c0       	rjmp	.+0      	; 0x344 <key_look+0xc>
 344:	00 00       	nop
				_delay_ms(20);
				column=(key_PINC & 0xC0);
 346:	83 b3       	in	r24, 0x13	; 19
 348:	80 7c       	andi	r24, 0xC0	; 192
void key_look()
{
unsigned char column;
unsigned char lastkey;

			 	lastkey=(key_PINC & 0xC0);
 34a:	90 7c       	andi	r25, 0xC0	; 192
				_delay_ms(20);
				column=(key_PINC & 0xC0);
if(column==lastkey)
 34c:	89 17       	cp	r24, r25
 34e:	09 f0       	breq	.+2      	; 0x352 <key_look+0x1a>
 350:	44 c0       	rjmp	.+136    	; 0x3da <key_look+0xa2>
{
 	switch(column)
 352:	80 34       	cpi	r24, 0x40	; 64
 354:	79 f0       	breq	.+30     	; 0x374 <key_look+0x3c>
 356:	80 38       	cpi	r24, 0x80	; 128
 358:	c1 f0       	breq	.+48     	; 0x38a <key_look+0x52>
 35a:	e0 91 b7 01 	lds	r30, 0x01B7
 35e:	88 23       	and	r24, r24
 360:	f9 f4       	brne	.+62     	; 0x3a0 <key_look+0x68>
	{
		case 0x00:keyit= keytab[row][3];break;
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	e5 51       	subi	r30, 0x15	; 21
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	83 81       	ldd	r24, Z+3	; 0x03
 372:	1e c0       	rjmp	.+60     	; 0x3b0 <key_look+0x78>
		case 0x40:keyit= keytab[row][2];break;///column PC6
 374:	e0 91 b7 01 	lds	r30, 0x01B7
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	e5 51       	subi	r30, 0x15	; 21
 384:	ff 4f       	sbci	r31, 0xFF	; 255
 386:	82 81       	ldd	r24, Z+2	; 0x02
 388:	13 c0       	rjmp	.+38     	; 0x3b0 <key_look+0x78>
		case 0x80:keyit= keytab[row][1];break;///column PC7
 38a:	e0 91 b7 01 	lds	r30, 0x01B7
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	ee 0f       	add	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	e5 51       	subi	r30, 0x15	; 21
 39a:	ff 4f       	sbci	r31, 0xFF	; 255
 39c:	81 81       	ldd	r24, Z+1	; 0x01
 39e:	08 c0       	rjmp	.+16     	; 0x3b0 <key_look+0x78>
		default  :keyit= keytab[row][0];break; 
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	e5 51       	subi	r30, 0x15	; 21
 3ac:	ff 4f       	sbci	r31, 0xFF	; 255
 3ae:	80 81       	ld	r24, Z
 3b0:	80 93 b6 01 	sts	0x01B6, r24
	}
		if(keyit=='C')lcd_cmd_write(CLR_DISPLAY);
 3b4:	80 91 b6 01 	lds	r24, 0x01B6
 3b8:	83 34       	cpi	r24, 0x43	; 67
 3ba:	69 f4       	brne	.+26     	; 0x3d6 <key_look+0x9e>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_cmd_write>
 3c2:	09 c0       	rjmp	.+18     	; 0x3d6 <key_look+0x9e>
 3c4:	8f e1       	ldi	r24, 0x1F	; 31
 3c6:	9f eb       	ldi	r25, 0xBF	; 191
 3c8:	a2 e0       	ldi	r26, 0x02	; 2
 3ca:	81 50       	subi	r24, 0x01	; 1
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	a0 40       	sbci	r26, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <key_look+0x92>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <key_look+0x9c>
 3d4:	00 00       	nop
	 while (key_PINB & (1<<key_active))
 3d6:	b2 99       	sbic	0x16, 2	; 22
 3d8:	f5 cf       	rjmp	.-22     	; 0x3c4 <key_look+0x8c>
 3da:	08 95       	ret

000003dc <key_read>:
  lcd_init();
}

char key_read()
{
int i= 0 ;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
while (!(key_PINB &(1<<key_active)))
{
switch(i)
{
row3: key_PORTA &= 0xFC; 					 		  row=3; 		break;
row2: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row0 ); row=2; 		break;		//PA0
 3e0:	52 e0       	ldi	r21, 0x02	; 2
row1: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row1);  row=1; 		break;		//PA1
 3e2:	41 e0       	ldi	r20, 0x01	; 1
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
{
switch(i)
{
row3: key_PORTA &= 0xFC; 					 		  row=3; 		break;
 3e4:	33 e0       	ldi	r19, 0x03	; 3
}

char key_read()
{
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
 3e6:	22 c0       	rjmp	.+68     	; 0x42c <key_read+0x50>
{
switch(i)
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	91 05       	cpc	r25, r1
 3ec:	59 f0       	breq	.+22     	; 0x404 <key_read+0x28>
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	91 05       	cpc	r25, r1
 3f2:	79 f0       	breq	.+30     	; 0x412 <key_read+0x36>
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	a1 f4       	brne	.+40     	; 0x420 <key_read+0x44>
{
row3: key_PORTA &= 0xFC; 					 		  row=3; 		break;
 3f8:	2b b3       	in	r18, 0x1b	; 27
 3fa:	2c 7f       	andi	r18, 0xFC	; 252
 3fc:	2b bb       	out	0x1b, r18	; 27
 3fe:	30 93 b7 01 	sts	0x01B7, r19
 402:	13 c0       	rjmp	.+38     	; 0x42a <key_read+0x4e>
row2: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row0 ); row=2; 		break;		//PA0
 404:	2b b3       	in	r18, 0x1b	; 27
 406:	2c 7f       	andi	r18, 0xFC	; 252
 408:	2b bb       	out	0x1b, r18	; 27
 40a:	d8 9a       	sbi	0x1b, 0	; 27
 40c:	50 93 b7 01 	sts	0x01B7, r21
 410:	0c c0       	rjmp	.+24     	; 0x42a <key_read+0x4e>
row1: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row1);  row=1; 		break;		//PA1
 412:	2b b3       	in	r18, 0x1b	; 27
 414:	2c 7f       	andi	r18, 0xFC	; 252
 416:	2b bb       	out	0x1b, r18	; 27
 418:	d9 9a       	sbi	0x1b, 1	; 27
 41a:	40 93 b7 01 	sts	0x01B7, r20
 41e:	05 c0       	rjmp	.+10     	; 0x42a <key_read+0x4e>
default: 		         key_PORTA |= (1<<key_row0 )|(1<<key_row1); row=0; break;
 420:	2b b3       	in	r18, 0x1b	; 27
 422:	23 60       	ori	r18, 0x03	; 3
 424:	2b bb       	out	0x1b, r18	; 27
 426:	10 92 b7 01 	sts	0x01B7, r1
	}
		i++;	
 42a:	01 96       	adiw	r24, 0x01	; 1
}

char key_read()
{
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
 42c:	b2 9b       	sbis	0x16, 2	; 22
 42e:	dc cf       	rjmp	.-72     	; 0x3e8 <key_read+0xc>
row1: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row1);  row=1; 		break;		//PA1
default: 		         key_PORTA |= (1<<key_row0 )|(1<<key_row1); row=0; break;
	}
		i++;	
	}
		key_look();
 430:	0e 94 9c 01 	call	0x338	; 0x338 <key_look>
		return keyit;
	}
 434:	80 91 b6 01 	lds	r24, 0x01B6
 438:	08 95       	ret

0000043a <EnterPassword>:
	  	_delay_ms(90);
	 }
	 }
}
	char EnterPassword()
	{
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
		_delay_ms(1000);
		lcdClear();
		LCDPutString("     Enter PIN :");
		EnterPassword();
		access=0;
		return 0;
 442:	0d ea       	ldi	r16, 0xAD	; 173
 444:	11 e0       	ldi	r17, 0x01	; 1
	 }
}
	char EnterPassword()
	{
	
for (int z = 0; z < 4; z++)
 446:	c0 e0       	ldi	r28, 0x00	; 0
 448:	d0 e0       	ldi	r29, 0x00	; 0
			{
			password[z]=key_read();
 44a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <key_read>
 44e:	d8 01       	movw	r26, r16
 450:	8d 93       	st	X+, r24
 452:	8d 01       	movw	r16, r26
			GoTo(z,1);
 454:	8c 2f       	mov	r24, r28
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
			LCDPutString("          ");
 45c:	86 e8       	ldi	r24, 0x86	; 134
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
			GoTo(z,1);
 464:	8c 2f       	mov	r24, r28
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
			lcd_data_write('*');
 46c:	8a e2       	ldi	r24, 0x2A	; 42
 46e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_data_write>
 472:	8f eb       	ldi	r24, 0xBF	; 191
 474:	97 e2       	ldi	r25, 0x27	; 39
 476:	a9 e0       	ldi	r26, 0x09	; 9
 478:	81 50       	subi	r24, 0x01	; 1
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	a0 40       	sbci	r26, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <EnterPassword+0x3e>
 480:	00 c0       	rjmp	.+0      	; 0x482 <EnterPassword+0x48>
 482:	00 00       	nop
	 }
}
	char EnterPassword()
	{
	
for (int z = 0; z < 4; z++)
 484:	21 96       	adiw	r28, 0x01	; 1
 486:	c4 30       	cpi	r28, 0x04	; 4
 488:	d1 05       	cpc	r29, r1
 48a:	f9 f6       	brne	.-66     	; 0x44a <EnterPassword+0x10>
			GoTo(z,1);
			lcd_data_write('*');
			_delay_ms(300);
				 }
			
 if((password[0]=='2')&&(password[1]=='5')&&(password[2]=='0')&&(password[3]=='2'))
 48c:	80 91 ad 01 	lds	r24, 0x01AD
 490:	82 33       	cpi	r24, 0x32	; 50
 492:	51 f5       	brne	.+84     	; 0x4e8 <EnterPassword+0xae>
 494:	80 91 ae 01 	lds	r24, 0x01AE
 498:	85 33       	cpi	r24, 0x35	; 53
 49a:	31 f5       	brne	.+76     	; 0x4e8 <EnterPassword+0xae>
 49c:	80 91 af 01 	lds	r24, 0x01AF
 4a0:	80 33       	cpi	r24, 0x30	; 48
 4a2:	11 f5       	brne	.+68     	; 0x4e8 <EnterPassword+0xae>
 4a4:	80 91 b0 01 	lds	r24, 0x01B0
 4a8:	82 33       	cpi	r24, 0x32	; 50
 4aa:	f1 f4       	brne	.+60     	; 0x4e8 <EnterPassword+0xae>
 4ac:	8f e3       	ldi	r24, 0x3F	; 63
 4ae:	9d e0       	ldi	r25, 0x0D	; 13
 4b0:	a3 e0       	ldi	r26, 0x03	; 3
 4b2:	81 50       	subi	r24, 0x01	; 1
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	a0 40       	sbci	r26, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <EnterPassword+0x78>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <EnterPassword+0x82>
 4bc:	00 00       	nop
{
			_delay_ms(100);
			lcdClear();
 4be:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
 4c2:	8f e3       	ldi	r24, 0x3F	; 63
 4c4:	9d e0       	ldi	r25, 0x0D	; 13
 4c6:	a3 e0       	ldi	r26, 0x03	; 3
 4c8:	81 50       	subi	r24, 0x01	; 1
 4ca:	90 40       	sbci	r25, 0x00	; 0
 4cc:	a0 40       	sbci	r26, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <EnterPassword+0x8e>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <EnterPassword+0x98>
 4d2:	00 00       	nop
			_delay_ms(100);
			RFID_state();
 4d4:	0e 94 06 04 	call	0x80c	; 0x80c <RFID_state>
			sendpacket(command);
 4d8:	80 91 8b 01 	lds	r24, 0x018B
 4dc:	0e 94 40 03 	call	0x680	; 0x680 <sendpacket>
			access=1;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 b5 01 	sts	0x01B5, r24
		return 1;
 4e6:	1c c0       	rjmp	.+56     	; 0x520 <EnterPassword+0xe6>
}
else 
		{ 
		GoTo(0,3);
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
		LCDPutString("try again");
 4f0:	81 e9       	ldi	r24, 0x91	; 145
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
 4f8:	8f e7       	ldi	r24, 0x7F	; 127
 4fa:	94 e8       	ldi	r25, 0x84	; 132
 4fc:	ae e1       	ldi	r26, 0x1E	; 30
 4fe:	81 50       	subi	r24, 0x01	; 1
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	a0 40       	sbci	r26, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <EnterPassword+0xc4>
 506:	00 c0       	rjmp	.+0      	; 0x508 <EnterPassword+0xce>
 508:	00 00       	nop
		_delay_ms(1000);
		lcdClear();
 50a:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
		LCDPutString("     Enter PIN :");
 50e:	8b e9       	ldi	r24, 0x9B	; 155
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
		EnterPassword();
 516:	0e 94 1d 02 	call	0x43a	; 0x43a <EnterPassword>
		access=0;
 51a:	10 92 b5 01 	sts	0x01B5, r1
		return 0;
 51e:	80 e0       	ldi	r24, 0x00	; 0
		} 
	
		

}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <isValidate>:
char isValidate()
{	
	 return access;
}
 52a:	80 91 b5 01 	lds	r24, 0x01B5
 52e:	08 95       	ret

00000530 <choose_room>:

void choose_room()
{
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
	int i=0;
	  rooms[0]= 'H';
 534:	88 e4       	ldi	r24, 0x48	; 72
 536:	80 93 b1 01 	sts	0x01B1, r24
	  rooms[1]= 'K';
 53a:	8b e4       	ldi	r24, 0x4B	; 75
 53c:	80 93 b2 01 	sts	0x01B2, r24
	  rooms[2]= 'T';
 540:	84 e5       	ldi	r24, 0x54	; 84
 542:	80 93 b3 01 	sts	0x01B3, r24
	  rooms[3]= 'B';
 546:	82 e4       	ldi	r24, 0x42	; 66
 548:	80 93 b4 01 	sts	0x01B4, r24
 54c:	17 c0       	rjmp	.+46     	; 0x57c <choose_room+0x4c>
	  LCDPutString("       ===Choose Room===");
			GoTo(0,1);
			lcd_data_write(rooms[i]);
	while(key_read()=='F')
	{	
		if(i<3)
 54e:	c3 30       	cpi	r28, 0x03	; 3
 550:	d1 05       	cpc	r29, r1
 552:	94 f4       	brge	.+36     	; 0x578 <choose_room+0x48>
		{	i++;
 554:	21 96       	adiw	r28, 0x01	; 1
			lcdClear();
 556:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
			LCDPutString("       ===Choose Room===");
 55a:	8c ea       	ldi	r24, 0xAC	; 172
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
			GoTo(0,1);
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
			lcd_data_write(rooms[i]);
 56a:	fe 01       	movw	r30, r28
 56c:	ef 54       	subi	r30, 0x4F	; 79
 56e:	fe 4f       	sbci	r31, 0xFE	; 254
 570:	80 81       	ld	r24, Z
 572:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_data_write>
 576:	10 c0       	rjmp	.+32     	; 0x598 <choose_room+0x68>
		}
		else 
		{
			i=0;
			lcdClear();
 578:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
			LCDPutString("       ===Choose Room===");
 57c:	8c ea       	ldi	r24, 0xAC	; 172
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
			GoTo(0,1);
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
			lcd_data_write(rooms[i]);
 58c:	80 91 b1 01 	lds	r24, 0x01B1
 590:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_data_write>
			GoTo(0,1);
			lcd_data_write(rooms[i]);
		}
		else 
		{
			i=0;
 594:	c0 e0       	ldi	r28, 0x00	; 0
 596:	d0 e0       	ldi	r29, 0x00	; 0
	  rooms[2]= 'T';
	  rooms[3]= 'B';
	  LCDPutString("       ===Choose Room===");
			GoTo(0,1);
			lcd_data_write(rooms[i]);
	while(key_read()=='F')
 598:	0e 94 ee 01 	call	0x3dc	; 0x3dc <key_read>
 59c:	86 34       	cpi	r24, 0x46	; 70
 59e:	b9 f2       	breq	.-82     	; 0x54e <choose_room+0x1e>
 5a0:	26 c0       	rjmp	.+76     	; 0x5ee <choose_room+0xbe>
			lcd_data_write(rooms[i]);
		}
	}
		while(key_read()=='E')
		{
			lcdClear();
 5a2:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
			LCDPutString("      Chosen Room: ");
 5a6:	85 ec       	ldi	r24, 0xC5	; 197
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
			lcd_data_write(rooms[i]);
 5ae:	88 81       	ld	r24, Y
 5b0:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_data_write>
			GoTo(0,2);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	62 e0       	ldi	r22, 0x02	; 2
 5b8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
			LCDPutString("  1.ON      2.OFF");
 5bc:	89 ed       	ldi	r24, 0xD9	; 217
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
			if(key_read()=='1')
 5c4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <key_read>
 5c8:	81 33       	cpi	r24, 0x31	; 49
 5ca:	31 f4       	brne	.+12     	; 0x5d8 <choose_room+0xa8>
			{
				Light_on();
 5cc:	0e 94 14 05 	call	0xa28	; 0xa28 <Light_on>
				lcdClear();
 5d0:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
				choose_room();
 5d4:	0e 94 98 02 	call	0x530	; 0x530 <choose_room>
			}

			if(key_read()=='2')
 5d8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <key_read>
 5dc:	82 33       	cpi	r24, 0x32	; 50
 5de:	49 f4       	brne	.+18     	; 0x5f2 <choose_room+0xc2>
			{
				light_Off();
 5e0:	0e 94 17 05 	call	0xa2e	; 0xa2e <light_Off>
				lcdClear();
 5e4:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
				choose_room();
 5e8:	0e 94 98 02 	call	0x530	; 0x530 <choose_room>
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <choose_room+0xc2>
	}
		while(key_read()=='E')
		{
			lcdClear();
			LCDPutString("      Chosen Room: ");
			lcd_data_write(rooms[i]);
 5ee:	cf 54       	subi	r28, 0x4F	; 79
 5f0:	de 4f       	sbci	r29, 0xFE	; 254
			LCDPutString("       ===Choose Room===");
			GoTo(0,1);
			lcd_data_write(rooms[i]);
		}
	}
		while(key_read()=='E')
 5f2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <key_read>
 5f6:	85 34       	cpi	r24, 0x45	; 69
 5f8:	a1 f2       	breq	.-88     	; 0x5a2 <choose_room+0x72>

			
				
	}	
		
}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <init_uart>:
#include "UART.h"
	void init_uart(int baudrate)
	{
	UCSRB |=(1<<RXEN) | (1<<TXEN)|(1<<RXCIE);
 600:	2a b1       	in	r18, 0x0a	; 10
 602:	28 69       	ori	r18, 0x98	; 152
 604:	2a b9       	out	0x0a, r18	; 10
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8 data bits and 1 stop bit 
 606:	20 b5       	in	r18, 0x20	; 32
 608:	26 68       	ori	r18, 0x86	; 134
 60a:	20 bd       	out	0x20, r18	; 32
	UCSRA = (1<<U2X); // full duplex
 60c:	22 e0       	ldi	r18, 0x02	; 2
 60e:	2b b9       	out	0x0b, r18	; 11

	UBRRH = (char) ( baudrate>>8); // move the upper byte in the integer for fit 8 bits in 16 bits 
 610:	29 2f       	mov	r18, r25
 612:	33 27       	eor	r19, r19
 614:	27 fd       	sbrc	r18, 7
 616:	3a 95       	dec	r19
 618:	20 bd       	out	0x20, r18	; 32
	UBRRL=(char) baudrate;
 61a:	89 b9       	out	0x09, r24	; 9
	}
 61c:	08 95       	ret

0000061e <uart_transmit>:
	 void uart_transmit(char Abyte)
	{
	 while(!(UCSRA & (1<<UDRE)));
 61e:	5d 9b       	sbis	0x0b, 5	; 11
 620:	fe cf       	rjmp	.-4      	; 0x61e <uart_transmit>
	 UDR= Abyte;
 622:	8c b9       	out	0x0c, r24	; 12
	}
 624:	08 95       	ret

00000626 <uart_recieve>:
	unsigned char uart_recieve(void)
	{
	while (!(UCSRA &(1<<RXC)));
 626:	5f 9b       	sbis	0x0b, 7	; 11
 628:	fe cf       	rjmp	.-4      	; 0x626 <uart_recieve>
	return UDR;
 62a:	8c b1       	in	r24, 0x0c	; 12
	}
 62c:	08 95       	ret

0000062e <PutString>:
		void PutString(char *str) {
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	e8 2e       	mov	r14, r24
 638:	e7 01       	movw	r28, r14
 63a:	7e 01       	movw	r14, r28
 63c:	f9 2e       	mov	r15, r25
 63e:	e7 01       	movw	r28, r14
   char c;
   for (; (c = *str) != 0; str++)
 640:	02 c0       	rjmp	.+4      	; 0x646 <PutString+0x18>
    uart_transmit(c); //transmit char handles the individual character
 642:	0e 94 0f 03 	call	0x61e	; 0x61e <uart_transmit>
	while (!(UCSRA &(1<<RXC)));
	return UDR;
	}
		void PutString(char *str) {
   char c;
   for (; (c = *str) != 0; str++)
 646:	89 91       	ld	r24, Y+
 648:	88 23       	and	r24, r24
 64a:	d9 f7       	brne	.-10     	; 0x642 <PutString+0x14>
    uart_transmit(c); //transmit char handles the individual character
}
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	ff 90       	pop	r15
 652:	ef 90       	pop	r14
 654:	08 95       	ret

00000656 <SPI_MasterInit>:
	#include "SPI.h"

void SPI_MasterInit(void)
		{
		DDRB |=(1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK);
 656:	87 b3       	in	r24, 0x17	; 23
 658:	80 6b       	ori	r24, 0xB0	; 176
 65a:	87 bb       	out	0x17, r24	; 23
		SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 65c:	8d b1       	in	r24, 0x0d	; 13
 65e:	81 65       	ori	r24, 0x51	; 81
 660:	8d b9       	out	0x0d, r24	; 13
	    PORTB|=(1<<SPI_SS)|(1<<SPI_MISO)|(1<<SPI_SCK);
 662:	88 b3       	in	r24, 0x18	; 24
 664:	80 6d       	ori	r24, 0xD0	; 208
 666:	88 bb       	out	0x18, r24	; 24
		}
 668:	08 95       	ret

0000066a <receiveSPI>:
char receiveSPI(){
	//PORTB &= ~(1<<SPI_SS);
//	SPDR = 0xF5;
	while(!(SPSR & (1<<SPIF))){}
 66a:	77 9b       	sbis	0x0e, 7	; 14
 66c:	fe cf       	rjmp	.-4      	; 0x66a <receiveSPI>
	PORTB |= (1<<SPI_SS);
 66e:	c4 9a       	sbi	0x18, 4	; 24
	return SPDR;
 670:	8f b1       	in	r24, 0x0f	; 15
}
 672:	08 95       	ret

00000674 <SPI_MasterTransmit>:
		void SPI_MasterTransmit(char data)
		{
		PORTB&=~(1<<SPI_SS);
 674:	c4 98       	cbi	0x18, 4	; 24
		SPDR = data;
 676:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
 678:	77 9b       	sbis	0x0e, 7	; 14
 67a:	fe cf       	rjmp	.-4      	; 0x678 <SPI_MasterTransmit+0x4>
	    PORTB|=(1<<SPI_SS);
 67c:	c4 9a       	sbi	0x18, 4	; 24
		}
 67e:	08 95       	ret

00000680 <sendpacket>:
	char checksum;
	char dataBuffer[50];
	int loop=1;
unsigned char data;

void sendpacket(unsigned char command){
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
 690:	c4 56       	subi	r28, 0x64	; 100
 692:	d0 40       	sbci	r29, 0x00	; 0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	f8 94       	cli
 698:	de bf       	out	0x3e, r29	; 62
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	cd bf       	out	0x3d, r28	; 61
	//Construct packet and encode to ASCII
	char buffer[50];
	sprintf(buffer, "%02d%02d%02d0000",
 69e:	2d b7       	in	r18, 0x3d	; 61
 6a0:	3e b7       	in	r19, 0x3e	; 62
 6a2:	2a 50       	subi	r18, 0x0A	; 10
 6a4:	30 40       	sbci	r19, 0x00	; 0
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	f8 94       	cli
 6aa:	3e bf       	out	0x3e, r19	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	2d bf       	out	0x3d, r18	; 61
 6b0:	ed b7       	in	r30, 0x3d	; 61
 6b2:	fe b7       	in	r31, 0x3e	; 62
 6b4:	31 96       	adiw	r30, 0x01	; 1
 6b6:	7e 01       	movw	r14, r28
 6b8:	08 94       	sec
 6ba:	e1 1c       	adc	r14, r1
 6bc:	f1 1c       	adc	r15, r1
 6be:	ad b7       	in	r26, 0x3d	; 61
 6c0:	be b7       	in	r27, 0x3e	; 62
 6c2:	12 96       	adiw	r26, 0x02	; 2
 6c4:	fc 92       	st	X, r15
 6c6:	ee 92       	st	-X, r14
 6c8:	11 97       	sbiw	r26, 0x01	; 1
 6ca:	2b ef       	ldi	r18, 0xFB	; 251
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	33 83       	std	Z+3, r19	; 0x03
 6d0:	22 83       	std	Z+2, r18	; 0x02
 6d2:	90 91 5e 01 	lds	r25, 0x015E
 6d6:	94 83       	std	Z+4, r25	; 0x04
 6d8:	15 82       	std	Z+5, r1	; 0x05
 6da:	90 91 5f 01 	lds	r25, 0x015F
 6de:	96 83       	std	Z+6, r25	; 0x06
 6e0:	17 82       	std	Z+7, r1	; 0x07
 6e2:	80 87       	std	Z+8, r24	; 0x08
 6e4:	11 86       	std	Z+9, r1	; 0x09
 6e6:	0e 94 1a 05 	call	0xa34	; 0xa34 <sprintf>
		SOURCE,
		DESTINATION,
		command);
		// 	Construct packet and encode to ASCII.
	char packet[50];
	sprintf(packet,"%s%02d", buffer);
 6ea:	0f 90       	pop	r0
 6ec:	0f 90       	pop	r0
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	ed b7       	in	r30, 0x3d	; 61
 6f4:	fe b7       	in	r31, 0x3e	; 62
 6f6:	31 96       	adiw	r30, 0x01	; 1
 6f8:	8e 01       	movw	r16, r28
 6fa:	0d 5c       	subi	r16, 0xCD	; 205
 6fc:	1f 4f       	sbci	r17, 0xFF	; 255
 6fe:	ad b7       	in	r26, 0x3d	; 61
 700:	be b7       	in	r27, 0x3e	; 62
 702:	12 96       	adiw	r26, 0x02	; 2
 704:	1c 93       	st	X, r17
 706:	0e 93       	st	-X, r16
 708:	11 97       	sbiw	r26, 0x01	; 1
 70a:	8c e0       	ldi	r24, 0x0C	; 12
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	93 83       	std	Z+3, r25	; 0x03
 710:	82 83       	std	Z+2, r24	; 0x02
 712:	f5 82       	std	Z+5, r15	; 0x05
 714:	e4 82       	std	Z+4, r14	; 0x04
 716:	0e 94 1a 05 	call	0xa34	; 0xa34 <sprintf>
	//send packet.
	PutString(packet);
 71a:	2d b7       	in	r18, 0x3d	; 61
 71c:	3e b7       	in	r19, 0x3e	; 62
 71e:	2a 5f       	subi	r18, 0xFA	; 250
 720:	3f 4f       	sbci	r19, 0xFF	; 255
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	3e bf       	out	0x3e, r19	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	2d bf       	out	0x3d, r18	; 61
 72c:	c8 01       	movw	r24, r16
 72e:	0e 94 17 03 	call	0x62e	; 0x62e <PutString>
	LCDPutString("    packet sent");
 732:	83 e1       	ldi	r24, 0x13	; 19
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
 73a:	8f e7       	ldi	r24, 0x7F	; 127
 73c:	94 e8       	ldi	r25, 0x84	; 132
 73e:	ae e1       	ldi	r26, 0x1E	; 30
 740:	81 50       	subi	r24, 0x01	; 1
 742:	90 40       	sbci	r25, 0x00	; 0
 744:	a0 40       	sbci	r26, 0x00	; 0
 746:	e1 f7       	brne	.-8      	; 0x740 <sendpacket+0xc0>
 748:	00 c0       	rjmp	.+0      	; 0x74a <sendpacket+0xca>
 74a:	00 00       	nop
	_delay_ms(1000);
	lcdClear();
 74c:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
	LCDPutString( "      Wait for Server      To Respond");
 750:	83 e2       	ldi	r24, 0x23	; 35
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
 758:	8f e3       	ldi	r24, 0x3F	; 63
 75a:	9d e0       	ldi	r25, 0x0D	; 13
 75c:	a3 e0       	ldi	r26, 0x03	; 3
 75e:	81 50       	subi	r24, 0x01	; 1
 760:	90 40       	sbci	r25, 0x00	; 0
 762:	a0 40       	sbci	r26, 0x00	; 0
 764:	e1 f7       	brne	.-8      	; 0x75e <sendpacket+0xde>
 766:	00 c0       	rjmp	.+0      	; 0x768 <sendpacket+0xe8>
 768:	00 00       	nop
		_delay_ms(100);	
}
 76a:	cc 59       	subi	r28, 0x9C	; 156
 76c:	df 4f       	sbci	r29, 0xFF	; 255
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	de bf       	out	0x3e, r29	; 62
 774:	0f be       	out	0x3f, r0	; 63
 776:	cd bf       	out	0x3d, r28	; 61
 778:	cf 91       	pop	r28
 77a:	df 91       	pop	r29
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	ff 90       	pop	r15
 782:	ef 90       	pop	r14
 784:	08 95       	ret

00000786 <getDataFromPacket>:
void getDataFromPacket(unsigned char data[]){

	unsigned char i = 0;
 786:	40 e0       	ldi	r20, 0x00	; 0
	while(i<dataLength){
 788:	0b c0       	rjmp	.+22     	; 0x7a0 <getDataFromPacket+0x1a>
		data[i] = dataBuffer[i];
 78a:	24 2f       	mov	r18, r20
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	fc 01       	movw	r30, r24
 790:	e2 0f       	add	r30, r18
 792:	f3 1f       	adc	r31, r19
 794:	26 54       	subi	r18, 0x46	; 70
 796:	3e 4f       	sbci	r19, 0xFE	; 254
 798:	d9 01       	movw	r26, r18
 79a:	2c 91       	ld	r18, X
 79c:	20 83       	st	Z, r18
		i++;
 79e:	4f 5f       	subi	r20, 0xFF	; 255
		_delay_ms(100);	
}
void getDataFromPacket(unsigned char data[]){

	unsigned char i = 0;
	while(i<dataLength){
 7a0:	20 91 ed 01 	lds	r18, 0x01ED
 7a4:	42 17       	cp	r20, r18
 7a6:	88 f3       	brcs	.-30     	; 0x78a <getDataFromPacket+0x4>
		data[i] = dataBuffer[i];
		i++;
	}
}
 7a8:	08 95       	ret

000007aa <receivePacket>:
	//getDataFromPacket(data);*/	

	       //  lcdClear();
		//	_delay_ms(100);	;
	//	uart_recieve();		
	if(loop){
 7aa:	80 91 60 01 	lds	r24, 0x0160
 7ae:	90 91 61 01 	lds	r25, 0x0161
 7b2:	00 97       	sbiw	r24, 0x00	; 0
 7b4:	c9 f0       	breq	.+50     	; 0x7e8 <receivePacket+0x3e>
			GoTo(0,1);
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <GoTo>
		LCDPutString(" ==Access Granted== ");
 7be:	89 e4       	ldi	r24, 0x49	; 73
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
 7c6:	8f e7       	ldi	r24, 0x7F	; 127
 7c8:	94 e8       	ldi	r25, 0x84	; 132
 7ca:	ae e1       	ldi	r26, 0x1E	; 30
 7cc:	81 50       	subi	r24, 0x01	; 1
 7ce:	90 40       	sbci	r25, 0x00	; 0
 7d0:	a0 40       	sbci	r26, 0x00	; 0
 7d2:	e1 f7       	brne	.-8      	; 0x7cc <receivePacket+0x22>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <receivePacket+0x2c>
 7d6:	00 00       	nop
		_delay_ms(1000);
		lcdClear();
 7d8:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
		 loop=0;
 7dc:	10 92 61 01 	sts	0x0161, r1
 7e0:	10 92 60 01 	sts	0x0160, r1
		choose_room();
 7e4:	0e 94 98 02 	call	0x530	; 0x530 <choose_room>
 7e8:	08 95       	ret

000007ea <init>:
#include"Timer.h"
	void init ()
	{   
	    DDRB |= 0x01; ///// a 1 on the bit zero of the register B
 7ea:	b8 9a       	sbi	0x17, 0	; 23
		PORTB|=0x01; ////  set the out put on the portB LED Off
 7ec:	c0 9a       	sbi	0x18, 0	; 24
	    GICR |=(1<<INT0)|(1<<INT1); /// register containing the INT0
 7ee:	8b b7       	in	r24, 0x3b	; 59
 7f0:	80 6c       	ori	r24, 0xC0	; 192
 7f2:	8b bf       	out	0x3b, r24	; 59
		MCUCR |=(1<<ISC01)|(1<<ISC00)|(1<<ISC10); //risin edge
 7f4:	85 b7       	in	r24, 0x35	; 53
 7f6:	87 60       	ori	r24, 0x07	; 7
 7f8:	85 bf       	out	0x35, r24	; 53
	DDRB |= 0x00; // bit 0 for output
 7fa:	87 b3       	in	r24, 0x17	; 23
 7fc:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0x00; /// LED is Off
 7fe:	88 b3       	in	r24, 0x18	; 24
 800:	88 bb       	out	0x18, r24	; 24
    TCCR0 |= (1<<CS01); // timer 0 normal mode 8 prescaler
 802:	83 b7       	in	r24, 0x33	; 51
 804:	82 60       	ori	r24, 0x02	; 2
 806:	83 bf       	out	0x33, r24	; 51
	sei();
 808:	78 94       	sei
	}
 80a:	08 95       	ret

0000080c <RFID_state>:
	volatile int i=max-1; 
	volatile int j=0;
	volatile int ii=0;

void RFID_state(){
		  if (spi_data_ready==1){
 80c:	80 91 85 01 	lds	r24, 0x0185
 810:	81 30       	cpi	r24, 0x01	; 1
 812:	11 f5       	brne	.+68     	; 0x858 <RFID_state+0x4c>
					spi_data_ready=0;
 814:	10 92 85 01 	sts	0x0185, r1
			    	PutString(buffer); // to transmit data into terminal
 818:	80 ef       	ldi	r24, 0xF0	; 240
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 17 03 	call	0x62e	; 0x62e <PutString>
 820:	8f eb       	ldi	r24, 0xBF	; 191
 822:	96 ec       	ldi	r25, 0xC6	; 198
 824:	ad e2       	ldi	r26, 0x2D	; 45
 826:	81 50       	subi	r24, 0x01	; 1
 828:	90 40       	sbci	r25, 0x00	; 0
 82a:	a0 40       	sbci	r26, 0x00	; 0
 82c:	e1 f7       	brne	.-8      	; 0x826 <RFID_state+0x1a>
 82e:	00 c0       	rjmp	.+0      	; 0x830 <RFID_state+0x24>
 830:	00 00       	nop
					// LCDPutString(" ==Access Granted== ");
					_delay_ms(1500);
					lcdClear();
 832:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
					LCDPutString("Your ID :");
 836:	82 e6       	ldi	r24, 0x62	; 98
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
 83e:	8f e3       	ldi	r24, 0x3F	; 63
 840:	9d e0       	ldi	r25, 0x0D	; 13
 842:	a3 e0       	ldi	r26, 0x03	; 3
 844:	81 50       	subi	r24, 0x01	; 1
 846:	90 40       	sbci	r25, 0x00	; 0
 848:	a0 40       	sbci	r26, 0x00	; 0
 84a:	e1 f7       	brne	.-8      	; 0x844 <RFID_state+0x38>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <RFID_state+0x42>
 84e:	00 00       	nop
					_delay_ms(100);	
					LCDPutString(buffer);
 850:	80 ef       	ldi	r24, 0xF0	; 240
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
 858:	08 95       	ret

0000085a <__vector_1>:
					}
				 }
				 	
ISR(INT0_vect)
	{	
 85a:	1f 92       	push	r1
 85c:	0f 92       	push	r0
 85e:	0f b6       	in	r0, 0x3f	; 63
 860:	0f 92       	push	r0
 862:	11 24       	eor	r1, r1
 864:	2f 93       	push	r18
 866:	3f 93       	push	r19
 868:	4f 93       	push	r20
 86a:	5f 93       	push	r21
 86c:	6f 93       	push	r22
 86e:	7f 93       	push	r23
 870:	8f 93       	push	r24
 872:	9f 93       	push	r25
 874:	af 93       	push	r26
 876:	bf 93       	push	r27
 878:	ef 93       	push	r30
 87a:	ff 93       	push	r31
			lcdClear();
 87c:	0e 94 c7 00 	call	0x18e	; 0x18e <lcdClear>
 880:	8f e3       	ldi	r24, 0x3F	; 63
 882:	9d e0       	ldi	r25, 0x0D	; 13
 884:	a3 e0       	ldi	r26, 0x03	; 3
 886:	81 50       	subi	r24, 0x01	; 1
 888:	90 40       	sbci	r25, 0x00	; 0
 88a:	a0 40       	sbci	r26, 0x00	; 0
 88c:	e1 f7       	brne	.-8      	; 0x886 <__stack+0x27>
 88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
 890:	00 00       	nop
			_delay_ms(100);
		LCDPutString("Enter PIN :");
 892:	8c e6       	ldi	r24, 0x6C	; 108
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	0e 94 ce 00 	call	0x19c	; 0x19c <LCDPutString>
	 SPI_MasterTransmit(0x55);  //getting the uid from rfid tag
 89a:	85 e5       	ldi	r24, 0x55	; 85
 89c:	0e 94 3a 03 	call	0x674	; 0x674 <SPI_MasterTransmit>
	 PORTD |=(1<<PD4);
 8a0:	94 9a       	sbi	0x12, 4	; 18
	}
 8a2:	ff 91       	pop	r31
 8a4:	ef 91       	pop	r30
 8a6:	bf 91       	pop	r27
 8a8:	af 91       	pop	r26
 8aa:	9f 91       	pop	r25
 8ac:	8f 91       	pop	r24
 8ae:	7f 91       	pop	r23
 8b0:	6f 91       	pop	r22
 8b2:	5f 91       	pop	r21
 8b4:	4f 91       	pop	r20
 8b6:	3f 91       	pop	r19
 8b8:	2f 91       	pop	r18
 8ba:	0f 90       	pop	r0
 8bc:	0f be       	out	0x3f, r0	; 63
 8be:	0f 90       	pop	r0
 8c0:	1f 90       	pop	r1
 8c2:	18 95       	reti

000008c4 <__vector_2>:
	 ISR(INT1_vect)
	 {
 8c4:	1f 92       	push	r1
 8c6:	0f 92       	push	r0
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	0f 92       	push	r0
 8cc:	11 24       	eor	r1, r1
 8ce:	8f 93       	push	r24
	  TIMSK |=(1<<TOV0);
 8d0:	89 b7       	in	r24, 0x39	; 57
 8d2:	81 60       	ori	r24, 0x01	; 1
 8d4:	89 bf       	out	0x39, r24	; 57
	  if (spi_flag==1)
 8d6:	80 91 86 01 	lds	r24, 0x0186
 8da:	81 30       	cpi	r24, 0x01	; 1
 8dc:	29 f4       	brne	.+10     	; 0x8e8 <__vector_2+0x24>
	  {
	   TIMSK &=~(1<<TOV0);
 8de:	89 b7       	in	r24, 0x39	; 57
 8e0:	8e 7f       	andi	r24, 0xFE	; 254
 8e2:	89 bf       	out	0x39, r24	; 57
	   spi_flag=0;
 8e4:	10 92 86 01 	sts	0x0186, r1
	  }
	   spi_flag=1;
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	80 93 86 01 	sts	0x0186, r24
	 }
 8ee:	8f 91       	pop	r24
 8f0:	0f 90       	pop	r0
 8f2:	0f be       	out	0x3f, r0	; 63
 8f4:	0f 90       	pop	r0
 8f6:	1f 90       	pop	r1
 8f8:	18 95       	reti

000008fa <__vector_11>:
	 ISR(TIMER0_OVF_vect)
	 {
 8fa:	1f 92       	push	r1
 8fc:	0f 92       	push	r0
 8fe:	0f b6       	in	r0, 0x3f	; 63
 900:	0f 92       	push	r0
 902:	11 24       	eor	r1, r1
 904:	2f 93       	push	r18
 906:	3f 93       	push	r19
 908:	4f 93       	push	r20
 90a:	5f 93       	push	r21
 90c:	6f 93       	push	r22
 90e:	7f 93       	push	r23
 910:	8f 93       	push	r24
 912:	9f 93       	push	r25
 914:	af 93       	push	r26
 916:	bf 93       	push	r27
 918:	ef 93       	push	r30
 91a:	ff 93       	push	r31
	  SPI_MasterTransmit(0xF5);
 91c:	85 ef       	ldi	r24, 0xF5	; 245
 91e:	0e 94 3a 03 	call	0x674	; 0x674 <SPI_MasterTransmit>
	 data=SPDR;
 922:	2f b1       	in	r18, 0x0f	; 15
 924:	20 93 84 01 	sts	0x0184, r18
	 if((j<max)&&(data!=0x86)){//
 928:	80 91 87 01 	lds	r24, 0x0187
 92c:	90 91 88 01 	lds	r25, 0x0188
 930:	8e 30       	cpi	r24, 0x0E	; 14
 932:	91 05       	cpc	r25, r1
 934:	0c f0       	brlt	.+2      	; 0x938 <__vector_11+0x3e>
 936:	49 c0       	rjmp	.+146    	; 0x9ca <__vector_11+0xd0>
 938:	26 38       	cpi	r18, 0x86	; 134
 93a:	09 f4       	brne	.+2      	; 0x93e <__vector_11+0x44>
 93c:	46 c0       	rjmp	.+140    	; 0x9ca <__vector_11+0xd0>
	 sprintf(Hexbuffer, "%02X", data);
 93e:	00 d0       	rcall	.+0      	; 0x940 <__vector_11+0x46>
 940:	00 d0       	rcall	.+0      	; 0x942 <__vector_11+0x48>
 942:	00 d0       	rcall	.+0      	; 0x944 <__vector_11+0x4a>
 944:	ed b7       	in	r30, 0x3d	; 61
 946:	fe b7       	in	r31, 0x3e	; 62
 948:	31 96       	adiw	r30, 0x01	; 1
 94a:	8e ee       	ldi	r24, 0xEE	; 238
 94c:	91 e0       	ldi	r25, 0x01	; 1
 94e:	ad b7       	in	r26, 0x3d	; 61
 950:	be b7       	in	r27, 0x3e	; 62
 952:	12 96       	adiw	r26, 0x02	; 2
 954:	9c 93       	st	X, r25
 956:	8e 93       	st	-X, r24
 958:	11 97       	sbiw	r26, 0x01	; 1
 95a:	88 e7       	ldi	r24, 0x78	; 120
 95c:	91 e0       	ldi	r25, 0x01	; 1
 95e:	93 83       	std	Z+3, r25	; 0x03
 960:	82 83       	std	Z+2, r24	; 0x02
 962:	24 83       	std	Z+4, r18	; 0x04
 964:	15 82       	std	Z+5, r1	; 0x05
 966:	0e 94 1a 05 	call	0xa34	; 0xa34 <sprintf>
		buffer[i]=Hexbuffer[1];
 96a:	e0 91 7d 01 	lds	r30, 0x017D
 96e:	f0 91 7e 01 	lds	r31, 0x017E
 972:	e0 51       	subi	r30, 0x10	; 16
 974:	fe 4f       	sbci	r31, 0xFE	; 254
 976:	80 91 ef 01 	lds	r24, 0x01EF
 97a:	80 83       	st	Z, r24
		i--;
 97c:	80 91 7d 01 	lds	r24, 0x017D
 980:	90 91 7e 01 	lds	r25, 0x017E
 984:	01 97       	sbiw	r24, 0x01	; 1
 986:	90 93 7e 01 	sts	0x017E, r25
 98a:	80 93 7d 01 	sts	0x017D, r24
		buffer[i]=Hexbuffer[0];
 98e:	e0 91 7d 01 	lds	r30, 0x017D
 992:	f0 91 7e 01 	lds	r31, 0x017E
 996:	e0 51       	subi	r30, 0x10	; 16
 998:	fe 4f       	sbci	r31, 0xFE	; 254
 99a:	80 91 ee 01 	lds	r24, 0x01EE
 99e:	80 83       	st	Z, r24
		ii=0;
 9a0:	10 92 8a 01 	sts	0x018A, r1
 9a4:	10 92 89 01 	sts	0x0189, r1
		i--;
 9a8:	80 91 7d 01 	lds	r24, 0x017D
 9ac:	90 91 7e 01 	lds	r25, 0x017E
 9b0:	01 97       	sbiw	r24, 0x01	; 1
 9b2:	90 93 7e 01 	sts	0x017E, r25
 9b6:	80 93 7d 01 	sts	0x017D, r24
 9ba:	8d b7       	in	r24, 0x3d	; 61
 9bc:	9e b7       	in	r25, 0x3e	; 62
 9be:	06 96       	adiw	r24, 0x06	; 6
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	f8 94       	cli
 9c4:	9e bf       	out	0x3e, r25	; 62
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	8d bf       	out	0x3d, r24	; 61
		}
	 if (j==max-7) {
 9ca:	80 91 87 01 	lds	r24, 0x0187
 9ce:	90 91 88 01 	lds	r25, 0x0188
 9d2:	87 30       	cpi	r24, 0x07	; 7
 9d4:	91 05       	cpc	r25, r1
 9d6:	71 f4       	brne	.+28     	; 0x9f4 <__vector_11+0xfa>
	 spi_data_ready=1;
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	80 93 85 01 	sts	0x0185, r24
	  j=0;
 9de:	10 92 88 01 	sts	0x0188, r1
 9e2:	10 92 87 01 	sts	0x0187, r1
	 i=max-1;
 9e6:	8d e0       	ldi	r24, 0x0D	; 13
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	90 93 7e 01 	sts	0x017E, r25
 9ee:	80 93 7d 01 	sts	0x017D, r24
 9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__vector_11+0x10c>
	 }
	 else j++;
 9f4:	80 91 87 01 	lds	r24, 0x0187
 9f8:	90 91 88 01 	lds	r25, 0x0188
 9fc:	01 96       	adiw	r24, 0x01	; 1
 9fe:	90 93 88 01 	sts	0x0188, r25
 a02:	80 93 87 01 	sts	0x0187, r24
}
 a06:	ff 91       	pop	r31
 a08:	ef 91       	pop	r30
 a0a:	bf 91       	pop	r27
 a0c:	af 91       	pop	r26
 a0e:	9f 91       	pop	r25
 a10:	8f 91       	pop	r24
 a12:	7f 91       	pop	r23
 a14:	6f 91       	pop	r22
 a16:	5f 91       	pop	r21
 a18:	4f 91       	pop	r20
 a1a:	3f 91       	pop	r19
 a1c:	2f 91       	pop	r18
 a1e:	0f 90       	pop	r0
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	0f 90       	pop	r0
 a24:	1f 90       	pop	r1
 a26:	18 95       	reti

00000a28 <Light_on>:
//#include <util/delay.h> /// a delay library is used to have a delay 
#include "Lights.h"

void Light_on(void)
{
DDRD |= (1<<PD4); /// assigning the first pin for portB to output
 a28:	8c 9a       	sbi	0x11, 4	; 17
PORTD|= (1<<PD4); /// SETTING BIT4 FOR PORT REG AS A HIGH READING BIT 
 a2a:	94 9a       	sbi	0x12, 4	; 18
}
 a2c:	08 95       	ret

00000a2e <light_Off>:
void light_Off()
{
   PORTD = 0b00000000;
 a2e:	12 ba       	out	0x12, r1	; 18
   DDRD  = 0b00000000;
 a30:	11 ba       	out	0x11, r1	; 17
  }
 a32:	08 95       	ret

00000a34 <sprintf>:
 a34:	ae e0       	ldi	r26, 0x0E	; 14
 a36:	b0 e0       	ldi	r27, 0x00	; 0
 a38:	e0 e2       	ldi	r30, 0x20	; 32
 a3a:	f5 e0       	ldi	r31, 0x05	; 5
 a3c:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__prologue_saves__+0x1c>
 a40:	0d 89       	ldd	r16, Y+21	; 0x15
 a42:	1e 89       	ldd	r17, Y+22	; 0x16
 a44:	86 e0       	ldi	r24, 0x06	; 6
 a46:	8c 83       	std	Y+4, r24	; 0x04
 a48:	1a 83       	std	Y+2, r17	; 0x02
 a4a:	09 83       	std	Y+1, r16	; 0x01
 a4c:	8f ef       	ldi	r24, 0xFF	; 255
 a4e:	9f e7       	ldi	r25, 0x7F	; 127
 a50:	9e 83       	std	Y+6, r25	; 0x06
 a52:	8d 83       	std	Y+5, r24	; 0x05
 a54:	9e 01       	movw	r18, r28
 a56:	27 5e       	subi	r18, 0xE7	; 231
 a58:	3f 4f       	sbci	r19, 0xFF	; 255
 a5a:	ce 01       	movw	r24, r28
 a5c:	01 96       	adiw	r24, 0x01	; 1
 a5e:	6f 89       	ldd	r22, Y+23	; 0x17
 a60:	78 8d       	ldd	r23, Y+24	; 0x18
 a62:	a9 01       	movw	r20, r18
 a64:	0e 94 3d 05 	call	0xa7a	; 0xa7a <vfprintf>
 a68:	ef 81       	ldd	r30, Y+7	; 0x07
 a6a:	f8 85       	ldd	r31, Y+8	; 0x08
 a6c:	e0 0f       	add	r30, r16
 a6e:	f1 1f       	adc	r31, r17
 a70:	10 82       	st	Z, r1
 a72:	2e 96       	adiw	r28, 0x0e	; 14
 a74:	e4 e0       	ldi	r30, 0x04	; 4
 a76:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__epilogue_restores__+0x1c>

00000a7a <vfprintf>:
 a7a:	ac e0       	ldi	r26, 0x0C	; 12
 a7c:	b0 e0       	ldi	r27, 0x00	; 0
 a7e:	e3 e4       	ldi	r30, 0x43	; 67
 a80:	f5 e0       	ldi	r31, 0x05	; 5
 a82:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__prologue_saves__>
 a86:	6c 01       	movw	r12, r24
 a88:	1b 01       	movw	r2, r22
 a8a:	8a 01       	movw	r16, r20
 a8c:	fc 01       	movw	r30, r24
 a8e:	17 82       	std	Z+7, r1	; 0x07
 a90:	16 82       	std	Z+6, r1	; 0x06
 a92:	83 81       	ldd	r24, Z+3	; 0x03
 a94:	81 ff       	sbrs	r24, 1
 a96:	d1 c1       	rjmp	.+930    	; 0xe3a <vfprintf+0x3c0>
 a98:	2e 01       	movw	r4, r28
 a9a:	08 94       	sec
 a9c:	41 1c       	adc	r4, r1
 a9e:	51 1c       	adc	r5, r1
 aa0:	f6 01       	movw	r30, r12
 aa2:	93 81       	ldd	r25, Z+3	; 0x03
 aa4:	f1 01       	movw	r30, r2
 aa6:	93 fd       	sbrc	r25, 3
 aa8:	85 91       	lpm	r24, Z+
 aaa:	93 ff       	sbrs	r25, 3
 aac:	81 91       	ld	r24, Z+
 aae:	1f 01       	movw	r2, r30
 ab0:	88 23       	and	r24, r24
 ab2:	09 f4       	brne	.+2      	; 0xab6 <vfprintf+0x3c>
 ab4:	be c1       	rjmp	.+892    	; 0xe32 <vfprintf+0x3b8>
 ab6:	85 32       	cpi	r24, 0x25	; 37
 ab8:	39 f4       	brne	.+14     	; 0xac8 <vfprintf+0x4e>
 aba:	93 fd       	sbrc	r25, 3
 abc:	85 91       	lpm	r24, Z+
 abe:	93 ff       	sbrs	r25, 3
 ac0:	81 91       	ld	r24, Z+
 ac2:	1f 01       	movw	r2, r30
 ac4:	85 32       	cpi	r24, 0x25	; 37
 ac6:	29 f4       	brne	.+10     	; 0xad2 <vfprintf+0x58>
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	b6 01       	movw	r22, r12
 acc:	0e 94 3a 07 	call	0xe74	; 0xe74 <fputc>
 ad0:	e7 cf       	rjmp	.-50     	; 0xaa0 <vfprintf+0x26>
 ad2:	ee 24       	eor	r14, r14
 ad4:	ff 24       	eor	r15, r15
 ad6:	20 e0       	ldi	r18, 0x00	; 0
 ad8:	20 32       	cpi	r18, 0x20	; 32
 ada:	b0 f4       	brcc	.+44     	; 0xb08 <vfprintf+0x8e>
 adc:	8b 32       	cpi	r24, 0x2B	; 43
 ade:	69 f0       	breq	.+26     	; 0xafa <vfprintf+0x80>
 ae0:	8c 32       	cpi	r24, 0x2C	; 44
 ae2:	28 f4       	brcc	.+10     	; 0xaee <vfprintf+0x74>
 ae4:	80 32       	cpi	r24, 0x20	; 32
 ae6:	51 f0       	breq	.+20     	; 0xafc <vfprintf+0x82>
 ae8:	83 32       	cpi	r24, 0x23	; 35
 aea:	71 f4       	brne	.+28     	; 0xb08 <vfprintf+0x8e>
 aec:	0b c0       	rjmp	.+22     	; 0xb04 <vfprintf+0x8a>
 aee:	8d 32       	cpi	r24, 0x2D	; 45
 af0:	39 f0       	breq	.+14     	; 0xb00 <vfprintf+0x86>
 af2:	80 33       	cpi	r24, 0x30	; 48
 af4:	49 f4       	brne	.+18     	; 0xb08 <vfprintf+0x8e>
 af6:	21 60       	ori	r18, 0x01	; 1
 af8:	2c c0       	rjmp	.+88     	; 0xb52 <vfprintf+0xd8>
 afa:	22 60       	ori	r18, 0x02	; 2
 afc:	24 60       	ori	r18, 0x04	; 4
 afe:	29 c0       	rjmp	.+82     	; 0xb52 <vfprintf+0xd8>
 b00:	28 60       	ori	r18, 0x08	; 8
 b02:	27 c0       	rjmp	.+78     	; 0xb52 <vfprintf+0xd8>
 b04:	20 61       	ori	r18, 0x10	; 16
 b06:	25 c0       	rjmp	.+74     	; 0xb52 <vfprintf+0xd8>
 b08:	27 fd       	sbrc	r18, 7
 b0a:	2c c0       	rjmp	.+88     	; 0xb64 <vfprintf+0xea>
 b0c:	38 2f       	mov	r19, r24
 b0e:	30 53       	subi	r19, 0x30	; 48
 b10:	3a 30       	cpi	r19, 0x0A	; 10
 b12:	98 f4       	brcc	.+38     	; 0xb3a <vfprintf+0xc0>
 b14:	26 ff       	sbrs	r18, 6
 b16:	08 c0       	rjmp	.+16     	; 0xb28 <vfprintf+0xae>
 b18:	8e 2d       	mov	r24, r14
 b1a:	88 0f       	add	r24, r24
 b1c:	e8 2e       	mov	r14, r24
 b1e:	ee 0c       	add	r14, r14
 b20:	ee 0c       	add	r14, r14
 b22:	e8 0e       	add	r14, r24
 b24:	e3 0e       	add	r14, r19
 b26:	15 c0       	rjmp	.+42     	; 0xb52 <vfprintf+0xd8>
 b28:	8f 2d       	mov	r24, r15
 b2a:	88 0f       	add	r24, r24
 b2c:	f8 2e       	mov	r15, r24
 b2e:	ff 0c       	add	r15, r15
 b30:	ff 0c       	add	r15, r15
 b32:	f8 0e       	add	r15, r24
 b34:	f3 0e       	add	r15, r19
 b36:	20 62       	ori	r18, 0x20	; 32
 b38:	0c c0       	rjmp	.+24     	; 0xb52 <vfprintf+0xd8>
 b3a:	8e 32       	cpi	r24, 0x2E	; 46
 b3c:	21 f4       	brne	.+8      	; 0xb46 <vfprintf+0xcc>
 b3e:	26 fd       	sbrc	r18, 6
 b40:	78 c1       	rjmp	.+752    	; 0xe32 <vfprintf+0x3b8>
 b42:	20 64       	ori	r18, 0x40	; 64
 b44:	06 c0       	rjmp	.+12     	; 0xb52 <vfprintf+0xd8>
 b46:	8c 36       	cpi	r24, 0x6C	; 108
 b48:	11 f4       	brne	.+4      	; 0xb4e <vfprintf+0xd4>
 b4a:	20 68       	ori	r18, 0x80	; 128
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <vfprintf+0xd8>
 b4e:	88 36       	cpi	r24, 0x68	; 104
 b50:	49 f4       	brne	.+18     	; 0xb64 <vfprintf+0xea>
 b52:	f1 01       	movw	r30, r2
 b54:	93 fd       	sbrc	r25, 3
 b56:	85 91       	lpm	r24, Z+
 b58:	93 ff       	sbrs	r25, 3
 b5a:	81 91       	ld	r24, Z+
 b5c:	1f 01       	movw	r2, r30
 b5e:	88 23       	and	r24, r24
 b60:	09 f0       	breq	.+2      	; 0xb64 <vfprintf+0xea>
 b62:	ba cf       	rjmp	.-140    	; 0xad8 <vfprintf+0x5e>
 b64:	98 2f       	mov	r25, r24
 b66:	95 54       	subi	r25, 0x45	; 69
 b68:	93 30       	cpi	r25, 0x03	; 3
 b6a:	18 f0       	brcs	.+6      	; 0xb72 <vfprintf+0xf8>
 b6c:	90 52       	subi	r25, 0x20	; 32
 b6e:	93 30       	cpi	r25, 0x03	; 3
 b70:	28 f4       	brcc	.+10     	; 0xb7c <vfprintf+0x102>
 b72:	0c 5f       	subi	r16, 0xFC	; 252
 b74:	1f 4f       	sbci	r17, 0xFF	; 255
 b76:	ff e3       	ldi	r31, 0x3F	; 63
 b78:	f9 83       	std	Y+1, r31	; 0x01
 b7a:	0d c0       	rjmp	.+26     	; 0xb96 <vfprintf+0x11c>
 b7c:	83 36       	cpi	r24, 0x63	; 99
 b7e:	31 f0       	breq	.+12     	; 0xb8c <vfprintf+0x112>
 b80:	83 37       	cpi	r24, 0x73	; 115
 b82:	71 f0       	breq	.+28     	; 0xba0 <vfprintf+0x126>
 b84:	83 35       	cpi	r24, 0x53	; 83
 b86:	09 f0       	breq	.+2      	; 0xb8a <vfprintf+0x110>
 b88:	60 c0       	rjmp	.+192    	; 0xc4a <vfprintf+0x1d0>
 b8a:	22 c0       	rjmp	.+68     	; 0xbd0 <vfprintf+0x156>
 b8c:	f8 01       	movw	r30, r16
 b8e:	80 81       	ld	r24, Z
 b90:	89 83       	std	Y+1, r24	; 0x01
 b92:	0e 5f       	subi	r16, 0xFE	; 254
 b94:	1f 4f       	sbci	r17, 0xFF	; 255
 b96:	42 01       	movw	r8, r4
 b98:	71 e0       	ldi	r23, 0x01	; 1
 b9a:	a7 2e       	mov	r10, r23
 b9c:	b1 2c       	mov	r11, r1
 b9e:	16 c0       	rjmp	.+44     	; 0xbcc <vfprintf+0x152>
 ba0:	62 e0       	ldi	r22, 0x02	; 2
 ba2:	66 2e       	mov	r6, r22
 ba4:	71 2c       	mov	r7, r1
 ba6:	60 0e       	add	r6, r16
 ba8:	71 1e       	adc	r7, r17
 baa:	f8 01       	movw	r30, r16
 bac:	80 80       	ld	r8, Z
 bae:	91 80       	ldd	r9, Z+1	; 0x01
 bb0:	26 ff       	sbrs	r18, 6
 bb2:	03 c0       	rjmp	.+6      	; 0xbba <vfprintf+0x140>
 bb4:	6e 2d       	mov	r22, r14
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	02 c0       	rjmp	.+4      	; 0xbbe <vfprintf+0x144>
 bba:	6f ef       	ldi	r22, 0xFF	; 255
 bbc:	7f ef       	ldi	r23, 0xFF	; 255
 bbe:	c4 01       	movw	r24, r8
 bc0:	2c 87       	std	Y+12, r18	; 0x0c
 bc2:	0e 94 2f 07 	call	0xe5e	; 0xe5e <strnlen>
 bc6:	5c 01       	movw	r10, r24
 bc8:	83 01       	movw	r16, r6
 bca:	2c 85       	ldd	r18, Y+12	; 0x0c
 bcc:	2f 77       	andi	r18, 0x7F	; 127
 bce:	17 c0       	rjmp	.+46     	; 0xbfe <vfprintf+0x184>
 bd0:	52 e0       	ldi	r21, 0x02	; 2
 bd2:	65 2e       	mov	r6, r21
 bd4:	71 2c       	mov	r7, r1
 bd6:	60 0e       	add	r6, r16
 bd8:	71 1e       	adc	r7, r17
 bda:	f8 01       	movw	r30, r16
 bdc:	80 80       	ld	r8, Z
 bde:	91 80       	ldd	r9, Z+1	; 0x01
 be0:	26 ff       	sbrs	r18, 6
 be2:	03 c0       	rjmp	.+6      	; 0xbea <vfprintf+0x170>
 be4:	6e 2d       	mov	r22, r14
 be6:	70 e0       	ldi	r23, 0x00	; 0
 be8:	02 c0       	rjmp	.+4      	; 0xbee <vfprintf+0x174>
 bea:	6f ef       	ldi	r22, 0xFF	; 255
 bec:	7f ef       	ldi	r23, 0xFF	; 255
 bee:	c4 01       	movw	r24, r8
 bf0:	2c 87       	std	Y+12, r18	; 0x0c
 bf2:	0e 94 24 07 	call	0xe48	; 0xe48 <strnlen_P>
 bf6:	5c 01       	movw	r10, r24
 bf8:	2c 85       	ldd	r18, Y+12	; 0x0c
 bfa:	20 68       	ori	r18, 0x80	; 128
 bfc:	83 01       	movw	r16, r6
 bfe:	23 fd       	sbrc	r18, 3
 c00:	20 c0       	rjmp	.+64     	; 0xc42 <vfprintf+0x1c8>
 c02:	08 c0       	rjmp	.+16     	; 0xc14 <vfprintf+0x19a>
 c04:	80 e2       	ldi	r24, 0x20	; 32
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	b6 01       	movw	r22, r12
 c0a:	2c 87       	std	Y+12, r18	; 0x0c
 c0c:	0e 94 3a 07 	call	0xe74	; 0xe74 <fputc>
 c10:	fa 94       	dec	r15
 c12:	2c 85       	ldd	r18, Y+12	; 0x0c
 c14:	8f 2d       	mov	r24, r15
 c16:	90 e0       	ldi	r25, 0x00	; 0
 c18:	a8 16       	cp	r10, r24
 c1a:	b9 06       	cpc	r11, r25
 c1c:	98 f3       	brcs	.-26     	; 0xc04 <vfprintf+0x18a>
 c1e:	11 c0       	rjmp	.+34     	; 0xc42 <vfprintf+0x1c8>
 c20:	f4 01       	movw	r30, r8
 c22:	27 fd       	sbrc	r18, 7
 c24:	85 91       	lpm	r24, Z+
 c26:	27 ff       	sbrs	r18, 7
 c28:	81 91       	ld	r24, Z+
 c2a:	4f 01       	movw	r8, r30
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	b6 01       	movw	r22, r12
 c30:	2c 87       	std	Y+12, r18	; 0x0c
 c32:	0e 94 3a 07 	call	0xe74	; 0xe74 <fputc>
 c36:	2c 85       	ldd	r18, Y+12	; 0x0c
 c38:	f1 10       	cpse	r15, r1
 c3a:	fa 94       	dec	r15
 c3c:	08 94       	sec
 c3e:	a1 08       	sbc	r10, r1
 c40:	b1 08       	sbc	r11, r1
 c42:	a1 14       	cp	r10, r1
 c44:	b1 04       	cpc	r11, r1
 c46:	61 f7       	brne	.-40     	; 0xc20 <vfprintf+0x1a6>
 c48:	f1 c0       	rjmp	.+482    	; 0xe2c <vfprintf+0x3b2>
 c4a:	84 36       	cpi	r24, 0x64	; 100
 c4c:	11 f0       	breq	.+4      	; 0xc52 <vfprintf+0x1d8>
 c4e:	89 36       	cpi	r24, 0x69	; 105
 c50:	49 f5       	brne	.+82     	; 0xca4 <vfprintf+0x22a>
 c52:	27 ff       	sbrs	r18, 7
 c54:	08 c0       	rjmp	.+16     	; 0xc66 <vfprintf+0x1ec>
 c56:	f8 01       	movw	r30, r16
 c58:	60 81       	ld	r22, Z
 c5a:	71 81       	ldd	r23, Z+1	; 0x01
 c5c:	82 81       	ldd	r24, Z+2	; 0x02
 c5e:	93 81       	ldd	r25, Z+3	; 0x03
 c60:	0c 5f       	subi	r16, 0xFC	; 252
 c62:	1f 4f       	sbci	r17, 0xFF	; 255
 c64:	09 c0       	rjmp	.+18     	; 0xc78 <vfprintf+0x1fe>
 c66:	f8 01       	movw	r30, r16
 c68:	60 81       	ld	r22, Z
 c6a:	71 81       	ldd	r23, Z+1	; 0x01
 c6c:	88 27       	eor	r24, r24
 c6e:	77 fd       	sbrc	r23, 7
 c70:	80 95       	com	r24
 c72:	98 2f       	mov	r25, r24
 c74:	0e 5f       	subi	r16, 0xFE	; 254
 c76:	1f 4f       	sbci	r17, 0xFF	; 255
 c78:	4f e6       	ldi	r20, 0x6F	; 111
 c7a:	b4 2e       	mov	r11, r20
 c7c:	b2 22       	and	r11, r18
 c7e:	97 ff       	sbrs	r25, 7
 c80:	09 c0       	rjmp	.+18     	; 0xc94 <vfprintf+0x21a>
 c82:	90 95       	com	r25
 c84:	80 95       	com	r24
 c86:	70 95       	com	r23
 c88:	61 95       	neg	r22
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255
 c8c:	8f 4f       	sbci	r24, 0xFF	; 255
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	f0 e8       	ldi	r31, 0x80	; 128
 c92:	bf 2a       	or	r11, r31
 c94:	a2 01       	movw	r20, r4
 c96:	2a e0       	ldi	r18, 0x0A	; 10
 c98:	30 e0       	ldi	r19, 0x00	; 0
 c9a:	0e 94 66 07 	call	0xecc	; 0xecc <__ultoa_invert>
 c9e:	78 2e       	mov	r7, r24
 ca0:	74 18       	sub	r7, r4
 ca2:	45 c0       	rjmp	.+138    	; 0xd2e <vfprintf+0x2b4>
 ca4:	85 37       	cpi	r24, 0x75	; 117
 ca6:	31 f4       	brne	.+12     	; 0xcb4 <vfprintf+0x23a>
 ca8:	3f ee       	ldi	r19, 0xEF	; 239
 caa:	b3 2e       	mov	r11, r19
 cac:	b2 22       	and	r11, r18
 cae:	2a e0       	ldi	r18, 0x0A	; 10
 cb0:	30 e0       	ldi	r19, 0x00	; 0
 cb2:	25 c0       	rjmp	.+74     	; 0xcfe <vfprintf+0x284>
 cb4:	99 ef       	ldi	r25, 0xF9	; 249
 cb6:	b9 2e       	mov	r11, r25
 cb8:	b2 22       	and	r11, r18
 cba:	8f 36       	cpi	r24, 0x6F	; 111
 cbc:	c1 f0       	breq	.+48     	; 0xcee <vfprintf+0x274>
 cbe:	80 37       	cpi	r24, 0x70	; 112
 cc0:	20 f4       	brcc	.+8      	; 0xcca <vfprintf+0x250>
 cc2:	88 35       	cpi	r24, 0x58	; 88
 cc4:	09 f0       	breq	.+2      	; 0xcc8 <vfprintf+0x24e>
 cc6:	b5 c0       	rjmp	.+362    	; 0xe32 <vfprintf+0x3b8>
 cc8:	0d c0       	rjmp	.+26     	; 0xce4 <vfprintf+0x26a>
 cca:	80 37       	cpi	r24, 0x70	; 112
 ccc:	21 f0       	breq	.+8      	; 0xcd6 <vfprintf+0x25c>
 cce:	88 37       	cpi	r24, 0x78	; 120
 cd0:	09 f0       	breq	.+2      	; 0xcd4 <vfprintf+0x25a>
 cd2:	af c0       	rjmp	.+350    	; 0xe32 <vfprintf+0x3b8>
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x260>
 cd6:	20 e1       	ldi	r18, 0x10	; 16
 cd8:	b2 2a       	or	r11, r18
 cda:	b4 fe       	sbrs	r11, 4
 cdc:	0b c0       	rjmp	.+22     	; 0xcf4 <vfprintf+0x27a>
 cde:	84 e0       	ldi	r24, 0x04	; 4
 ce0:	b8 2a       	or	r11, r24
 ce2:	08 c0       	rjmp	.+16     	; 0xcf4 <vfprintf+0x27a>
 ce4:	b4 fe       	sbrs	r11, 4
 ce6:	09 c0       	rjmp	.+18     	; 0xcfa <vfprintf+0x280>
 ce8:	e6 e0       	ldi	r30, 0x06	; 6
 cea:	be 2a       	or	r11, r30
 cec:	06 c0       	rjmp	.+12     	; 0xcfa <vfprintf+0x280>
 cee:	28 e0       	ldi	r18, 0x08	; 8
 cf0:	30 e0       	ldi	r19, 0x00	; 0
 cf2:	05 c0       	rjmp	.+10     	; 0xcfe <vfprintf+0x284>
 cf4:	20 e1       	ldi	r18, 0x10	; 16
 cf6:	30 e0       	ldi	r19, 0x00	; 0
 cf8:	02 c0       	rjmp	.+4      	; 0xcfe <vfprintf+0x284>
 cfa:	20 e1       	ldi	r18, 0x10	; 16
 cfc:	32 e0       	ldi	r19, 0x02	; 2
 cfe:	b7 fe       	sbrs	r11, 7
 d00:	08 c0       	rjmp	.+16     	; 0xd12 <vfprintf+0x298>
 d02:	f8 01       	movw	r30, r16
 d04:	60 81       	ld	r22, Z
 d06:	71 81       	ldd	r23, Z+1	; 0x01
 d08:	82 81       	ldd	r24, Z+2	; 0x02
 d0a:	93 81       	ldd	r25, Z+3	; 0x03
 d0c:	0c 5f       	subi	r16, 0xFC	; 252
 d0e:	1f 4f       	sbci	r17, 0xFF	; 255
 d10:	07 c0       	rjmp	.+14     	; 0xd20 <vfprintf+0x2a6>
 d12:	f8 01       	movw	r30, r16
 d14:	60 81       	ld	r22, Z
 d16:	71 81       	ldd	r23, Z+1	; 0x01
 d18:	80 e0       	ldi	r24, 0x00	; 0
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	0e 5f       	subi	r16, 0xFE	; 254
 d1e:	1f 4f       	sbci	r17, 0xFF	; 255
 d20:	a2 01       	movw	r20, r4
 d22:	0e 94 66 07 	call	0xecc	; 0xecc <__ultoa_invert>
 d26:	78 2e       	mov	r7, r24
 d28:	74 18       	sub	r7, r4
 d2a:	ff e7       	ldi	r31, 0x7F	; 127
 d2c:	bf 22       	and	r11, r31
 d2e:	b6 fe       	sbrs	r11, 6
 d30:	0b c0       	rjmp	.+22     	; 0xd48 <vfprintf+0x2ce>
 d32:	2e ef       	ldi	r18, 0xFE	; 254
 d34:	b2 22       	and	r11, r18
 d36:	7e 14       	cp	r7, r14
 d38:	38 f4       	brcc	.+14     	; 0xd48 <vfprintf+0x2ce>
 d3a:	b4 fe       	sbrs	r11, 4
 d3c:	07 c0       	rjmp	.+14     	; 0xd4c <vfprintf+0x2d2>
 d3e:	b2 fc       	sbrc	r11, 2
 d40:	05 c0       	rjmp	.+10     	; 0xd4c <vfprintf+0x2d2>
 d42:	8f ee       	ldi	r24, 0xEF	; 239
 d44:	b8 22       	and	r11, r24
 d46:	02 c0       	rjmp	.+4      	; 0xd4c <vfprintf+0x2d2>
 d48:	a7 2c       	mov	r10, r7
 d4a:	01 c0       	rjmp	.+2      	; 0xd4e <vfprintf+0x2d4>
 d4c:	ae 2c       	mov	r10, r14
 d4e:	8b 2d       	mov	r24, r11
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	b4 fe       	sbrs	r11, 4
 d54:	0d c0       	rjmp	.+26     	; 0xd70 <vfprintf+0x2f6>
 d56:	fe 01       	movw	r30, r28
 d58:	e7 0d       	add	r30, r7
 d5a:	f1 1d       	adc	r31, r1
 d5c:	20 81       	ld	r18, Z
 d5e:	20 33       	cpi	r18, 0x30	; 48
 d60:	19 f4       	brne	.+6      	; 0xd68 <vfprintf+0x2ee>
 d62:	e9 ee       	ldi	r30, 0xE9	; 233
 d64:	be 22       	and	r11, r30
 d66:	09 c0       	rjmp	.+18     	; 0xd7a <vfprintf+0x300>
 d68:	a3 94       	inc	r10
 d6a:	b2 fe       	sbrs	r11, 2
 d6c:	06 c0       	rjmp	.+12     	; 0xd7a <vfprintf+0x300>
 d6e:	04 c0       	rjmp	.+8      	; 0xd78 <vfprintf+0x2fe>
 d70:	86 78       	andi	r24, 0x86	; 134
 d72:	90 70       	andi	r25, 0x00	; 0
 d74:	00 97       	sbiw	r24, 0x00	; 0
 d76:	09 f0       	breq	.+2      	; 0xd7a <vfprintf+0x300>
 d78:	a3 94       	inc	r10
 d7a:	8b 2c       	mov	r8, r11
 d7c:	99 24       	eor	r9, r9
 d7e:	b3 fc       	sbrc	r11, 3
 d80:	14 c0       	rjmp	.+40     	; 0xdaa <vfprintf+0x330>
 d82:	b0 fe       	sbrs	r11, 0
 d84:	0f c0       	rjmp	.+30     	; 0xda4 <vfprintf+0x32a>
 d86:	af 14       	cp	r10, r15
 d88:	28 f4       	brcc	.+10     	; 0xd94 <vfprintf+0x31a>
 d8a:	e7 2c       	mov	r14, r7
 d8c:	ef 0c       	add	r14, r15
 d8e:	ea 18       	sub	r14, r10
 d90:	af 2c       	mov	r10, r15
 d92:	08 c0       	rjmp	.+16     	; 0xda4 <vfprintf+0x32a>
 d94:	e7 2c       	mov	r14, r7
 d96:	06 c0       	rjmp	.+12     	; 0xda4 <vfprintf+0x32a>
 d98:	80 e2       	ldi	r24, 0x20	; 32
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	b6 01       	movw	r22, r12
 d9e:	0e 94 3a 07 	call	0xe74	; 0xe74 <fputc>
 da2:	a3 94       	inc	r10
 da4:	af 14       	cp	r10, r15
 da6:	c0 f3       	brcs	.-16     	; 0xd98 <vfprintf+0x31e>
 da8:	04 c0       	rjmp	.+8      	; 0xdb2 <vfprintf+0x338>
 daa:	af 14       	cp	r10, r15
 dac:	10 f4       	brcc	.+4      	; 0xdb2 <vfprintf+0x338>
 dae:	fa 18       	sub	r15, r10
 db0:	01 c0       	rjmp	.+2      	; 0xdb4 <vfprintf+0x33a>
 db2:	ff 24       	eor	r15, r15
 db4:	84 fe       	sbrs	r8, 4
 db6:	0f c0       	rjmp	.+30     	; 0xdd6 <vfprintf+0x35c>
 db8:	80 e3       	ldi	r24, 0x30	; 48
 dba:	90 e0       	ldi	r25, 0x00	; 0
 dbc:	b6 01       	movw	r22, r12
 dbe:	0e 94 3a 07 	call	0xe74	; 0xe74 <fputc>
 dc2:	82 fe       	sbrs	r8, 2
 dc4:	1f c0       	rjmp	.+62     	; 0xe04 <vfprintf+0x38a>
 dc6:	81 fe       	sbrs	r8, 1
 dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <vfprintf+0x356>
 dca:	88 e5       	ldi	r24, 0x58	; 88
 dcc:	90 e0       	ldi	r25, 0x00	; 0
 dce:	10 c0       	rjmp	.+32     	; 0xdf0 <vfprintf+0x376>
 dd0:	88 e7       	ldi	r24, 0x78	; 120
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <vfprintf+0x376>
 dd6:	c4 01       	movw	r24, r8
 dd8:	86 78       	andi	r24, 0x86	; 134
 dda:	90 70       	andi	r25, 0x00	; 0
 ddc:	00 97       	sbiw	r24, 0x00	; 0
 dde:	91 f0       	breq	.+36     	; 0xe04 <vfprintf+0x38a>
 de0:	81 fc       	sbrc	r8, 1
 de2:	02 c0       	rjmp	.+4      	; 0xde8 <vfprintf+0x36e>
 de4:	80 e2       	ldi	r24, 0x20	; 32
 de6:	01 c0       	rjmp	.+2      	; 0xdea <vfprintf+0x370>
 de8:	8b e2       	ldi	r24, 0x2B	; 43
 dea:	b7 fc       	sbrc	r11, 7
 dec:	8d e2       	ldi	r24, 0x2D	; 45
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	b6 01       	movw	r22, r12
 df2:	0e 94 3a 07 	call	0xe74	; 0xe74 <fputc>
 df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0x38a>
 df8:	80 e3       	ldi	r24, 0x30	; 48
 dfa:	90 e0       	ldi	r25, 0x00	; 0
 dfc:	b6 01       	movw	r22, r12
 dfe:	0e 94 3a 07 	call	0xe74	; 0xe74 <fputc>
 e02:	ea 94       	dec	r14
 e04:	7e 14       	cp	r7, r14
 e06:	c0 f3       	brcs	.-16     	; 0xdf8 <vfprintf+0x37e>
 e08:	7a 94       	dec	r7
 e0a:	f2 01       	movw	r30, r4
 e0c:	e7 0d       	add	r30, r7
 e0e:	f1 1d       	adc	r31, r1
 e10:	80 81       	ld	r24, Z
 e12:	90 e0       	ldi	r25, 0x00	; 0
 e14:	b6 01       	movw	r22, r12
 e16:	0e 94 3a 07 	call	0xe74	; 0xe74 <fputc>
 e1a:	77 20       	and	r7, r7
 e1c:	a9 f7       	brne	.-22     	; 0xe08 <vfprintf+0x38e>
 e1e:	06 c0       	rjmp	.+12     	; 0xe2c <vfprintf+0x3b2>
 e20:	80 e2       	ldi	r24, 0x20	; 32
 e22:	90 e0       	ldi	r25, 0x00	; 0
 e24:	b6 01       	movw	r22, r12
 e26:	0e 94 3a 07 	call	0xe74	; 0xe74 <fputc>
 e2a:	fa 94       	dec	r15
 e2c:	ff 20       	and	r15, r15
 e2e:	c1 f7       	brne	.-16     	; 0xe20 <vfprintf+0x3a6>
 e30:	37 ce       	rjmp	.-914    	; 0xaa0 <vfprintf+0x26>
 e32:	f6 01       	movw	r30, r12
 e34:	26 81       	ldd	r18, Z+6	; 0x06
 e36:	37 81       	ldd	r19, Z+7	; 0x07
 e38:	02 c0       	rjmp	.+4      	; 0xe3e <vfprintf+0x3c4>
 e3a:	2f ef       	ldi	r18, 0xFF	; 255
 e3c:	3f ef       	ldi	r19, 0xFF	; 255
 e3e:	c9 01       	movw	r24, r18
 e40:	2c 96       	adiw	r28, 0x0c	; 12
 e42:	e2 e1       	ldi	r30, 0x12	; 18
 e44:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__epilogue_restores__>

00000e48 <strnlen_P>:
 e48:	fc 01       	movw	r30, r24
 e4a:	05 90       	lpm	r0, Z+
 e4c:	61 50       	subi	r22, 0x01	; 1
 e4e:	70 40       	sbci	r23, 0x00	; 0
 e50:	01 10       	cpse	r0, r1
 e52:	d8 f7       	brcc	.-10     	; 0xe4a <strnlen_P+0x2>
 e54:	80 95       	com	r24
 e56:	90 95       	com	r25
 e58:	8e 0f       	add	r24, r30
 e5a:	9f 1f       	adc	r25, r31
 e5c:	08 95       	ret

00000e5e <strnlen>:
 e5e:	fc 01       	movw	r30, r24
 e60:	61 50       	subi	r22, 0x01	; 1
 e62:	70 40       	sbci	r23, 0x00	; 0
 e64:	01 90       	ld	r0, Z+
 e66:	01 10       	cpse	r0, r1
 e68:	d8 f7       	brcc	.-10     	; 0xe60 <strnlen+0x2>
 e6a:	80 95       	com	r24
 e6c:	90 95       	com	r25
 e6e:	8e 0f       	add	r24, r30
 e70:	9f 1f       	adc	r25, r31
 e72:	08 95       	ret

00000e74 <fputc>:
 e74:	0f 93       	push	r16
 e76:	1f 93       	push	r17
 e78:	cf 93       	push	r28
 e7a:	df 93       	push	r29
 e7c:	8c 01       	movw	r16, r24
 e7e:	eb 01       	movw	r28, r22
 e80:	8b 81       	ldd	r24, Y+3	; 0x03
 e82:	81 ff       	sbrs	r24, 1
 e84:	1b c0       	rjmp	.+54     	; 0xebc <fputc+0x48>
 e86:	82 ff       	sbrs	r24, 2
 e88:	0d c0       	rjmp	.+26     	; 0xea4 <fputc+0x30>
 e8a:	2e 81       	ldd	r18, Y+6	; 0x06
 e8c:	3f 81       	ldd	r19, Y+7	; 0x07
 e8e:	8c 81       	ldd	r24, Y+4	; 0x04
 e90:	9d 81       	ldd	r25, Y+5	; 0x05
 e92:	28 17       	cp	r18, r24
 e94:	39 07       	cpc	r19, r25
 e96:	64 f4       	brge	.+24     	; 0xeb0 <fputc+0x3c>
 e98:	e8 81       	ld	r30, Y
 e9a:	f9 81       	ldd	r31, Y+1	; 0x01
 e9c:	01 93       	st	Z+, r16
 e9e:	f9 83       	std	Y+1, r31	; 0x01
 ea0:	e8 83       	st	Y, r30
 ea2:	06 c0       	rjmp	.+12     	; 0xeb0 <fputc+0x3c>
 ea4:	e8 85       	ldd	r30, Y+8	; 0x08
 ea6:	f9 85       	ldd	r31, Y+9	; 0x09
 ea8:	80 2f       	mov	r24, r16
 eaa:	09 95       	icall
 eac:	00 97       	sbiw	r24, 0x00	; 0
 eae:	31 f4       	brne	.+12     	; 0xebc <fputc+0x48>
 eb0:	8e 81       	ldd	r24, Y+6	; 0x06
 eb2:	9f 81       	ldd	r25, Y+7	; 0x07
 eb4:	01 96       	adiw	r24, 0x01	; 1
 eb6:	9f 83       	std	Y+7, r25	; 0x07
 eb8:	8e 83       	std	Y+6, r24	; 0x06
 eba:	02 c0       	rjmp	.+4      	; 0xec0 <fputc+0x4c>
 ebc:	0f ef       	ldi	r16, 0xFF	; 255
 ebe:	1f ef       	ldi	r17, 0xFF	; 255
 ec0:	c8 01       	movw	r24, r16
 ec2:	df 91       	pop	r29
 ec4:	cf 91       	pop	r28
 ec6:	1f 91       	pop	r17
 ec8:	0f 91       	pop	r16
 eca:	08 95       	ret

00000ecc <__ultoa_invert>:
 ecc:	fa 01       	movw	r30, r20
 ece:	aa 27       	eor	r26, r26
 ed0:	28 30       	cpi	r18, 0x08	; 8
 ed2:	51 f1       	breq	.+84     	; 0xf28 <__ultoa_invert+0x5c>
 ed4:	20 31       	cpi	r18, 0x10	; 16
 ed6:	81 f1       	breq	.+96     	; 0xf38 <__ultoa_invert+0x6c>
 ed8:	e8 94       	clt
 eda:	6f 93       	push	r22
 edc:	6e 7f       	andi	r22, 0xFE	; 254
 ede:	6e 5f       	subi	r22, 0xFE	; 254
 ee0:	7f 4f       	sbci	r23, 0xFF	; 255
 ee2:	8f 4f       	sbci	r24, 0xFF	; 255
 ee4:	9f 4f       	sbci	r25, 0xFF	; 255
 ee6:	af 4f       	sbci	r26, 0xFF	; 255
 ee8:	b1 e0       	ldi	r27, 0x01	; 1
 eea:	3e d0       	rcall	.+124    	; 0xf68 <__ultoa_invert+0x9c>
 eec:	b4 e0       	ldi	r27, 0x04	; 4
 eee:	3c d0       	rcall	.+120    	; 0xf68 <__ultoa_invert+0x9c>
 ef0:	67 0f       	add	r22, r23
 ef2:	78 1f       	adc	r23, r24
 ef4:	89 1f       	adc	r24, r25
 ef6:	9a 1f       	adc	r25, r26
 ef8:	a1 1d       	adc	r26, r1
 efa:	68 0f       	add	r22, r24
 efc:	79 1f       	adc	r23, r25
 efe:	8a 1f       	adc	r24, r26
 f00:	91 1d       	adc	r25, r1
 f02:	a1 1d       	adc	r26, r1
 f04:	6a 0f       	add	r22, r26
 f06:	71 1d       	adc	r23, r1
 f08:	81 1d       	adc	r24, r1
 f0a:	91 1d       	adc	r25, r1
 f0c:	a1 1d       	adc	r26, r1
 f0e:	20 d0       	rcall	.+64     	; 0xf50 <__ultoa_invert+0x84>
 f10:	09 f4       	brne	.+2      	; 0xf14 <__ultoa_invert+0x48>
 f12:	68 94       	set
 f14:	3f 91       	pop	r19
 f16:	2a e0       	ldi	r18, 0x0A	; 10
 f18:	26 9f       	mul	r18, r22
 f1a:	11 24       	eor	r1, r1
 f1c:	30 19       	sub	r19, r0
 f1e:	30 5d       	subi	r19, 0xD0	; 208
 f20:	31 93       	st	Z+, r19
 f22:	de f6       	brtc	.-74     	; 0xeda <__ultoa_invert+0xe>
 f24:	cf 01       	movw	r24, r30
 f26:	08 95       	ret
 f28:	46 2f       	mov	r20, r22
 f2a:	47 70       	andi	r20, 0x07	; 7
 f2c:	40 5d       	subi	r20, 0xD0	; 208
 f2e:	41 93       	st	Z+, r20
 f30:	b3 e0       	ldi	r27, 0x03	; 3
 f32:	0f d0       	rcall	.+30     	; 0xf52 <__ultoa_invert+0x86>
 f34:	c9 f7       	brne	.-14     	; 0xf28 <__ultoa_invert+0x5c>
 f36:	f6 cf       	rjmp	.-20     	; 0xf24 <__ultoa_invert+0x58>
 f38:	46 2f       	mov	r20, r22
 f3a:	4f 70       	andi	r20, 0x0F	; 15
 f3c:	40 5d       	subi	r20, 0xD0	; 208
 f3e:	4a 33       	cpi	r20, 0x3A	; 58
 f40:	18 f0       	brcs	.+6      	; 0xf48 <__ultoa_invert+0x7c>
 f42:	49 5d       	subi	r20, 0xD9	; 217
 f44:	31 fd       	sbrc	r19, 1
 f46:	40 52       	subi	r20, 0x20	; 32
 f48:	41 93       	st	Z+, r20
 f4a:	02 d0       	rcall	.+4      	; 0xf50 <__ultoa_invert+0x84>
 f4c:	a9 f7       	brne	.-22     	; 0xf38 <__ultoa_invert+0x6c>
 f4e:	ea cf       	rjmp	.-44     	; 0xf24 <__ultoa_invert+0x58>
 f50:	b4 e0       	ldi	r27, 0x04	; 4
 f52:	a6 95       	lsr	r26
 f54:	97 95       	ror	r25
 f56:	87 95       	ror	r24
 f58:	77 95       	ror	r23
 f5a:	67 95       	ror	r22
 f5c:	ba 95       	dec	r27
 f5e:	c9 f7       	brne	.-14     	; 0xf52 <__ultoa_invert+0x86>
 f60:	00 97       	sbiw	r24, 0x00	; 0
 f62:	61 05       	cpc	r22, r1
 f64:	71 05       	cpc	r23, r1
 f66:	08 95       	ret
 f68:	9b 01       	movw	r18, r22
 f6a:	ac 01       	movw	r20, r24
 f6c:	0a 2e       	mov	r0, r26
 f6e:	06 94       	lsr	r0
 f70:	57 95       	ror	r21
 f72:	47 95       	ror	r20
 f74:	37 95       	ror	r19
 f76:	27 95       	ror	r18
 f78:	ba 95       	dec	r27
 f7a:	c9 f7       	brne	.-14     	; 0xf6e <__ultoa_invert+0xa2>
 f7c:	62 0f       	add	r22, r18
 f7e:	73 1f       	adc	r23, r19
 f80:	84 1f       	adc	r24, r20
 f82:	95 1f       	adc	r25, r21
 f84:	a0 1d       	adc	r26, r0
 f86:	08 95       	ret

00000f88 <__prologue_saves__>:
 f88:	2f 92       	push	r2
 f8a:	3f 92       	push	r3
 f8c:	4f 92       	push	r4
 f8e:	5f 92       	push	r5
 f90:	6f 92       	push	r6
 f92:	7f 92       	push	r7
 f94:	8f 92       	push	r8
 f96:	9f 92       	push	r9
 f98:	af 92       	push	r10
 f9a:	bf 92       	push	r11
 f9c:	cf 92       	push	r12
 f9e:	df 92       	push	r13
 fa0:	ef 92       	push	r14
 fa2:	ff 92       	push	r15
 fa4:	0f 93       	push	r16
 fa6:	1f 93       	push	r17
 fa8:	cf 93       	push	r28
 faa:	df 93       	push	r29
 fac:	cd b7       	in	r28, 0x3d	; 61
 fae:	de b7       	in	r29, 0x3e	; 62
 fb0:	ca 1b       	sub	r28, r26
 fb2:	db 0b       	sbc	r29, r27
 fb4:	0f b6       	in	r0, 0x3f	; 63
 fb6:	f8 94       	cli
 fb8:	de bf       	out	0x3e, r29	; 62
 fba:	0f be       	out	0x3f, r0	; 63
 fbc:	cd bf       	out	0x3d, r28	; 61
 fbe:	09 94       	ijmp

00000fc0 <__epilogue_restores__>:
 fc0:	2a 88       	ldd	r2, Y+18	; 0x12
 fc2:	39 88       	ldd	r3, Y+17	; 0x11
 fc4:	48 88       	ldd	r4, Y+16	; 0x10
 fc6:	5f 84       	ldd	r5, Y+15	; 0x0f
 fc8:	6e 84       	ldd	r6, Y+14	; 0x0e
 fca:	7d 84       	ldd	r7, Y+13	; 0x0d
 fcc:	8c 84       	ldd	r8, Y+12	; 0x0c
 fce:	9b 84       	ldd	r9, Y+11	; 0x0b
 fd0:	aa 84       	ldd	r10, Y+10	; 0x0a
 fd2:	b9 84       	ldd	r11, Y+9	; 0x09
 fd4:	c8 84       	ldd	r12, Y+8	; 0x08
 fd6:	df 80       	ldd	r13, Y+7	; 0x07
 fd8:	ee 80       	ldd	r14, Y+6	; 0x06
 fda:	fd 80       	ldd	r15, Y+5	; 0x05
 fdc:	0c 81       	ldd	r16, Y+4	; 0x04
 fde:	1b 81       	ldd	r17, Y+3	; 0x03
 fe0:	aa 81       	ldd	r26, Y+2	; 0x02
 fe2:	b9 81       	ldd	r27, Y+1	; 0x01
 fe4:	ce 0f       	add	r28, r30
 fe6:	d1 1d       	adc	r29, r1
 fe8:	0f b6       	in	r0, 0x3f	; 63
 fea:	f8 94       	cli
 fec:	de bf       	out	0x3e, r29	; 62
 fee:	0f be       	out	0x3f, r0	; 63
 ff0:	cd bf       	out	0x3d, r28	; 61
 ff2:	ed 01       	movw	r28, r26
 ff4:	08 95       	ret

00000ff6 <_exit>:
 ff6:	f8 94       	cli

00000ff8 <__stop_program>:
 ff8:	ff cf       	rjmp	.-2      	; 0xff8 <__stop_program>
