
ExtINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000013e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000891  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000047  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000e2  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ad  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000139  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000099  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000ca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:
#include <avr/interrupt.h>
unsigned char count = 0; //// declared a global variable count = 0 

init()  //// init function for initializing intrrupts and ports
{
  sei();
  7c:	78 94       	sei
    
    DDRB= 0x01; ///// a 1 on the bit zero of the register B
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	87 bb       	out	0x17, r24	; 23
	PORTB=0x01; ////  set the out put on the portB LED Off
  82:	88 bb       	out	0x18, r24	; 24
    GICR |=(1<<INT0); /// register containing the INT0
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 64       	ori	r24, 0x40	; 64
  88:	8b bf       	out	0x3b, r24	; 59
	MCUCR |=(1<<ISC01); 
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	85 bf       	out	0x35, r24	; 53

}
  90:	08 95       	ret

00000092 <blink>:

 void blink()  /// blink method for blinking the LED
 {
   if (count=(0x50)) 
  92:	80 e5       	ldi	r24, 0x50	; 80
  94:	80 93 60 00 	sts	0x0060, r24
   {
    PORTB ^=0x00;
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	88 bb       	out	0x18, r24	; 24

   }
   
 }
  9c:	08 95       	ret

0000009e <__vector_1>:
 ISR(INT0_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
 //PORTB ^= 0x00;
 count++ ;
  aa:	80 91 60 00 	lds	r24, 0x0060
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	80 93 60 00 	sts	0x0060, r24
}
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:

int main(void)
{
   
    init();
  c0:	0e 94 3e 00 	call	0x7c	; 0x7c <init>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x4>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
