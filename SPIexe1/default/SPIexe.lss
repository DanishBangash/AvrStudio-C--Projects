
SPIexe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000af2  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800076  00800076  00000b9c  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000026e  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000126b  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000850  00000000  00000000  00002f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000124a  00000000  00000000  000037bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d0  00000000  00000000  00004a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003e7  00000000  00000000  00004bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a06  00000000  00000000  00004fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000152  00000000  00000000  000059c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  00005b1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3b       	cpi	r26, 0xB6	; 182
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  8a:	0c 94 77 05 	jmp	0xaee	; 0xaee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
	volatile int i=0; 
	volatile int j=0;
	volatile int ii=0;
	void init ()
	{   
	    DDRB |= 0x01; ///// a 1 on the bit zero of the register B
  92:	b8 9a       	sbi	0x17, 0	; 23
		PORTB|=0x01; ////  set the out put on the portB LED Off
  94:	c0 9a       	sbi	0x18, 0	; 24
	    GICR |=(1<<INT0)|(1<<INT1); /// register containing the INT0
  96:	8b b7       	in	r24, 0x3b	; 59
  98:	80 6c       	ori	r24, 0xC0	; 192
  9a:	8b bf       	out	0x3b, r24	; 59
		MCUCR |=(1<<ISC01)|(1<<ISC00)|(1<<ISC10); //risin edge
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	87 60       	ori	r24, 0x07	; 7
  a0:	85 bf       	out	0x35, r24	; 53
	DDRB |= 0x00; // bit 0 for output
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0x00; /// LED is Off
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	88 bb       	out	0x18, r24	; 24
//	PORTD |=(1<<PD3)|(1<<PD2);
    TCCR0 |= (1<<CS01); // timer 0 normal mode 8 prescaler
  aa:	83 b7       	in	r24, 0x33	; 51
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	83 bf       	out	0x33, r24	; 51
	sei();
  b0:	78 94       	sei
	}
  b2:	08 95       	ret

000000b4 <init_uart>:

	void init_uart(int baudrate)
	{
	UCSRB |=(1<<RXEN) | (1<<TXEN)|(1<<RXCIE);
  b4:	2a b1       	in	r18, 0x0a	; 10
  b6:	28 69       	ori	r18, 0x98	; 152
  b8:	2a b9       	out	0x0a, r18	; 10
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8 data bits and 1 stop bit 
  ba:	20 b5       	in	r18, 0x20	; 32
  bc:	26 68       	ori	r18, 0x86	; 134
  be:	20 bd       	out	0x20, r18	; 32
	UCSRA |= (1<<U2X); // full duplex
  c0:	59 9a       	sbi	0x0b, 1	; 11

	UBRRH = (char) ( baudrate>>8); // move the upper byte in the integer for fit 8 bits in 16 bits 
  c2:	29 2f       	mov	r18, r25
  c4:	33 27       	eor	r19, r19
  c6:	27 fd       	sbrc	r18, 7
  c8:	3a 95       	dec	r19
  ca:	20 bd       	out	0x20, r18	; 32
	UBRRL=(char) baudrate;
  cc:	89 b9       	out	0x09, r24	; 9

	}
  ce:	08 95       	ret

000000d0 <uart_transmit>:
	 void uart_transmit(char cdata)
	{
	 while(!(UCSRA & (1<<UDRE)));     ///wrong ==0 only please read the manual careful.p. 154
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <uart_transmit>
	 UDR=cdata;
  d4:	8c b9       	out	0x0c, r24	; 12
	 
	}
  d6:	08 95       	ret

000000d8 <uart_recieve>:
	unsigned char uart_recieve(void)
	{
	while (!(UCSRA &(1<<RXC)));
  d8:	5f 9b       	sbis	0x0b, 7	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <uart_recieve>
	spi_flag = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 78 00 	sts	0x0078, r24
	return UDR;
  e2:	8c b1       	in	r24, 0x0c	; 12
	
	}
  e4:	08 95       	ret

000000e6 <PutString>:
		void PutString(char *str) {
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	e8 2e       	mov	r14, r24
  f0:	e7 01       	movw	r28, r14
  f2:	7e 01       	movw	r14, r28
  f4:	f9 2e       	mov	r15, r25
  f6:	e7 01       	movw	r28, r14
   char c;
   for (; (c = *str) != 0; str++)
  f8:	02 c0       	rjmp	.+4      	; 0xfe <PutString+0x18>
    uart_transmit(c); //transmit char handles the individual character
  fa:	0e 94 68 00 	call	0xd0	; 0xd0 <uart_transmit>
	return UDR;
	
	}
		void PutString(char *str) {
   char c;
   for (; (c = *str) != 0; str++)
  fe:	89 91       	ld	r24, Y+
 100:	88 23       	and	r24, r24
 102:	d9 f7       	brne	.-10     	; 0xfa <PutString+0x14>
    uart_transmit(c); //transmit char handles the individual character
	}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	ff 90       	pop	r15
 10a:	ef 90       	pop	r14
 10c:	08 95       	ret

0000010e <main>:
	 int main()
	 {
	key_init();
 10e:	0e 94 17 02 	call	0x42e	; 0x42e <key_init>
	  init();
 112:	0e 94 49 00 	call	0x92	; 0x92 <init>
  		lcd_init();
 116:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_init>
	  init_uart( 0x40);
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_uart>
		  while (1)
		  {
		    if (spi_data_ready==1){
 122:	80 91 77 00 	lds	r24, 0x0077
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x14>
			//uart_transmit(0xF5);
			
			uart_recieve();
 12a:	0e 94 6c 00 	call	0xd8	; 0xd8 <uart_recieve>
			spi_data_ready=0;
 12e:	10 92 77 00 	sts	0x0077, r1
 132:	f7 cf       	rjmp	.-18     	; 0x122 <main+0x14>

00000134 <__vector_13>:
				
		  }
		}
		}
	 ISR(USART_RXC_vect)
	 {  
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	 	data=UDR;
 156:	2c b1       	in	r18, 0x0c	; 12
 158:	20 93 76 00 	sts	0x0076, r18
		buffer[i]=data;
 15c:	e0 91 79 00 	lds	r30, 0x0079
 160:	f0 91 7a 00 	lds	r31, 0x007A
 164:	eb 57       	subi	r30, 0x7B	; 123
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	20 83       	st	Z, r18
	// spi_data_ready=1;
	// i++;
	if((j<max)){//&&(data!=0x86)
 16a:	80 91 7b 00 	lds	r24, 0x007B
 16e:	90 91 7c 00 	lds	r25, 0x007C
 172:	8e 30       	cpi	r24, 0x0E	; 14
 174:	91 05       	cpc	r25, r1
 176:	0c f0       	brlt	.+2      	; 0x17a <__vector_13+0x46>
 178:	47 c0       	rjmp	.+142    	; 0x208 <__vector_13+0xd4>
	 sprintf(Hexbuffer, "%02X", data);
 17a:	00 d0       	rcall	.+0      	; 0x17c <__vector_13+0x48>
 17c:	00 d0       	rcall	.+0      	; 0x17e <__vector_13+0x4a>
 17e:	00 d0       	rcall	.+0      	; 0x180 <__vector_13+0x4c>
 180:	ed b7       	in	r30, 0x3d	; 61
 182:	fe b7       	in	r31, 0x3e	; 62
 184:	31 96       	adiw	r30, 0x01	; 1
 186:	83 e8       	ldi	r24, 0x83	; 131
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	ad b7       	in	r26, 0x3d	; 61
 18c:	be b7       	in	r27, 0x3e	; 62
 18e:	12 96       	adiw	r26, 0x02	; 2
 190:	9c 93       	st	X, r25
 192:	8e 93       	st	-X, r24
 194:	11 97       	sbiw	r26, 0x01	; 1
 196:	80 e6       	ldi	r24, 0x60	; 96
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	93 83       	std	Z+3, r25	; 0x03
 19c:	82 83       	std	Z+2, r24	; 0x02
 19e:	24 83       	std	Z+4, r18	; 0x04
 1a0:	15 82       	std	Z+5, r1	; 0x05
 1a2:	0e 94 96 02 	call	0x52c	; 0x52c <sprintf>
		buffer[i]=Hexbuffer[1];
 1a6:	e0 91 79 00 	lds	r30, 0x0079
 1aa:	f0 91 7a 00 	lds	r31, 0x007A
 1ae:	eb 57       	subi	r30, 0x7B	; 123
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	80 91 84 00 	lds	r24, 0x0084
 1b6:	80 83       	st	Z, r24
		i--;
 1b8:	80 91 79 00 	lds	r24, 0x0079
 1bc:	90 91 7a 00 	lds	r25, 0x007A
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	90 93 7a 00 	sts	0x007A, r25
 1c6:	80 93 79 00 	sts	0x0079, r24
	
		buffer[i]=Hexbuffer[0];
 1ca:	e0 91 79 00 	lds	r30, 0x0079
 1ce:	f0 91 7a 00 	lds	r31, 0x007A
 1d2:	eb 57       	subi	r30, 0x7B	; 123
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	80 91 83 00 	lds	r24, 0x0083
 1da:	80 83       	st	Z, r24
		ii=0;
 1dc:	10 92 7e 00 	sts	0x007E, r1
 1e0:	10 92 7d 00 	sts	0x007D, r1
		i--;
 1e4:	80 91 79 00 	lds	r24, 0x0079
 1e8:	90 91 7a 00 	lds	r25, 0x007A
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	90 93 7a 00 	sts	0x007A, r25
 1f2:	80 93 79 00 	sts	0x0079, r24
		 PORTB &=0xFE;
 1f6:	c0 98       	cbi	0x18, 0	; 24
 1f8:	8d b7       	in	r24, 0x3d	; 61
 1fa:	9e b7       	in	r25, 0x3e	; 62
 1fc:	06 96       	adiw	r24, 0x06	; 6
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	9e bf       	out	0x3e, r25	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	8d bf       	out	0x3d, r24	; 61
		}
	 if (i==max-7) {
 208:	80 91 79 00 	lds	r24, 0x0079
 20c:	90 91 7a 00 	lds	r25, 0x007A
 210:	87 30       	cpi	r24, 0x07	; 7
 212:	91 05       	cpc	r25, r1
 214:	51 f4       	brne	.+20     	; 0x22a <__vector_13+0xf6>
	 spi_data_ready=1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 77 00 	sts	0x0077, r24
	  //i=0;
	 i=max-1;
 21c:	8d e0       	ldi	r24, 0x0D	; 13
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 7a 00 	sts	0x007A, r25
 224:	80 93 79 00 	sts	0x0079, r24
 228:	09 c0       	rjmp	.+18     	; 0x23c <__vector_13+0x108>
	 }
	 else j++;			 
 22a:	80 91 7b 00 	lds	r24, 0x007B
 22e:	90 91 7c 00 	lds	r25, 0x007C
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 7c 00 	sts	0x007C, r25
 238:	80 93 7b 00 	sts	0x007B, r24
	 LCDPutString(buffer);
 23c:	85 e8       	ldi	r24, 0x85	; 133
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 cc 01 	call	0x398	; 0x398 <LCDPutString>
		  } 
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <lcd_nibble_transfer>:


void lcd_nibble_transfer( unsigned char d )  
 
   { 
     lcd_port|= (1<<lcd_E);
 266:	db 9a       	sbi	0x1b, 3	; 27
	 asm volatile("NOP");   // Slow down timing 100 nS
 268:	00 00       	nop
   	lcd_port= (lcd_port & 0x0f)| (d &0xf0);   //(always msn as 4 bit data bus)
 26a:	9b b3       	in	r25, 0x1b	; 27
 26c:	80 7f       	andi	r24, 0xF0	; 240
 26e:	9f 70       	andi	r25, 0x0F	; 15
 270:	89 2b       	or	r24, r25
 272:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	88 ec       	ldi	r24, 0xC8	; 200
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_nibble_transfer+0x10>
  
  	
 	 //lcd_wait(8);   // Slow down  58 us
_delay_us(60);
	lcd_port &= ~(1<<lcd_E);
 27a:	db 98       	cbi	0x1b, 3	; 27
 27c:	88 ec       	ldi	r24, 0xC8	; 200
 27e:	8a 95       	dec	r24
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_nibble_transfer+0x18>
//	lcd_wait(8);
_delay_us(60);
   } // end lcd_nibble_transfer()
 282:	08 95       	ret

00000284 <lcd_transfer>:
// Low level functions
// Write to the lcd data bus - generate E pulse 

void lcd_transfer (unsigned char d)

   {
 284:	1f 93       	push	r17
 286:	18 2f       	mov	r17, r24
	 lcd_port|= (1<<lcd_E);
 288:	db 9a       	sbi	0x1b, 3	; 27
	  asm volatile("NOP");  // Slow down timing 100 nS
 28a:	00 00       	nop
     asm volatile("NOP"); // Slow down timing 100 nS
 28c:	00 00       	nop
 lcd_nibble_transfer(d);   //(msn)
 28e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_nibble_transfer>
 
//	 asm volatile("NOP");   // Slow down timing 100 nS	 
	 	asm volatile("NOP");   // Slow down timing 100 nS
 292:	00 00       	nop
		lcd_port |= (1<<lcd_E);
 294:	db 9a       	sbi	0x1b, 3	; 27

 lcd_nibble_transfer(d<<4);   //lsn);
 296:	81 2f       	mov	r24, r17
 298:	82 95       	swap	r24
 29a:	80 7f       	andi	r24, 0xF0	; 240
 29c:	0e 94 33 01 	call	0x266	; 0x266 <lcd_nibble_transfer>
 
   } // end lcd_transfer()
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <lcd_data_write>:


void lcd_data_write(unsigned char d)

   {
   lcd_direction |= 0xfc;
 2a4:	9a b3       	in	r25, 0x1a	; 26
 2a6:	9c 6f       	ori	r25, 0xFC	; 252
 2a8:	9a bb       	out	0x1a, r25	; 26
   lcd_port|=(1<<lcd_RS);				//rs=1 when writing data
 2aa:	da 9a       	sbi	0x1b, 2	; 27
   
  // lcd_port &= ~(1<<lcd_RW);
    asm volatile("NOP");   // Slow down timing 100 nS
 2ac:	00 00       	nop
   	asm volatile("NOP");   // Slow down timing 100 nS
 2ae:	00 00       	nop

   lcd_transfer(d); 
 2b0:	0e 94 42 01 	call	0x284	; 0x284 <lcd_transfer>
   } // end lcd_data_write()
 2b4:	08 95       	ret

000002b6 <lcd_cmd_write>:
// Medium level functions 
// Select RS / RW mode and call lower level funtion to complete the transfer

void lcd_cmd_write(unsigned char cmd)
   { 
    lcd_direction |= 0xfc;
 2b6:	9a b3       	in	r25, 0x1a	; 26
 2b8:	9c 6f       	ori	r25, 0xFC	; 252
 2ba:	9a bb       	out	0x1a, r25	; 26
     //lcd_RS=0;
  lcd_port &= ~(1<<lcd_RS);
 2bc:	da 98       	cbi	0x1b, 2	; 27
 
  // lcd_port &= ~(1<<lcd_RW);
  asm volatile("NOP");  // Slow down timing 100 nS
 2be:	00 00       	nop
   asm volatile("NOP");   // Slow down timing 100 nS
 2c0:	00 00       	nop
   lcd_transfer(cmd);
 2c2:	0e 94 42 01 	call	0x284	; 0x284 <lcd_transfer>
   } // end lcd_cmd_write()
 2c6:	08 95       	ret

000002c8 <lcd_init>:
void lcd_init()    // Works like a constructor
   
   {

   // Power on delay
	lcd_direction |= 0xfc;							//	set port a as output
 2c8:	8a b3       	in	r24, 0x1a	; 26
 2ca:	8c 6f       	ori	r24, 0xFC	; 252
 2cc:	8a bb       	out	0x1a, r24	; 26
   lcd_wait( 20000 );                                   // Power on wait 
   lcd_wait( 20000 );
	lcd_port &= ~((1<<lcd_E) | (1<<lcd_RS)); // EN=0, RS=0
 2ce:	8b b3       	in	r24, 0x1b	; 27
 2d0:	83 7f       	andi	r24, 0xF3	; 243
 2d2:	8b bb       	out	0x1b, r24	; 27
//	lcd_port &= ~(1<<lcd_RW);               // Set RW = 0 in case it is connected
 
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 2d4:	80 e3       	ldi	r24, 0x30	; 48
 2d6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_nibble_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	8f e5       	ldi	r24, 0x5F	; 95
 2dc:	9a ee       	ldi	r25, 0xEA	; 234
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <lcd_init+0x16>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <lcd_init+0x1c>
 2e4:	00 00       	nop
   //lcd_wait(longdelay );  						 // wait 24 ms
   _delay_ms(24);
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	0e 94 33 01 	call	0x266	; 0x266 <lcd_nibble_transfer>
 2ec:	8f e5       	ldi	r24, 0x5F	; 95
 2ee:	9a ee       	ldi	r25, 0xEA	; 234
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_init+0x28>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <lcd_init+0x2e>
 2f6:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	0e 94 33 01 	call	0x266	; 0x266 <lcd_nibble_transfer>
 2fe:	8f e5       	ldi	r24, 0x5F	; 95
 300:	9a ee       	ldi	r25, 0xEA	; 234
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <lcd_init+0x3a>
 306:	00 c0       	rjmp	.+0      	; 0x308 <lcd_init+0x40>
 308:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION);
 30a:	80 e2       	ldi	r24, 0x20	; 32
 30c:	0e 94 33 01 	call	0x266	; 0x266 <lcd_nibble_transfer>
 310:	8f e5       	ldi	r24, 0x5F	; 95
 312:	9a ee       	ldi	r25, 0xEA	; 234
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <lcd_init+0x4c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <lcd_init+0x52>
 31a:	00 00       	nop
  // lcd_wait(longdelay);
   _delay_ms(24);
   lcd_cmd_write(SET_FUNCTION+LN2_BIT);                 // Function set: 0x28  2 lines
 31c:	88 e2       	ldi	r24, 0x28	; 40
 31e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
 322:	87 e8       	ldi	r24, 0x87	; 135
 324:	93 e1       	ldi	r25, 0x13	; 19
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <lcd_init+0x5e>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_init+0x64>
 32c:	00 00       	nop
  // lcd_wait(WAIT_15m);                              // Wait 39 uS
 _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY);						//display off
 32e:	88 e0       	ldi	r24, 0x08	; 8
 330:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
 334:	87 e8       	ldi	r24, 0x87	; 135
 336:	93 e1       	ldi	r25, 0x13	; 19
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_init+0x70>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_init+0x76>
 33e:	00 00       	nop
 //lcd_wait(WAIT_15m);
_delay_ms(2);	
	lcd_cmd_write(CLR_DISPLAY);       // Display clear: 0x01 clear data                 	 
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
 346:	87 e8       	ldi	r24, 0x87	; 135
 348:	93 e1       	ldi	r25, 0x13	; 19
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <lcd_init+0x82>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <lcd_init+0x88>
 350:	00 00       	nop
	
  // lcd_wait(WAIT_15m);                // 1.53 mS  
     _delay_ms(2);                  
                               

   lcd_cmd_write(SET_ENTRY_MODE+INC_BIT);          //  +INC_BIT  // Entry mode set: shift cursor 1 position to right
 352:	86 e0       	ldi	r24, 0x06	; 6
 354:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
 358:	87 e8       	ldi	r24, 0x87	; 135
 35a:	93 e1       	ldi	r25, 0x13	; 19
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init+0x94>
 360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_init+0x9a>
 362:	00 00       	nop
  //   lcd_wait(WAIT_15m);      
  _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY+ON_BIT+CUR_BIT+BLK_BIT); //+CUR_BIT+BLK_BIT);   Display ON/OFF control: 0x0f
 364:	8f e0       	ldi	r24, 0x0F	; 15
 366:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
 36a:	87 e8       	ldi	r24, 0x87	; 135
 36c:	93 e1       	ldi	r25, 0x13	; 19
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <lcd_init+0xa6>
 372:	00 c0       	rjmp	.+0      	; 0x374 <lcd_init+0xac>
 374:	00 00       	nop
  //   lcd_wait(WAIT_15m);                               // Wait 39 uS                      // 1.53 mS     
_delay_ms(2);	
	lcd_cmd_write(RTN_HOME);
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
 37c:	87 e8       	ldi	r24, 0x87	; 135
 37e:	93 e1       	ldi	r25, 0x13	; 19
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init+0xb8>
 384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_init+0xbe>
 386:	00 00       	nop
  //lcd_wait(WAIT_15m);                            // 1.53 mS  
_delay_ms(2);
  
   } // end lcd_init()
 388:	08 95       	ret

0000038a <lcdClear>:


//clear the display
void lcdClear(void) {

lcd_cmd_write(CLR_DISPLAY);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
//lcd_wait(WAIT_15m);
lcd_cmd_write(CLR_DISPLAY+RTN_HOME);
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
//lcd_wait(WAIT_15m);


}
 396:	08 95       	ret

00000398 <LCDPutString>:




//! write a zero-terminated ASCII string to the display
void LCDPutString(char *str) {
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	e8 2e       	mov	r14, r24
 3a2:	e7 01       	movw	r28, r14
 3a4:	7e 01       	movw	r14, r28
 3a6:	f9 2e       	mov	r15, r25
 3a8:	e7 01       	movw	r28, r14
   char c;
for (; (c = *str) != 0; str++) 
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <LCDPutString+0x18>
lcd_data_write(c);  
 3ac:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_data_write>


//! write a zero-terminated ASCII string to the display
void LCDPutString(char *str) {
   char c;
for (; (c = *str) != 0; str++) 
 3b0:	89 91       	ld	r24, Y+
 3b2:	88 23       	and	r24, r24
 3b4:	d9 f7       	brne	.-10     	; 0x3ac <LCDPutString+0x14>
lcd_data_write(c);  
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	08 95       	ret

000003c0 <lcd_wait>:
   for ( i = 0 ; i < count ; i++ );    //4 cycles per count
    // end lcd_wait()

  

   } // end lcd_transfer()
 3c0:	08 95       	ret

000003c2 <GoTo>:

//goto x-position and y-line called by parameters x, y used in main() and internally LCDPutChar()

void GoTo(unsigned char x, unsigned char y){

switch (y) {
 3c2:	61 30       	cpi	r22, 0x01	; 1
 3c4:	49 f0       	breq	.+18     	; 0x3d8 <GoTo+0x16>
 3c6:	61 30       	cpi	r22, 0x01	; 1
 3c8:	28 f0       	brcs	.+10     	; 0x3d4 <GoTo+0x12>
 3ca:	62 30       	cpi	r22, 0x02	; 2
 3cc:	39 f0       	breq	.+14     	; 0x3dc <GoTo+0x1a>
 3ce:	63 30       	cpi	r22, 0x03	; 3
 3d0:	61 f4       	brne	.+24     	; 0x3ea <GoTo+0x28>
 3d2:	08 c0       	rjmp	.+16     	; 0x3e4 <GoTo+0x22>
case 0: 

 lcd_cmd_write(SET_DRAM_ADDR+x);
 3d4:	80 58       	subi	r24, 0x80	; 128
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
 break;

 case 1: 

lcd_cmd_write(SET_DRAM_ADDR+line_1+x);
 3d8:	80 54       	subi	r24, 0x40	; 64
 3da:	01 c0       	rjmp	.+2      	; 0x3de <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
break;

case 2:
lcd_cmd_write(SET_DRAM_ADDR+line_2+x);
 3dc:	8c 56       	subi	r24, 0x6C	; 108
 3de:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
 3e2:	08 95       	ret
 lcd_wait(WAIT_15m);  
break;

case 3:
lcd_cmd_write(SET_DRAM_ADDR+line_3+x);
 3e4:	8c 52       	subi	r24, 0x2C	; 44
 3e6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_cmd_write>
 3ea:	08 95       	ret

000003ec <clearLine>:
//lcd_wait(WAIT_15m);


}

void clearLine(unsigned char x, unsigned char y){
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	18 2f       	mov	r17, r24
 3f6:	06 2f       	mov	r16, r22

unsigned char max_x=20;

GoTo(x,y);
 3f8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <GoTo>
for (int i=x; i<max_x; i++)
 3fc:	c1 2f       	mov	r28, r17
 3fe:	d0 e0       	ldi	r29, 0x00	; 0
 400:	0a c0       	rjmp	.+20     	; 0x416 <clearLine+0x2a>
{
lcd_data_write(0x20);
 402:	80 e2       	ldi	r24, 0x20	; 32
 404:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_data_write>
 408:	83 ec       	ldi	r24, 0xC3	; 195
 40a:	99 e0       	ldi	r25, 0x09	; 9
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <clearLine+0x20>
 410:	00 c0       	rjmp	.+0      	; 0x412 <clearLine+0x26>
 412:	00 00       	nop
void clearLine(unsigned char x, unsigned char y){

unsigned char max_x=20;

GoTo(x,y);
for (int i=x; i<max_x; i++)
 414:	21 96       	adiw	r28, 0x01	; 1
 416:	c4 31       	cpi	r28, 0x14	; 20
 418:	d1 05       	cpc	r29, r1
 41a:	9c f3       	brlt	.-26     	; 0x402 <clearLine+0x16>
{
lcd_data_write(0x20);
_delay_ms(1);
}
GoTo(x,y);
 41c:	81 2f       	mov	r24, r17
 41e:	60 2f       	mov	r22, r16
 420:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <GoTo>
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <key_init>:
							  {'7','8','9','D'},
							  {'A','0','B','C'} };

void key_init ()
{
  key_DDRA  |= 0x03;
 42e:	8a b3       	in	r24, 0x1a	; 26
 430:	83 60       	ori	r24, 0x03	; 3
 432:	8a bb       	out	0x1a, r24	; 26
  key_DDRC  &= 0x3F;
 434:	84 b3       	in	r24, 0x14	; 20
 436:	8f 73       	andi	r24, 0x3F	; 63
 438:	84 bb       	out	0x14, r24	; 20
   lcd_init();
 43a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_init>
}
 43e:	08 95       	ret

00000440 <key_look>:
{

unsigned char column;
unsigned char lastkey;
unsigned char keyit;
			 	lastkey=(key_PINC & 0xC0);
 440:	93 b3       	in	r25, 0x13	; 19
 442:	af e4       	ldi	r26, 0x4F	; 79
 444:	b3 ec       	ldi	r27, 0xC3	; 195
 446:	11 97       	sbiw	r26, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <key_look+0x6>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <key_look+0xc>
 44c:	00 00       	nop
				_delay_ms(20);
				column=(key_PINC & 0xC0);
 44e:	83 b3       	in	r24, 0x13	; 19
 450:	80 7c       	andi	r24, 0xC0	; 192
{

unsigned char column;
unsigned char lastkey;
unsigned char keyit;
			 	lastkey=(key_PINC & 0xC0);
 452:	90 7c       	andi	r25, 0xC0	; 192
				_delay_ms(20);
				column=(key_PINC & 0xC0);
if(column==lastkey)
 454:	89 17       	cp	r24, r25
 456:	e1 f5       	brne	.+120    	; 0x4d0 <key_look+0x90>
{
 	switch(column)
 458:	80 34       	cpi	r24, 0x40	; 64
 45a:	79 f0       	breq	.+30     	; 0x47a <key_look+0x3a>
 45c:	80 38       	cpi	r24, 0x80	; 128
 45e:	c1 f0       	breq	.+48     	; 0x490 <key_look+0x50>
 460:	e0 91 b5 00 	lds	r30, 0x00B5
 464:	88 23       	and	r24, r24
 466:	f9 f4       	brne	.+62     	; 0x4a6 <key_look+0x66>
	{
		case 0x00:keyit= keytab[row][3];break;
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	ea 59       	subi	r30, 0x9A	; 154
 474:	ff 4f       	sbci	r31, 0xFF	; 255
 476:	83 81       	ldd	r24, Z+3	; 0x03
 478:	1e c0       	rjmp	.+60     	; 0x4b6 <key_look+0x76>
		case 0x40:keyit= keytab[row][2];break;
 47a:	e0 91 b5 00 	lds	r30, 0x00B5
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	ee 0f       	add	r30, r30
 482:	ff 1f       	adc	r31, r31
 484:	ee 0f       	add	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	ea 59       	subi	r30, 0x9A	; 154
 48a:	ff 4f       	sbci	r31, 0xFF	; 255
 48c:	82 81       	ldd	r24, Z+2	; 0x02
 48e:	13 c0       	rjmp	.+38     	; 0x4b6 <key_look+0x76>
		case 0x80:keyit= keytab[row][1];break;
 490:	e0 91 b5 00 	lds	r30, 0x00B5
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	ea 59       	subi	r30, 0x9A	; 154
 4a0:	ff 4f       	sbci	r31, 0xFF	; 255
 4a2:	81 81       	ldd	r24, Z+1	; 0x01
 4a4:	08 c0       	rjmp	.+16     	; 0x4b6 <key_look+0x76>
		default  :keyit= keytab[row][0];break; 
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	ee 0f       	add	r30, r30
 4aa:	ff 1f       	adc	r31, r31
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	ea 59       	subi	r30, 0x9A	; 154
 4b2:	ff 4f       	sbci	r31, 0xFF	; 255
 4b4:	80 81       	ld	r24, Z
	}
	while (key_PINB & (1<<key_active));
 4b6:	b2 99       	sbic	0x16, 2	; 22
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <key_look+0x76>
	
	 lcd_data_write(keyit);
 4ba:	0e 94 52 01 	call	0x2a4	; 0x2a4 <lcd_data_write>
 4be:	8f e3       	ldi	r24, 0x3F	; 63
 4c0:	9d e0       	ldi	r25, 0x0D	; 13
 4c2:	a3 e0       	ldi	r26, 0x03	; 3
 4c4:	81 50       	subi	r24, 0x01	; 1
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	a0 40       	sbci	r26, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <key_look+0x84>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <key_look+0x8e>
 4ce:	00 00       	nop
 4d0:	08 95       	ret

000004d2 <key_read>:
   lcd_init();
}

void key_read()
{
int i= 0 ;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	90 e0       	ldi	r25, 0x00	; 0
while (!(key_PINB &(1<<key_active)))
{
	switch(i)
	{
	   case 0: key_PORTA &= 0xFC; 					 row=3; break;
	   case 1: key_PORTA &= 0xFC; key_PORTA |= 0x01; row=2; break;
 4d6:	52 e0       	ldi	r21, 0x02	; 2
	   case 2: key_PORTA &= 0xFC; key_PORTA |= 0x02; row=1; break;
 4d8:	41 e0       	ldi	r20, 0x01	; 1
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
{
	switch(i)
	{
	   case 0: key_PORTA &= 0xFC; 					 row=3; break;
 4da:	33 e0       	ldi	r19, 0x03	; 3
}

void key_read()
{
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
 4dc:	22 c0       	rjmp	.+68     	; 0x522 <key_read+0x50>
{
	switch(i)
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	91 05       	cpc	r25, r1
 4e2:	59 f0       	breq	.+22     	; 0x4fa <key_read+0x28>
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	91 05       	cpc	r25, r1
 4e8:	79 f0       	breq	.+30     	; 0x508 <key_read+0x36>
 4ea:	00 97       	sbiw	r24, 0x00	; 0
 4ec:	a1 f4       	brne	.+40     	; 0x516 <key_read+0x44>
	{
	   case 0: key_PORTA &= 0xFC; 					 row=3; break;
 4ee:	2b b3       	in	r18, 0x1b	; 27
 4f0:	2c 7f       	andi	r18, 0xFC	; 252
 4f2:	2b bb       	out	0x1b, r18	; 27
 4f4:	30 93 b5 00 	sts	0x00B5, r19
 4f8:	13 c0       	rjmp	.+38     	; 0x520 <key_read+0x4e>
	   case 1: key_PORTA &= 0xFC; key_PORTA |= 0x01; row=2; break;
 4fa:	2b b3       	in	r18, 0x1b	; 27
 4fc:	2c 7f       	andi	r18, 0xFC	; 252
 4fe:	2b bb       	out	0x1b, r18	; 27
 500:	d8 9a       	sbi	0x1b, 0	; 27
 502:	50 93 b5 00 	sts	0x00B5, r21
 506:	0c c0       	rjmp	.+24     	; 0x520 <key_read+0x4e>
	   case 2: key_PORTA &= 0xFC; key_PORTA |= 0x02; row=1; break;
 508:	2b b3       	in	r18, 0x1b	; 27
 50a:	2c 7f       	andi	r18, 0xFC	; 252
 50c:	2b bb       	out	0x1b, r18	; 27
 50e:	d9 9a       	sbi	0x1b, 1	; 27
 510:	40 93 b5 00 	sts	0x00B5, r20
 514:	05 c0       	rjmp	.+10     	; 0x520 <key_read+0x4e>
	   default: 				  key_PORTA |= 0x03; row=0; break;
 516:	2b b3       	in	r18, 0x1b	; 27
 518:	23 60       	ori	r18, 0x03	; 3
 51a:	2b bb       	out	0x1b, r18	; 27
 51c:	10 92 b5 00 	sts	0x00B5, r1
	}
		i++;	
 520:	01 96       	adiw	r24, 0x01	; 1
}

void key_read()
{
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
 522:	b2 9b       	sbis	0x16, 2	; 22
 524:	dc cf       	rjmp	.-72     	; 0x4de <key_read+0xc>
	   case 2: key_PORTA &= 0xFC; key_PORTA |= 0x02; row=1; break;
	   default: 				  key_PORTA |= 0x03; row=0; break;
	}
		i++;	
	}
		key_look();	
 526:	0e 94 20 02 	call	0x440	; 0x440 <key_look>
	}
 52a:	08 95       	ret

0000052c <sprintf>:
 52c:	ae e0       	ldi	r26, 0x0E	; 14
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	ec e9       	ldi	r30, 0x9C	; 156
 532:	f2 e0       	ldi	r31, 0x02	; 2
 534:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__prologue_saves__+0x1c>
 538:	0d 89       	ldd	r16, Y+21	; 0x15
 53a:	1e 89       	ldd	r17, Y+22	; 0x16
 53c:	86 e0       	ldi	r24, 0x06	; 6
 53e:	8c 83       	std	Y+4, r24	; 0x04
 540:	1a 83       	std	Y+2, r17	; 0x02
 542:	09 83       	std	Y+1, r16	; 0x01
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	9f e7       	ldi	r25, 0x7F	; 127
 548:	9e 83       	std	Y+6, r25	; 0x06
 54a:	8d 83       	std	Y+5, r24	; 0x05
 54c:	9e 01       	movw	r18, r28
 54e:	27 5e       	subi	r18, 0xE7	; 231
 550:	3f 4f       	sbci	r19, 0xFF	; 255
 552:	ce 01       	movw	r24, r28
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	6f 89       	ldd	r22, Y+23	; 0x17
 558:	78 8d       	ldd	r23, Y+24	; 0x18
 55a:	a9 01       	movw	r20, r18
 55c:	0e 94 b9 02 	call	0x572	; 0x572 <vfprintf>
 560:	ef 81       	ldd	r30, Y+7	; 0x07
 562:	f8 85       	ldd	r31, Y+8	; 0x08
 564:	e0 0f       	add	r30, r16
 566:	f1 1f       	adc	r31, r17
 568:	10 82       	st	Z, r1
 56a:	2e 96       	adiw	r28, 0x0e	; 14
 56c:	e4 e0       	ldi	r30, 0x04	; 4
 56e:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__epilogue_restores__+0x1c>

00000572 <vfprintf>:
 572:	ac e0       	ldi	r26, 0x0C	; 12
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	ef eb       	ldi	r30, 0xBF	; 191
 578:	f2 e0       	ldi	r31, 0x02	; 2
 57a:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__prologue_saves__>
 57e:	6c 01       	movw	r12, r24
 580:	1b 01       	movw	r2, r22
 582:	8a 01       	movw	r16, r20
 584:	fc 01       	movw	r30, r24
 586:	17 82       	std	Z+7, r1	; 0x07
 588:	16 82       	std	Z+6, r1	; 0x06
 58a:	83 81       	ldd	r24, Z+3	; 0x03
 58c:	81 ff       	sbrs	r24, 1
 58e:	d1 c1       	rjmp	.+930    	; 0x932 <__stack+0xd3>
 590:	2e 01       	movw	r4, r28
 592:	08 94       	sec
 594:	41 1c       	adc	r4, r1
 596:	51 1c       	adc	r5, r1
 598:	f6 01       	movw	r30, r12
 59a:	93 81       	ldd	r25, Z+3	; 0x03
 59c:	f1 01       	movw	r30, r2
 59e:	93 fd       	sbrc	r25, 3
 5a0:	85 91       	lpm	r24, Z+
 5a2:	93 ff       	sbrs	r25, 3
 5a4:	81 91       	ld	r24, Z+
 5a6:	1f 01       	movw	r2, r30
 5a8:	88 23       	and	r24, r24
 5aa:	09 f4       	brne	.+2      	; 0x5ae <vfprintf+0x3c>
 5ac:	be c1       	rjmp	.+892    	; 0x92a <__stack+0xcb>
 5ae:	85 32       	cpi	r24, 0x25	; 37
 5b0:	39 f4       	brne	.+14     	; 0x5c0 <vfprintf+0x4e>
 5b2:	93 fd       	sbrc	r25, 3
 5b4:	85 91       	lpm	r24, Z+
 5b6:	93 ff       	sbrs	r25, 3
 5b8:	81 91       	ld	r24, Z+
 5ba:	1f 01       	movw	r2, r30
 5bc:	85 32       	cpi	r24, 0x25	; 37
 5be:	29 f4       	brne	.+10     	; 0x5ca <vfprintf+0x58>
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	b6 01       	movw	r22, r12
 5c4:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 5c8:	e7 cf       	rjmp	.-50     	; 0x598 <vfprintf+0x26>
 5ca:	ee 24       	eor	r14, r14
 5cc:	ff 24       	eor	r15, r15
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	20 32       	cpi	r18, 0x20	; 32
 5d2:	b0 f4       	brcc	.+44     	; 0x600 <vfprintf+0x8e>
 5d4:	8b 32       	cpi	r24, 0x2B	; 43
 5d6:	69 f0       	breq	.+26     	; 0x5f2 <vfprintf+0x80>
 5d8:	8c 32       	cpi	r24, 0x2C	; 44
 5da:	28 f4       	brcc	.+10     	; 0x5e6 <vfprintf+0x74>
 5dc:	80 32       	cpi	r24, 0x20	; 32
 5de:	51 f0       	breq	.+20     	; 0x5f4 <vfprintf+0x82>
 5e0:	83 32       	cpi	r24, 0x23	; 35
 5e2:	71 f4       	brne	.+28     	; 0x600 <vfprintf+0x8e>
 5e4:	0b c0       	rjmp	.+22     	; 0x5fc <vfprintf+0x8a>
 5e6:	8d 32       	cpi	r24, 0x2D	; 45
 5e8:	39 f0       	breq	.+14     	; 0x5f8 <vfprintf+0x86>
 5ea:	80 33       	cpi	r24, 0x30	; 48
 5ec:	49 f4       	brne	.+18     	; 0x600 <vfprintf+0x8e>
 5ee:	21 60       	ori	r18, 0x01	; 1
 5f0:	2c c0       	rjmp	.+88     	; 0x64a <vfprintf+0xd8>
 5f2:	22 60       	ori	r18, 0x02	; 2
 5f4:	24 60       	ori	r18, 0x04	; 4
 5f6:	29 c0       	rjmp	.+82     	; 0x64a <vfprintf+0xd8>
 5f8:	28 60       	ori	r18, 0x08	; 8
 5fa:	27 c0       	rjmp	.+78     	; 0x64a <vfprintf+0xd8>
 5fc:	20 61       	ori	r18, 0x10	; 16
 5fe:	25 c0       	rjmp	.+74     	; 0x64a <vfprintf+0xd8>
 600:	27 fd       	sbrc	r18, 7
 602:	2c c0       	rjmp	.+88     	; 0x65c <vfprintf+0xea>
 604:	38 2f       	mov	r19, r24
 606:	30 53       	subi	r19, 0x30	; 48
 608:	3a 30       	cpi	r19, 0x0A	; 10
 60a:	98 f4       	brcc	.+38     	; 0x632 <vfprintf+0xc0>
 60c:	26 ff       	sbrs	r18, 6
 60e:	08 c0       	rjmp	.+16     	; 0x620 <vfprintf+0xae>
 610:	8e 2d       	mov	r24, r14
 612:	88 0f       	add	r24, r24
 614:	e8 2e       	mov	r14, r24
 616:	ee 0c       	add	r14, r14
 618:	ee 0c       	add	r14, r14
 61a:	e8 0e       	add	r14, r24
 61c:	e3 0e       	add	r14, r19
 61e:	15 c0       	rjmp	.+42     	; 0x64a <vfprintf+0xd8>
 620:	8f 2d       	mov	r24, r15
 622:	88 0f       	add	r24, r24
 624:	f8 2e       	mov	r15, r24
 626:	ff 0c       	add	r15, r15
 628:	ff 0c       	add	r15, r15
 62a:	f8 0e       	add	r15, r24
 62c:	f3 0e       	add	r15, r19
 62e:	20 62       	ori	r18, 0x20	; 32
 630:	0c c0       	rjmp	.+24     	; 0x64a <vfprintf+0xd8>
 632:	8e 32       	cpi	r24, 0x2E	; 46
 634:	21 f4       	brne	.+8      	; 0x63e <vfprintf+0xcc>
 636:	26 fd       	sbrc	r18, 6
 638:	78 c1       	rjmp	.+752    	; 0x92a <__stack+0xcb>
 63a:	20 64       	ori	r18, 0x40	; 64
 63c:	06 c0       	rjmp	.+12     	; 0x64a <vfprintf+0xd8>
 63e:	8c 36       	cpi	r24, 0x6C	; 108
 640:	11 f4       	brne	.+4      	; 0x646 <vfprintf+0xd4>
 642:	20 68       	ori	r18, 0x80	; 128
 644:	02 c0       	rjmp	.+4      	; 0x64a <vfprintf+0xd8>
 646:	88 36       	cpi	r24, 0x68	; 104
 648:	49 f4       	brne	.+18     	; 0x65c <vfprintf+0xea>
 64a:	f1 01       	movw	r30, r2
 64c:	93 fd       	sbrc	r25, 3
 64e:	85 91       	lpm	r24, Z+
 650:	93 ff       	sbrs	r25, 3
 652:	81 91       	ld	r24, Z+
 654:	1f 01       	movw	r2, r30
 656:	88 23       	and	r24, r24
 658:	09 f0       	breq	.+2      	; 0x65c <vfprintf+0xea>
 65a:	ba cf       	rjmp	.-140    	; 0x5d0 <vfprintf+0x5e>
 65c:	98 2f       	mov	r25, r24
 65e:	95 54       	subi	r25, 0x45	; 69
 660:	93 30       	cpi	r25, 0x03	; 3
 662:	18 f0       	brcs	.+6      	; 0x66a <vfprintf+0xf8>
 664:	90 52       	subi	r25, 0x20	; 32
 666:	93 30       	cpi	r25, 0x03	; 3
 668:	28 f4       	brcc	.+10     	; 0x674 <vfprintf+0x102>
 66a:	0c 5f       	subi	r16, 0xFC	; 252
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	ff e3       	ldi	r31, 0x3F	; 63
 670:	f9 83       	std	Y+1, r31	; 0x01
 672:	0d c0       	rjmp	.+26     	; 0x68e <vfprintf+0x11c>
 674:	83 36       	cpi	r24, 0x63	; 99
 676:	31 f0       	breq	.+12     	; 0x684 <vfprintf+0x112>
 678:	83 37       	cpi	r24, 0x73	; 115
 67a:	71 f0       	breq	.+28     	; 0x698 <vfprintf+0x126>
 67c:	83 35       	cpi	r24, 0x53	; 83
 67e:	09 f0       	breq	.+2      	; 0x682 <vfprintf+0x110>
 680:	60 c0       	rjmp	.+192    	; 0x742 <vfprintf+0x1d0>
 682:	22 c0       	rjmp	.+68     	; 0x6c8 <vfprintf+0x156>
 684:	f8 01       	movw	r30, r16
 686:	80 81       	ld	r24, Z
 688:	89 83       	std	Y+1, r24	; 0x01
 68a:	0e 5f       	subi	r16, 0xFE	; 254
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	42 01       	movw	r8, r4
 690:	71 e0       	ldi	r23, 0x01	; 1
 692:	a7 2e       	mov	r10, r23
 694:	b1 2c       	mov	r11, r1
 696:	16 c0       	rjmp	.+44     	; 0x6c4 <vfprintf+0x152>
 698:	62 e0       	ldi	r22, 0x02	; 2
 69a:	66 2e       	mov	r6, r22
 69c:	71 2c       	mov	r7, r1
 69e:	60 0e       	add	r6, r16
 6a0:	71 1e       	adc	r7, r17
 6a2:	f8 01       	movw	r30, r16
 6a4:	80 80       	ld	r8, Z
 6a6:	91 80       	ldd	r9, Z+1	; 0x01
 6a8:	26 ff       	sbrs	r18, 6
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <vfprintf+0x140>
 6ac:	6e 2d       	mov	r22, r14
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <vfprintf+0x144>
 6b2:	6f ef       	ldi	r22, 0xFF	; 255
 6b4:	7f ef       	ldi	r23, 0xFF	; 255
 6b6:	c4 01       	movw	r24, r8
 6b8:	2c 87       	std	Y+12, r18	; 0x0c
 6ba:	0e 94 ab 04 	call	0x956	; 0x956 <strnlen>
 6be:	5c 01       	movw	r10, r24
 6c0:	83 01       	movw	r16, r6
 6c2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6c4:	2f 77       	andi	r18, 0x7F	; 127
 6c6:	17 c0       	rjmp	.+46     	; 0x6f6 <vfprintf+0x184>
 6c8:	52 e0       	ldi	r21, 0x02	; 2
 6ca:	65 2e       	mov	r6, r21
 6cc:	71 2c       	mov	r7, r1
 6ce:	60 0e       	add	r6, r16
 6d0:	71 1e       	adc	r7, r17
 6d2:	f8 01       	movw	r30, r16
 6d4:	80 80       	ld	r8, Z
 6d6:	91 80       	ldd	r9, Z+1	; 0x01
 6d8:	26 ff       	sbrs	r18, 6
 6da:	03 c0       	rjmp	.+6      	; 0x6e2 <vfprintf+0x170>
 6dc:	6e 2d       	mov	r22, r14
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <vfprintf+0x174>
 6e2:	6f ef       	ldi	r22, 0xFF	; 255
 6e4:	7f ef       	ldi	r23, 0xFF	; 255
 6e6:	c4 01       	movw	r24, r8
 6e8:	2c 87       	std	Y+12, r18	; 0x0c
 6ea:	0e 94 a0 04 	call	0x940	; 0x940 <strnlen_P>
 6ee:	5c 01       	movw	r10, r24
 6f0:	2c 85       	ldd	r18, Y+12	; 0x0c
 6f2:	20 68       	ori	r18, 0x80	; 128
 6f4:	83 01       	movw	r16, r6
 6f6:	23 fd       	sbrc	r18, 3
 6f8:	20 c0       	rjmp	.+64     	; 0x73a <vfprintf+0x1c8>
 6fa:	08 c0       	rjmp	.+16     	; 0x70c <vfprintf+0x19a>
 6fc:	80 e2       	ldi	r24, 0x20	; 32
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	b6 01       	movw	r22, r12
 702:	2c 87       	std	Y+12, r18	; 0x0c
 704:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 708:	fa 94       	dec	r15
 70a:	2c 85       	ldd	r18, Y+12	; 0x0c
 70c:	8f 2d       	mov	r24, r15
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	a8 16       	cp	r10, r24
 712:	b9 06       	cpc	r11, r25
 714:	98 f3       	brcs	.-26     	; 0x6fc <vfprintf+0x18a>
 716:	11 c0       	rjmp	.+34     	; 0x73a <vfprintf+0x1c8>
 718:	f4 01       	movw	r30, r8
 71a:	27 fd       	sbrc	r18, 7
 71c:	85 91       	lpm	r24, Z+
 71e:	27 ff       	sbrs	r18, 7
 720:	81 91       	ld	r24, Z+
 722:	4f 01       	movw	r8, r30
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	b6 01       	movw	r22, r12
 728:	2c 87       	std	Y+12, r18	; 0x0c
 72a:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 72e:	2c 85       	ldd	r18, Y+12	; 0x0c
 730:	f1 10       	cpse	r15, r1
 732:	fa 94       	dec	r15
 734:	08 94       	sec
 736:	a1 08       	sbc	r10, r1
 738:	b1 08       	sbc	r11, r1
 73a:	a1 14       	cp	r10, r1
 73c:	b1 04       	cpc	r11, r1
 73e:	61 f7       	brne	.-40     	; 0x718 <vfprintf+0x1a6>
 740:	f1 c0       	rjmp	.+482    	; 0x924 <__stack+0xc5>
 742:	84 36       	cpi	r24, 0x64	; 100
 744:	11 f0       	breq	.+4      	; 0x74a <vfprintf+0x1d8>
 746:	89 36       	cpi	r24, 0x69	; 105
 748:	49 f5       	brne	.+82     	; 0x79c <vfprintf+0x22a>
 74a:	27 ff       	sbrs	r18, 7
 74c:	08 c0       	rjmp	.+16     	; 0x75e <vfprintf+0x1ec>
 74e:	f8 01       	movw	r30, r16
 750:	60 81       	ld	r22, Z
 752:	71 81       	ldd	r23, Z+1	; 0x01
 754:	82 81       	ldd	r24, Z+2	; 0x02
 756:	93 81       	ldd	r25, Z+3	; 0x03
 758:	0c 5f       	subi	r16, 0xFC	; 252
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	09 c0       	rjmp	.+18     	; 0x770 <vfprintf+0x1fe>
 75e:	f8 01       	movw	r30, r16
 760:	60 81       	ld	r22, Z
 762:	71 81       	ldd	r23, Z+1	; 0x01
 764:	88 27       	eor	r24, r24
 766:	77 fd       	sbrc	r23, 7
 768:	80 95       	com	r24
 76a:	98 2f       	mov	r25, r24
 76c:	0e 5f       	subi	r16, 0xFE	; 254
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	4f e6       	ldi	r20, 0x6F	; 111
 772:	b4 2e       	mov	r11, r20
 774:	b2 22       	and	r11, r18
 776:	97 ff       	sbrs	r25, 7
 778:	09 c0       	rjmp	.+18     	; 0x78c <vfprintf+0x21a>
 77a:	90 95       	com	r25
 77c:	80 95       	com	r24
 77e:	70 95       	com	r23
 780:	61 95       	neg	r22
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	f0 e8       	ldi	r31, 0x80	; 128
 78a:	bf 2a       	or	r11, r31
 78c:	a2 01       	movw	r20, r4
 78e:	2a e0       	ldi	r18, 0x0A	; 10
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__ultoa_invert>
 796:	78 2e       	mov	r7, r24
 798:	74 18       	sub	r7, r4
 79a:	45 c0       	rjmp	.+138    	; 0x826 <vfprintf+0x2b4>
 79c:	85 37       	cpi	r24, 0x75	; 117
 79e:	31 f4       	brne	.+12     	; 0x7ac <vfprintf+0x23a>
 7a0:	3f ee       	ldi	r19, 0xEF	; 239
 7a2:	b3 2e       	mov	r11, r19
 7a4:	b2 22       	and	r11, r18
 7a6:	2a e0       	ldi	r18, 0x0A	; 10
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	25 c0       	rjmp	.+74     	; 0x7f6 <vfprintf+0x284>
 7ac:	99 ef       	ldi	r25, 0xF9	; 249
 7ae:	b9 2e       	mov	r11, r25
 7b0:	b2 22       	and	r11, r18
 7b2:	8f 36       	cpi	r24, 0x6F	; 111
 7b4:	c1 f0       	breq	.+48     	; 0x7e6 <vfprintf+0x274>
 7b6:	80 37       	cpi	r24, 0x70	; 112
 7b8:	20 f4       	brcc	.+8      	; 0x7c2 <vfprintf+0x250>
 7ba:	88 35       	cpi	r24, 0x58	; 88
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <vfprintf+0x24e>
 7be:	b5 c0       	rjmp	.+362    	; 0x92a <__stack+0xcb>
 7c0:	0d c0       	rjmp	.+26     	; 0x7dc <vfprintf+0x26a>
 7c2:	80 37       	cpi	r24, 0x70	; 112
 7c4:	21 f0       	breq	.+8      	; 0x7ce <vfprintf+0x25c>
 7c6:	88 37       	cpi	r24, 0x78	; 120
 7c8:	09 f0       	breq	.+2      	; 0x7cc <vfprintf+0x25a>
 7ca:	af c0       	rjmp	.+350    	; 0x92a <__stack+0xcb>
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <vfprintf+0x260>
 7ce:	20 e1       	ldi	r18, 0x10	; 16
 7d0:	b2 2a       	or	r11, r18
 7d2:	b4 fe       	sbrs	r11, 4
 7d4:	0b c0       	rjmp	.+22     	; 0x7ec <vfprintf+0x27a>
 7d6:	84 e0       	ldi	r24, 0x04	; 4
 7d8:	b8 2a       	or	r11, r24
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <vfprintf+0x27a>
 7dc:	b4 fe       	sbrs	r11, 4
 7de:	09 c0       	rjmp	.+18     	; 0x7f2 <vfprintf+0x280>
 7e0:	e6 e0       	ldi	r30, 0x06	; 6
 7e2:	be 2a       	or	r11, r30
 7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <vfprintf+0x280>
 7e6:	28 e0       	ldi	r18, 0x08	; 8
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <vfprintf+0x284>
 7ec:	20 e1       	ldi	r18, 0x10	; 16
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <vfprintf+0x284>
 7f2:	20 e1       	ldi	r18, 0x10	; 16
 7f4:	32 e0       	ldi	r19, 0x02	; 2
 7f6:	b7 fe       	sbrs	r11, 7
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <vfprintf+0x298>
 7fa:	f8 01       	movw	r30, r16
 7fc:	60 81       	ld	r22, Z
 7fe:	71 81       	ldd	r23, Z+1	; 0x01
 800:	82 81       	ldd	r24, Z+2	; 0x02
 802:	93 81       	ldd	r25, Z+3	; 0x03
 804:	0c 5f       	subi	r16, 0xFC	; 252
 806:	1f 4f       	sbci	r17, 0xFF	; 255
 808:	07 c0       	rjmp	.+14     	; 0x818 <vfprintf+0x2a6>
 80a:	f8 01       	movw	r30, r16
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 5f       	subi	r16, 0xFE	; 254
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	a2 01       	movw	r20, r4
 81a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__ultoa_invert>
 81e:	78 2e       	mov	r7, r24
 820:	74 18       	sub	r7, r4
 822:	ff e7       	ldi	r31, 0x7F	; 127
 824:	bf 22       	and	r11, r31
 826:	b6 fe       	sbrs	r11, 6
 828:	0b c0       	rjmp	.+22     	; 0x840 <vfprintf+0x2ce>
 82a:	2e ef       	ldi	r18, 0xFE	; 254
 82c:	b2 22       	and	r11, r18
 82e:	7e 14       	cp	r7, r14
 830:	38 f4       	brcc	.+14     	; 0x840 <vfprintf+0x2ce>
 832:	b4 fe       	sbrs	r11, 4
 834:	07 c0       	rjmp	.+14     	; 0x844 <vfprintf+0x2d2>
 836:	b2 fc       	sbrc	r11, 2
 838:	05 c0       	rjmp	.+10     	; 0x844 <vfprintf+0x2d2>
 83a:	8f ee       	ldi	r24, 0xEF	; 239
 83c:	b8 22       	and	r11, r24
 83e:	02 c0       	rjmp	.+4      	; 0x844 <vfprintf+0x2d2>
 840:	a7 2c       	mov	r10, r7
 842:	01 c0       	rjmp	.+2      	; 0x846 <vfprintf+0x2d4>
 844:	ae 2c       	mov	r10, r14
 846:	8b 2d       	mov	r24, r11
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	b4 fe       	sbrs	r11, 4
 84c:	0d c0       	rjmp	.+26     	; 0x868 <__stack+0x9>
 84e:	fe 01       	movw	r30, r28
 850:	e7 0d       	add	r30, r7
 852:	f1 1d       	adc	r31, r1
 854:	20 81       	ld	r18, Z
 856:	20 33       	cpi	r18, 0x30	; 48
 858:	19 f4       	brne	.+6      	; 0x860 <__stack+0x1>
 85a:	e9 ee       	ldi	r30, 0xE9	; 233
 85c:	be 22       	and	r11, r30
 85e:	09 c0       	rjmp	.+18     	; 0x872 <__stack+0x13>
 860:	a3 94       	inc	r10
 862:	b2 fe       	sbrs	r11, 2
 864:	06 c0       	rjmp	.+12     	; 0x872 <__stack+0x13>
 866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
 868:	86 78       	andi	r24, 0x86	; 134
 86a:	90 70       	andi	r25, 0x00	; 0
 86c:	00 97       	sbiw	r24, 0x00	; 0
 86e:	09 f0       	breq	.+2      	; 0x872 <__stack+0x13>
 870:	a3 94       	inc	r10
 872:	8b 2c       	mov	r8, r11
 874:	99 24       	eor	r9, r9
 876:	b3 fc       	sbrc	r11, 3
 878:	14 c0       	rjmp	.+40     	; 0x8a2 <__stack+0x43>
 87a:	b0 fe       	sbrs	r11, 0
 87c:	0f c0       	rjmp	.+30     	; 0x89c <__stack+0x3d>
 87e:	af 14       	cp	r10, r15
 880:	28 f4       	brcc	.+10     	; 0x88c <__stack+0x2d>
 882:	e7 2c       	mov	r14, r7
 884:	ef 0c       	add	r14, r15
 886:	ea 18       	sub	r14, r10
 888:	af 2c       	mov	r10, r15
 88a:	08 c0       	rjmp	.+16     	; 0x89c <__stack+0x3d>
 88c:	e7 2c       	mov	r14, r7
 88e:	06 c0       	rjmp	.+12     	; 0x89c <__stack+0x3d>
 890:	80 e2       	ldi	r24, 0x20	; 32
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	b6 01       	movw	r22, r12
 896:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 89a:	a3 94       	inc	r10
 89c:	af 14       	cp	r10, r15
 89e:	c0 f3       	brcs	.-16     	; 0x890 <__stack+0x31>
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
 8a2:	af 14       	cp	r10, r15
 8a4:	10 f4       	brcc	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	fa 18       	sub	r15, r10
 8a8:	01 c0       	rjmp	.+2      	; 0x8ac <__stack+0x4d>
 8aa:	ff 24       	eor	r15, r15
 8ac:	84 fe       	sbrs	r8, 4
 8ae:	0f c0       	rjmp	.+30     	; 0x8ce <__stack+0x6f>
 8b0:	80 e3       	ldi	r24, 0x30	; 48
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	b6 01       	movw	r22, r12
 8b6:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8ba:	82 fe       	sbrs	r8, 2
 8bc:	1f c0       	rjmp	.+62     	; 0x8fc <__stack+0x9d>
 8be:	81 fe       	sbrs	r8, 1
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <__stack+0x69>
 8c2:	88 e5       	ldi	r24, 0x58	; 88
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	10 c0       	rjmp	.+32     	; 0x8e8 <__stack+0x89>
 8c8:	88 e7       	ldi	r24, 0x78	; 120
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <__stack+0x89>
 8ce:	c4 01       	movw	r24, r8
 8d0:	86 78       	andi	r24, 0x86	; 134
 8d2:	90 70       	andi	r25, 0x00	; 0
 8d4:	00 97       	sbiw	r24, 0x00	; 0
 8d6:	91 f0       	breq	.+36     	; 0x8fc <__stack+0x9d>
 8d8:	81 fc       	sbrc	r8, 1
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
 8dc:	80 e2       	ldi	r24, 0x20	; 32
 8de:	01 c0       	rjmp	.+2      	; 0x8e2 <__stack+0x83>
 8e0:	8b e2       	ldi	r24, 0x2B	; 43
 8e2:	b7 fc       	sbrc	r11, 7
 8e4:	8d e2       	ldi	r24, 0x2D	; 45
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	b6 01       	movw	r22, r12
 8ea:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <__stack+0x9d>
 8f0:	80 e3       	ldi	r24, 0x30	; 48
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	b6 01       	movw	r22, r12
 8f6:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8fa:	ea 94       	dec	r14
 8fc:	7e 14       	cp	r7, r14
 8fe:	c0 f3       	brcs	.-16     	; 0x8f0 <__stack+0x91>
 900:	7a 94       	dec	r7
 902:	f2 01       	movw	r30, r4
 904:	e7 0d       	add	r30, r7
 906:	f1 1d       	adc	r31, r1
 908:	80 81       	ld	r24, Z
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	b6 01       	movw	r22, r12
 90e:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 912:	77 20       	and	r7, r7
 914:	a9 f7       	brne	.-22     	; 0x900 <__stack+0xa1>
 916:	06 c0       	rjmp	.+12     	; 0x924 <__stack+0xc5>
 918:	80 e2       	ldi	r24, 0x20	; 32
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	b6 01       	movw	r22, r12
 91e:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 922:	fa 94       	dec	r15
 924:	ff 20       	and	r15, r15
 926:	c1 f7       	brne	.-16     	; 0x918 <__stack+0xb9>
 928:	37 ce       	rjmp	.-914    	; 0x598 <vfprintf+0x26>
 92a:	f6 01       	movw	r30, r12
 92c:	26 81       	ldd	r18, Z+6	; 0x06
 92e:	37 81       	ldd	r19, Z+7	; 0x07
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0xd7>
 932:	2f ef       	ldi	r18, 0xFF	; 255
 934:	3f ef       	ldi	r19, 0xFF	; 255
 936:	c9 01       	movw	r24, r18
 938:	2c 96       	adiw	r28, 0x0c	; 12
 93a:	e2 e1       	ldi	r30, 0x12	; 18
 93c:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__epilogue_restores__>

00000940 <strnlen_P>:
 940:	fc 01       	movw	r30, r24
 942:	05 90       	lpm	r0, Z+
 944:	61 50       	subi	r22, 0x01	; 1
 946:	70 40       	sbci	r23, 0x00	; 0
 948:	01 10       	cpse	r0, r1
 94a:	d8 f7       	brcc	.-10     	; 0x942 <strnlen_P+0x2>
 94c:	80 95       	com	r24
 94e:	90 95       	com	r25
 950:	8e 0f       	add	r24, r30
 952:	9f 1f       	adc	r25, r31
 954:	08 95       	ret

00000956 <strnlen>:
 956:	fc 01       	movw	r30, r24
 958:	61 50       	subi	r22, 0x01	; 1
 95a:	70 40       	sbci	r23, 0x00	; 0
 95c:	01 90       	ld	r0, Z+
 95e:	01 10       	cpse	r0, r1
 960:	d8 f7       	brcc	.-10     	; 0x958 <strnlen+0x2>
 962:	80 95       	com	r24
 964:	90 95       	com	r25
 966:	8e 0f       	add	r24, r30
 968:	9f 1f       	adc	r25, r31
 96a:	08 95       	ret

0000096c <fputc>:
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	8c 01       	movw	r16, r24
 976:	eb 01       	movw	r28, r22
 978:	8b 81       	ldd	r24, Y+3	; 0x03
 97a:	81 ff       	sbrs	r24, 1
 97c:	1b c0       	rjmp	.+54     	; 0x9b4 <fputc+0x48>
 97e:	82 ff       	sbrs	r24, 2
 980:	0d c0       	rjmp	.+26     	; 0x99c <fputc+0x30>
 982:	2e 81       	ldd	r18, Y+6	; 0x06
 984:	3f 81       	ldd	r19, Y+7	; 0x07
 986:	8c 81       	ldd	r24, Y+4	; 0x04
 988:	9d 81       	ldd	r25, Y+5	; 0x05
 98a:	28 17       	cp	r18, r24
 98c:	39 07       	cpc	r19, r25
 98e:	64 f4       	brge	.+24     	; 0x9a8 <fputc+0x3c>
 990:	e8 81       	ld	r30, Y
 992:	f9 81       	ldd	r31, Y+1	; 0x01
 994:	01 93       	st	Z+, r16
 996:	f9 83       	std	Y+1, r31	; 0x01
 998:	e8 83       	st	Y, r30
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <fputc+0x3c>
 99c:	e8 85       	ldd	r30, Y+8	; 0x08
 99e:	f9 85       	ldd	r31, Y+9	; 0x09
 9a0:	80 2f       	mov	r24, r16
 9a2:	09 95       	icall
 9a4:	00 97       	sbiw	r24, 0x00	; 0
 9a6:	31 f4       	brne	.+12     	; 0x9b4 <fputc+0x48>
 9a8:	8e 81       	ldd	r24, Y+6	; 0x06
 9aa:	9f 81       	ldd	r25, Y+7	; 0x07
 9ac:	01 96       	adiw	r24, 0x01	; 1
 9ae:	9f 83       	std	Y+7, r25	; 0x07
 9b0:	8e 83       	std	Y+6, r24	; 0x06
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <fputc+0x4c>
 9b4:	0f ef       	ldi	r16, 0xFF	; 255
 9b6:	1f ef       	ldi	r17, 0xFF	; 255
 9b8:	c8 01       	movw	r24, r16
 9ba:	df 91       	pop	r29
 9bc:	cf 91       	pop	r28
 9be:	1f 91       	pop	r17
 9c0:	0f 91       	pop	r16
 9c2:	08 95       	ret

000009c4 <__ultoa_invert>:
 9c4:	fa 01       	movw	r30, r20
 9c6:	aa 27       	eor	r26, r26
 9c8:	28 30       	cpi	r18, 0x08	; 8
 9ca:	51 f1       	breq	.+84     	; 0xa20 <__ultoa_invert+0x5c>
 9cc:	20 31       	cpi	r18, 0x10	; 16
 9ce:	81 f1       	breq	.+96     	; 0xa30 <__ultoa_invert+0x6c>
 9d0:	e8 94       	clt
 9d2:	6f 93       	push	r22
 9d4:	6e 7f       	andi	r22, 0xFE	; 254
 9d6:	6e 5f       	subi	r22, 0xFE	; 254
 9d8:	7f 4f       	sbci	r23, 0xFF	; 255
 9da:	8f 4f       	sbci	r24, 0xFF	; 255
 9dc:	9f 4f       	sbci	r25, 0xFF	; 255
 9de:	af 4f       	sbci	r26, 0xFF	; 255
 9e0:	b1 e0       	ldi	r27, 0x01	; 1
 9e2:	3e d0       	rcall	.+124    	; 0xa60 <__ultoa_invert+0x9c>
 9e4:	b4 e0       	ldi	r27, 0x04	; 4
 9e6:	3c d0       	rcall	.+120    	; 0xa60 <__ultoa_invert+0x9c>
 9e8:	67 0f       	add	r22, r23
 9ea:	78 1f       	adc	r23, r24
 9ec:	89 1f       	adc	r24, r25
 9ee:	9a 1f       	adc	r25, r26
 9f0:	a1 1d       	adc	r26, r1
 9f2:	68 0f       	add	r22, r24
 9f4:	79 1f       	adc	r23, r25
 9f6:	8a 1f       	adc	r24, r26
 9f8:	91 1d       	adc	r25, r1
 9fa:	a1 1d       	adc	r26, r1
 9fc:	6a 0f       	add	r22, r26
 9fe:	71 1d       	adc	r23, r1
 a00:	81 1d       	adc	r24, r1
 a02:	91 1d       	adc	r25, r1
 a04:	a1 1d       	adc	r26, r1
 a06:	20 d0       	rcall	.+64     	; 0xa48 <__ultoa_invert+0x84>
 a08:	09 f4       	brne	.+2      	; 0xa0c <__ultoa_invert+0x48>
 a0a:	68 94       	set
 a0c:	3f 91       	pop	r19
 a0e:	2a e0       	ldi	r18, 0x0A	; 10
 a10:	26 9f       	mul	r18, r22
 a12:	11 24       	eor	r1, r1
 a14:	30 19       	sub	r19, r0
 a16:	30 5d       	subi	r19, 0xD0	; 208
 a18:	31 93       	st	Z+, r19
 a1a:	de f6       	brtc	.-74     	; 0x9d2 <__ultoa_invert+0xe>
 a1c:	cf 01       	movw	r24, r30
 a1e:	08 95       	ret
 a20:	46 2f       	mov	r20, r22
 a22:	47 70       	andi	r20, 0x07	; 7
 a24:	40 5d       	subi	r20, 0xD0	; 208
 a26:	41 93       	st	Z+, r20
 a28:	b3 e0       	ldi	r27, 0x03	; 3
 a2a:	0f d0       	rcall	.+30     	; 0xa4a <__ultoa_invert+0x86>
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__ultoa_invert+0x5c>
 a2e:	f6 cf       	rjmp	.-20     	; 0xa1c <__ultoa_invert+0x58>
 a30:	46 2f       	mov	r20, r22
 a32:	4f 70       	andi	r20, 0x0F	; 15
 a34:	40 5d       	subi	r20, 0xD0	; 208
 a36:	4a 33       	cpi	r20, 0x3A	; 58
 a38:	18 f0       	brcs	.+6      	; 0xa40 <__ultoa_invert+0x7c>
 a3a:	49 5d       	subi	r20, 0xD9	; 217
 a3c:	31 fd       	sbrc	r19, 1
 a3e:	40 52       	subi	r20, 0x20	; 32
 a40:	41 93       	st	Z+, r20
 a42:	02 d0       	rcall	.+4      	; 0xa48 <__ultoa_invert+0x84>
 a44:	a9 f7       	brne	.-22     	; 0xa30 <__ultoa_invert+0x6c>
 a46:	ea cf       	rjmp	.-44     	; 0xa1c <__ultoa_invert+0x58>
 a48:	b4 e0       	ldi	r27, 0x04	; 4
 a4a:	a6 95       	lsr	r26
 a4c:	97 95       	ror	r25
 a4e:	87 95       	ror	r24
 a50:	77 95       	ror	r23
 a52:	67 95       	ror	r22
 a54:	ba 95       	dec	r27
 a56:	c9 f7       	brne	.-14     	; 0xa4a <__ultoa_invert+0x86>
 a58:	00 97       	sbiw	r24, 0x00	; 0
 a5a:	61 05       	cpc	r22, r1
 a5c:	71 05       	cpc	r23, r1
 a5e:	08 95       	ret
 a60:	9b 01       	movw	r18, r22
 a62:	ac 01       	movw	r20, r24
 a64:	0a 2e       	mov	r0, r26
 a66:	06 94       	lsr	r0
 a68:	57 95       	ror	r21
 a6a:	47 95       	ror	r20
 a6c:	37 95       	ror	r19
 a6e:	27 95       	ror	r18
 a70:	ba 95       	dec	r27
 a72:	c9 f7       	brne	.-14     	; 0xa66 <__ultoa_invert+0xa2>
 a74:	62 0f       	add	r22, r18
 a76:	73 1f       	adc	r23, r19
 a78:	84 1f       	adc	r24, r20
 a7a:	95 1f       	adc	r25, r21
 a7c:	a0 1d       	adc	r26, r0
 a7e:	08 95       	ret

00000a80 <__prologue_saves__>:
 a80:	2f 92       	push	r2
 a82:	3f 92       	push	r3
 a84:	4f 92       	push	r4
 a86:	5f 92       	push	r5
 a88:	6f 92       	push	r6
 a8a:	7f 92       	push	r7
 a8c:	8f 92       	push	r8
 a8e:	9f 92       	push	r9
 a90:	af 92       	push	r10
 a92:	bf 92       	push	r11
 a94:	cf 92       	push	r12
 a96:	df 92       	push	r13
 a98:	ef 92       	push	r14
 a9a:	ff 92       	push	r15
 a9c:	0f 93       	push	r16
 a9e:	1f 93       	push	r17
 aa0:	cf 93       	push	r28
 aa2:	df 93       	push	r29
 aa4:	cd b7       	in	r28, 0x3d	; 61
 aa6:	de b7       	in	r29, 0x3e	; 62
 aa8:	ca 1b       	sub	r28, r26
 aaa:	db 0b       	sbc	r29, r27
 aac:	0f b6       	in	r0, 0x3f	; 63
 aae:	f8 94       	cli
 ab0:	de bf       	out	0x3e, r29	; 62
 ab2:	0f be       	out	0x3f, r0	; 63
 ab4:	cd bf       	out	0x3d, r28	; 61
 ab6:	09 94       	ijmp

00000ab8 <__epilogue_restores__>:
 ab8:	2a 88       	ldd	r2, Y+18	; 0x12
 aba:	39 88       	ldd	r3, Y+17	; 0x11
 abc:	48 88       	ldd	r4, Y+16	; 0x10
 abe:	5f 84       	ldd	r5, Y+15	; 0x0f
 ac0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ac2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ac4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ac6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ac8:	aa 84       	ldd	r10, Y+10	; 0x0a
 aca:	b9 84       	ldd	r11, Y+9	; 0x09
 acc:	c8 84       	ldd	r12, Y+8	; 0x08
 ace:	df 80       	ldd	r13, Y+7	; 0x07
 ad0:	ee 80       	ldd	r14, Y+6	; 0x06
 ad2:	fd 80       	ldd	r15, Y+5	; 0x05
 ad4:	0c 81       	ldd	r16, Y+4	; 0x04
 ad6:	1b 81       	ldd	r17, Y+3	; 0x03
 ad8:	aa 81       	ldd	r26, Y+2	; 0x02
 ada:	b9 81       	ldd	r27, Y+1	; 0x01
 adc:	ce 0f       	add	r28, r30
 ade:	d1 1d       	adc	r29, r1
 ae0:	0f b6       	in	r0, 0x3f	; 63
 ae2:	f8 94       	cli
 ae4:	de bf       	out	0x3e, r29	; 62
 ae6:	0f be       	out	0x3f, r0	; 63
 ae8:	cd bf       	out	0x3d, r28	; 61
 aea:	ed 01       	movw	r28, r26
 aec:	08 95       	ret

00000aee <_exit>:
 aee:	f8 94       	cli

00000af0 <__stop_program>:
 af0:	ff cf       	rjmp	.-2      	; 0xaf0 <__stop_program>
