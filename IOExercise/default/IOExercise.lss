
IOExercise.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000845  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000192  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fd  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000172  00000000  00000000  00000b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000eb  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  00000d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000e1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h> /// a delay library is used to have a delay 


int main(void)
{
DDRB |= (1<<PINB0); /// assigning the first pin for portB to output
  6c:	b8 9a       	sbi	0x17, 0	; 23
//DDRB &=~(1<<PINB4); /// making sure that bit 4 is used as input 
PORTB|=(1<<PINB4); /// SETTING BIT4 FOR PORT REG AS A HIGH READING BIT 
  6e:	c4 9a       	sbi	0x18, 4	; 24

while(1)
{
   PORTB ^= 1 << PINB0; // toggling the led  
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	88 b3       	in	r24, 0x18	; 24
  74:	89 27       	eor	r24, r25
  76:	88 bb       	out	0x18, r24	; 24
      
   
   if (bit_is_clear(PINB, 4)) // if the button is pressed the bit  4 is 1 
  78:	b4 99       	sbic	0x16, 4	; 22
  7a:	08 c0       	rjmp	.+16     	; 0x8c <main+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f e9       	ldi	r18, 0x9F	; 159
  7e:	36 e8       	ldi	r19, 0x86	; 134
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	21 50       	subi	r18, 0x01	; 1
  84:	30 40       	sbci	r19, 0x00	; 0
  86:	40 40       	sbci	r20, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	04 c0       	rjmp	.+8      	; 0x94 <main+0x28>
  8c:	e3 ec       	ldi	r30, 0xC3	; 195
  8e:	f9 e0       	ldi	r31, 0x09	; 9
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
  98:	ec cf       	rjmp	.-40     	; 0x72 <main+0x6>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
