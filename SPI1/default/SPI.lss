
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000845  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000076  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000148  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000103  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000156  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c4  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_MasterInit>:



	void SPI_MasterInit(void)
	{
	DDRB =(1<<PB5)|(1<<PB7);
  6c:	80 ea       	ldi	r24, 0xA0	; 160
  6e:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  70:	81 e5       	ldi	r24, 0x51	; 81
  72:	8d b9       	out	0x0d, r24	; 13
	}
  74:	08 95       	ret

00000076 <SPI_MasterTransmit>:


	void SPI_MasterTransmit(char cData)
	{
	SPDR = cData;
  76:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  78:	77 9b       	sbis	0x0e, 7	; 14
  7a:	fe cf       	rjmp	.-4      	; 0x78 <SPI_MasterTransmit+0x2>

	}
  7c:	08 95       	ret

0000007e <SPI_slaveInit>:

	void SPI_slaveInit(void)
	{
	DDRB = (1<<PB5);
  7e:	80 e2       	ldi	r24, 0x20	; 32
  80:	87 bb       	out	0x17, r24	; 23

	SPCR = (1<<SPE);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	8d b9       	out	0x0d, r24	; 13

	}
  86:	08 95       	ret

00000088 <SPI_SlaveRecieve>:
	char SPI_SlaveRecieve(void)
	{
	while(!(SPSR & (1<<SPIF)));
  88:	77 9b       	sbis	0x0e, 7	; 14
  8a:	fe cf       	rjmp	.-4      	; 0x88 <SPI_SlaveRecieve>
	return SPDR;
  8c:	8f b1       	in	r24, 0x0f	; 15
	}
  8e:	08 95       	ret

00000090 <blink>:
	void blink()
	{
	 PORTA ^=0b00111111;
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	9f e3       	ldi	r25, 0x3F	; 63
  94:	89 27       	eor	r24, r25
  96:	8b bb       	out	0x1b, r24	; 27
	}
  98:	08 95       	ret

0000009a <main>:
int main()
{
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
