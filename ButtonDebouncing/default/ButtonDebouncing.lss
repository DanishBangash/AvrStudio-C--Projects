
ButtonDebouncing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000885  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001a1  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010c  00000000  00000000  00000a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e4  00000000  00000000  00000b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ff  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c5  00000000  00000000  00000e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h> /// library for the interrupts 

int main(void){    /// main method 

unsigned char counter = 0; //// counter is initialized 
    DDRB= 0b00000001; ///// a 1 on the bit zero of the register B
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB=0b00000001; ////  set the out put on the portB LED Off
  70:	88 bb       	out	0x18, r24	; 24
#include <util/delay.h> //// library used to have a delay 
#include <avr/interrupt.h> /// library for the interrupts 

int main(void){    /// main method 

unsigned char counter = 0; //// counter is initialized 
  72:	80 e0       	ldi	r24, 0x00	; 0
    DDRB= 0b00000001; ///// a 1 on the bit zero of the register B
	PORTB=0b00000001; ////  set the out put on the portB LED Off
   while(1){ ///// while 1
	   if (!(PINB  & 0b00010000 ))   {	/// if not PINB & bit4
  74:	b4 99       	sbic	0x16, 4	; 22
  76:	0b c0       	rjmp	.+22     	; 0x8e <main+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	e3 e2       	ldi	r30, 0x23	; 35
  7a:	f4 ef       	ldi	r31, 0xF4	; 244
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <main+0x10>
  80:	00 c0       	rjmp	.+0      	; 0x82 <main+0x16>
  82:	00 00       	nop
	   		 _delay_ms(25); ////// with a delay of 25 ms 
	  		 if (!(PINB  & 0b00010000 )){ ///// if not PINB & bit4
  84:	b4 99       	sbic	0x16, 4	; 22
  86:	03 c0       	rjmp	.+6      	; 0x8e <main+0x22>
			     counter++; /// increment the counter 
  88:	8f 5f       	subi	r24, 0xFF	; 255
				 while(!(PINB  & 0b00010000 )){} /// while not PINB & bit4  looop
  8a:	b4 9b       	sbis	0x16, 4	; 22
  8c:	fe cf       	rjmp	.-4      	; 0x8a <main+0x1e>
			    
	   		 }
		}
		if (counter >= 10){       ///// if the counter is greater or equal to 10 
  8e:	8a 30       	cpi	r24, 0x0A	; 10
  90:	10 f0       	brcs	.+4      	; 0x96 <main+0x2a>
		      PORTB &= 0b00000000; //// the LED which is bit0 of PORT B
  92:	98 b3       	in	r25, 0x18	; 24
  94:	18 ba       	out	0x18, r1	; 24
		 }
		 
		 if(!(PORTB & 0b00000001)){
  96:	c0 99       	sbic	0x18, 0	; 24
  98:	ed cf       	rjmp	.-38     	; 0x74 <main+0x8>
		     if (!(PINB  & 0b00010000 ))   {	/// if not PINB & bit4
  9a:	b4 99       	sbic	0x16, 4	; 22
  9c:	0b c0       	rjmp	.+22     	; 0xb4 <main+0x48>
  9e:	e3 e2       	ldi	r30, 0x23	; 35
  a0:	f4 ef       	ldi	r31, 0xF4	; 244
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
	   		 _delay_ms(25); ////// with a delay of 25 ms 
	  		 if (!(PINB  & 0b00010000 )){ ///// if not PINB & bit4
  aa:	b4 99       	sbic	0x16, 4	; 22
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <main+0x48>
			     counter--; /// increment the counter 
  ae:	81 50       	subi	r24, 0x01	; 1
				 while(!(PINB  & 0b00010000 )){} /// while not PINB & bit4  looop
  b0:	b4 9b       	sbis	0x16, 4	; 22
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x44>
			    
	   		 }
		}
		if (counter >= 0){       ///// if the counter is greater or equal to 10 
		      PORTB &= !(0b00000000); //// the LED which is bit0 of PORT B
  b4:	98 b3       	in	r25, 0x18	; 24
  b6:	91 70       	andi	r25, 0x01	; 1
  b8:	98 bb       	out	0x18, r25	; 24
  ba:	dc cf       	rjmp	.-72     	; 0x74 <main+0x8>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
