
demo_exerternal_intr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000015a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000042  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000df  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a3  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e3  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a6  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 48 00 	call	0x90	; 0x90 <main>
  74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:
int i =0;

void init()
{
//init the erxternal intterupt 1 activated by a low level on PIND bit3
GICR |=(1<<INT1); /// GICR |= 0x80; GICR |= 0b10000000;
  7c:	8b b7       	in	r24, 0x3b	; 59
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	8b bf       	out	0x3b, r24	; 59
SREG = 0X80; // enabeling the global interupt 
  82:	80 e8       	ldi	r24, 0x80	; 128
  84:	8f bf       	out	0x3f, r24	; 63
// alternativeasm("SETI"); //?
DDRB|=!(1<<PB0);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	87 bb       	out	0x17, r24	; 23
PORTB |=!(1<<PB0);
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	88 bb       	out	0x18, r24	; 24
}
  8e:	08 95       	ret

00000090 <main>:
int i =0;

void init()
{
//init the erxternal intterupt 1 activated by a low level on PIND bit3
GICR |=(1<<INT1); /// GICR |= 0x80; GICR |= 0b10000000;
  90:	8b b7       	in	r24, 0x3b	; 59
  92:	80 68       	ori	r24, 0x80	; 128
  94:	8b bf       	out	0x3b, r24	; 59
SREG = 0X80; // enabeling the global interupt 
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	8f bf       	out	0x3f, r24	; 63
// alternativeasm("SETI"); //?
DDRB|=!(1<<PB0);
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	87 bb       	out	0x17, r24	; 23
PORTB |=!(1<<PB0);
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	80 91 60 00 	lds	r24, 0x0060
{
init();

while(1)
{
   if (flag==1)
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	09 f4       	brne	.+2      	; 0xac <main+0x1c>
   {
   flag=0;
   PORTB |=(1<<PB0);
  aa:	c0 9a       	sbi	0x18, 0	; 24
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x1c>

000000ae <__vector_2>:

}

}

ISR(INT1_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
flag=1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 60 00 	sts	0x0060, r24
i++;
  c2:	80 91 61 00 	lds	r24, 0x0061
  c6:	90 91 62 00 	lds	r25, 0x0062
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	90 93 62 00 	sts	0x0062, r25
  d0:	80 93 61 00 	sts	0x0061, r24
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
