
Kpad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000033e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800072  00800072  000003e4  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000014e  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000859  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000344  00000000  00000000  00000dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058e  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ba  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fe  00000000  00000000  0000195a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  8a:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <key_look>:
{

unsigned char column;
unsigned char lastkey;
unsigned char keyit;
			 	lastkey=(key_PINC & 0xC0);
  92:	83 b3       	in	r24, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	e0 e5       	ldi	r30, 0x50	; 80
  96:	f3 ec       	ldi	r31, 0xC3	; 195
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <key_look+0x6>
				_delay_ms(20);
				column=(key_PINC & 0xC0);
  9c:	93 b3       	in	r25, 0x13	; 19
  9e:	90 7c       	andi	r25, 0xC0	; 192
if(column==lastkey)
  a0:	80 7c       	andi	r24, 0xC0	; 192
  a2:	98 17       	cp	r25, r24
  a4:	d9 f5       	brne	.+118    	; 0x11c <key_look+0x8a>
{
 	switch(column)
  a6:	90 34       	cpi	r25, 0x40	; 64
  a8:	79 f0       	breq	.+30     	; 0xc8 <key_look+0x36>
  aa:	90 38       	cpi	r25, 0x80	; 128
  ac:	b9 f0       	breq	.+46     	; 0xdc <key_look+0x4a>
  ae:	e0 91 76 00 	lds	r30, 0x0076
  b2:	99 23       	and	r25, r25
  b4:	f1 f4       	brne	.+60     	; 0xf2 <key_look+0x60>
	{
		case 0x00:keyit= keytab[row][3];break;
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	e0 5a       	subi	r30, 0xA0	; 160
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	83 81       	ldd	r24, Z+3	; 0x03
  c6:	1d c0       	rjmp	.+58     	; 0x102 <key_look+0x70>
		case 0x40:keyit= keytab[row][2];break;
  c8:	e0 91 76 00 	lds	r30, 0x0076
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	ee 59       	subi	r30, 0x9E	; 158
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	12 c0       	rjmp	.+36     	; 0x100 <key_look+0x6e>
		case 0x80:keyit= keytab[row][1];break;
  dc:	e0 91 76 00 	lds	r30, 0x0076
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	e0 5a       	subi	r30, 0xA0	; 160
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	81 81       	ldd	r24, Z+1	; 0x01
  f0:	08 c0       	rjmp	.+16     	; 0x102 <key_look+0x70>
		default  :keyit= keytab[row][0];break; 
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	ee 0f       	add	r30, r30
  fa:	ff 1f       	adc	r31, r31
  fc:	e0 5a       	subi	r30, 0xA0	; 160
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	80 81       	ld	r24, Z
	}
	while (key_PINB & (1<<key_active));
 102:	b2 99       	sbic	0x16, 2	; 22
 104:	fe cf       	rjmp	.-4      	; 0x102 <key_look+0x70>
	
	 lcd_data_write(keyit);
 106:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_data_write>
 10a:	88 ee       	ldi	r24, 0xE8	; 232
 10c:	93 e0       	ldi	r25, 0x03	; 3
 10e:	2a ef       	ldi	r18, 0xFA	; 250
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <key_look+0x82>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11a:	d9 f7       	brne	.-10     	; 0x112 <key_look+0x80>
 11c:	08 95       	ret

0000011e <key_read>:
  key_DDRC  &= 0x3F;
   lcd_init();
}

void key_read()
{
 11e:	80 91 76 00 	lds	r24, 0x0076
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	20 c0       	rjmp	.+64     	; 0x168 <key_read+0x4a>
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
{
	switch(i)
 128:	21 30       	cpi	r18, 0x01	; 1
 12a:	31 05       	cpc	r19, r1
 12c:	59 f0       	breq	.+22     	; 0x144 <key_read+0x26>
 12e:	22 30       	cpi	r18, 0x02	; 2
 130:	31 05       	cpc	r19, r1
 132:	71 f0       	breq	.+28     	; 0x150 <key_read+0x32>
 134:	21 15       	cp	r18, r1
 136:	31 05       	cpc	r19, r1
 138:	89 f4       	brne	.+34     	; 0x15c <key_read+0x3e>
	{
	   case 0: key_PORTA &= 0xFC; 					 row=3; break;
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	8b bb       	out	0x1b, r24	; 27
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	10 c0       	rjmp	.+32     	; 0x164 <key_read+0x46>
	   case 1: key_PORTA &= 0xFC; key_PORTA |= 0x01; row=2; break;
 144:	8b b3       	in	r24, 0x1b	; 27
 146:	8c 7f       	andi	r24, 0xFC	; 252
 148:	8b bb       	out	0x1b, r24	; 27
 14a:	d8 9a       	sbi	0x1b, 0	; 27
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	0a c0       	rjmp	.+20     	; 0x164 <key_read+0x46>
	   case 2: key_PORTA &= 0xFC; key_PORTA |= 0x02; row=1; break;
 150:	8b b3       	in	r24, 0x1b	; 27
 152:	8c 7f       	andi	r24, 0xFC	; 252
 154:	8b bb       	out	0x1b, r24	; 27
 156:	d9 9a       	sbi	0x1b, 1	; 27
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	04 c0       	rjmp	.+8      	; 0x164 <key_read+0x46>
	   default: 				  key_PORTA |= 0x03; row=0; break;
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	8b bb       	out	0x1b, r24	; 27
 162:	80 e0       	ldi	r24, 0x00	; 0
	}
		i++;	
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
}

void key_read()
{
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
 168:	b2 9b       	sbis	0x16, 2	; 22
 16a:	de cf       	rjmp	.-68     	; 0x128 <key_read+0xa>
 16c:	80 93 76 00 	sts	0x0076, r24
	   case 2: key_PORTA &= 0xFC; key_PORTA |= 0x02; row=1; break;
	   default: 				  key_PORTA |= 0x03; row=0; break;
	}
		i++;	
	}
		key_look();	
 170:	0e 94 49 00 	call	0x92	; 0x92 <key_look>
	}
 174:	08 95       	ret

00000176 <key_init>:
							  {'7','8','9','D'},
							  {'A','0','B','C'} };

void key_init ()
{
  key_DDRA  |= 0x03;
 176:	8a b3       	in	r24, 0x1a	; 26
 178:	83 60       	ori	r24, 0x03	; 3
 17a:	8a bb       	out	0x1a, r24	; 26
  key_DDRC  &= 0x3F;
 17c:	84 b3       	in	r24, 0x14	; 20
 17e:	8f 73       	andi	r24, 0x3F	; 63
 180:	84 bb       	out	0x14, r24	; 20
   lcd_init();
 182:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_init>
}
 186:	08 95       	ret

00000188 <main>:

}

int main(void)
{
key_init();
 188:	0e 94 bb 00 	call	0x176	; 0x176 <key_init>
while(1)
{

key_read();
 18c:	0e 94 8f 00 	call	0x11e	; 0x11e <key_read>
 190:	fd cf       	rjmp	.-6      	; 0x18c <main+0x4>

00000192 <lcd_nibble_transfer>:


void lcd_nibble_transfer( unsigned char d )  
 
   { 
     lcd_port|= (1<<lcd_E);
 192:	db 9a       	sbi	0x1b, 3	; 27
	 asm volatile("NOP");   // Slow down timing 100 nS
 194:	00 00       	nop
   	lcd_port= (lcd_port & 0x0f)| (d &0xf0);   //(always msn as 4 bit data bus)
 196:	9b b3       	in	r25, 0x1b	; 27
 198:	80 7f       	andi	r24, 0xF0	; 240
 19a:	9f 70       	andi	r25, 0x0F	; 15
 19c:	98 2b       	or	r25, r24
 19e:	9b bb       	out	0x1b, r25	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1a0:	88 ec       	ldi	r24, 0xC8	; 200
 1a2:	98 2f       	mov	r25, r24
 1a4:	9a 95       	dec	r25
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_nibble_transfer+0x12>
  
  	
 	 //lcd_wait(8);   // Slow down  58 us
_delay_us(60);
	lcd_port &= ~(1<<lcd_E);
 1a8:	db 98       	cbi	0x1b, 3	; 27
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_nibble_transfer+0x18>
//	lcd_wait(8);
_delay_us(60);
   } // end lcd_nibble_transfer()
 1ae:	08 95       	ret

000001b0 <lcd_transfer>:
// Low level functions
// Write to the lcd data bus - generate E pulse 

void lcd_transfer (unsigned char d)

   {
 1b0:	1f 93       	push	r17
 1b2:	18 2f       	mov	r17, r24
	 lcd_port|= (1<<lcd_E);
 1b4:	db 9a       	sbi	0x1b, 3	; 27
	  asm volatile("NOP");  // Slow down timing 100 nS
 1b6:	00 00       	nop
     asm volatile("NOP"); // Slow down timing 100 nS
 1b8:	00 00       	nop
 lcd_nibble_transfer(d);   //(msn)
 1ba:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_nibble_transfer>
 
//	 asm volatile("NOP");   // Slow down timing 100 nS	 
	 	asm volatile("NOP");   // Slow down timing 100 nS
 1be:	00 00       	nop
		lcd_port |= (1<<lcd_E);
 1c0:	db 9a       	sbi	0x1b, 3	; 27

 lcd_nibble_transfer(d<<4);   //lsn);
 1c2:	81 2f       	mov	r24, r17
 1c4:	82 95       	swap	r24
 1c6:	80 7f       	andi	r24, 0xF0	; 240
 1c8:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_nibble_transfer>
 
   } // end lcd_transfer()
 1cc:	1f 91       	pop	r17
 1ce:	08 95       	ret

000001d0 <lcd_data_write>:


void lcd_data_write(unsigned char d)

   {
   lcd_direction |= 0xfc;
 1d0:	9a b3       	in	r25, 0x1a	; 26
 1d2:	9c 6f       	ori	r25, 0xFC	; 252
 1d4:	9a bb       	out	0x1a, r25	; 26
   lcd_port|=(1<<lcd_RS);				//rs=1 when writing data
 1d6:	da 9a       	sbi	0x1b, 2	; 27
   
  // lcd_port &= ~(1<<lcd_RW);
    asm volatile("NOP");   // Slow down timing 100 nS
 1d8:	00 00       	nop
   	asm volatile("NOP");   // Slow down timing 100 nS
 1da:	00 00       	nop

   lcd_transfer(d); 
 1dc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_transfer>
   } // end lcd_data_write()
 1e0:	08 95       	ret

000001e2 <lcd_cmd_write>:
// Medium level functions 
// Select RS / RW mode and call lower level funtion to complete the transfer

void lcd_cmd_write(unsigned char cmd)
   { 
    lcd_direction |= 0xfc;
 1e2:	9a b3       	in	r25, 0x1a	; 26
 1e4:	9c 6f       	ori	r25, 0xFC	; 252
 1e6:	9a bb       	out	0x1a, r25	; 26
     //lcd_RS=0;
  lcd_port &= ~(1<<lcd_RS);
 1e8:	da 98       	cbi	0x1b, 2	; 27
 
  // lcd_port &= ~(1<<lcd_RW);
  asm volatile("NOP");  // Slow down timing 100 nS
 1ea:	00 00       	nop
   asm volatile("NOP");   // Slow down timing 100 nS
 1ec:	00 00       	nop
   lcd_transfer(cmd);
 1ee:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_transfer>
   } // end lcd_cmd_write()
 1f2:	08 95       	ret

000001f4 <lcd_init>:
// LCD initialization sequence (works somewhat like a constructor)
//*******************************************************************

void lcd_init()    // Works like a constructor
   
   {
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17

   // Power on delay
	lcd_direction |= 0xfc;							//	set port a as output
 1f8:	8a b3       	in	r24, 0x1a	; 26
 1fa:	8c 6f       	ori	r24, 0xFC	; 252
 1fc:	8a bb       	out	0x1a, r24	; 26
   lcd_wait( 20000 );                                   // Power on wait 
   lcd_wait( 20000 );
	lcd_port &= ~((1<<lcd_E) | (1<<lcd_RS)); // EN=0, RS=0
 1fe:	8b b3       	in	r24, 0x1b	; 27
 200:	83 7f       	andi	r24, 0xF3	; 243
 202:	8b bb       	out	0x1b, r24	; 27
//	lcd_port &= ~(1<<lcd_RW);               // Set RW = 0 in case it is connected
 
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_nibble_transfer>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20a:	00 e6       	ldi	r16, 0x60	; 96
 20c:	1a ee       	ldi	r17, 0xEA	; 234
 20e:	c8 01       	movw	r24, r16
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x1c>
   //lcd_wait(longdelay );  						 // wait 24 ms
   _delay_ms(24);
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_nibble_transfer>
 21a:	c8 01       	movw	r24, r16
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_init+0x28>
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_nibble_transfer>
 226:	c8 01       	movw	r24, r16
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x34>
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION);
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_nibble_transfer>
 232:	c8 01       	movw	r24, r16
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_init+0x40>
  // lcd_wait(longdelay);
   _delay_ms(24);
   lcd_cmd_write(SET_FUNCTION+LN2_BIT);                 // Function set: 0x28  2 lines
 238:	88 e2       	ldi	r24, 0x28	; 40
 23a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
 23e:	08 e8       	ldi	r16, 0x88	; 136
 240:	13 e1       	ldi	r17, 0x13	; 19
 242:	c8 01       	movw	r24, r16
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <lcd_init+0x50>
  // lcd_wait(WAIT_15m);                              // Wait 39 uS
 _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY);						//display off
 248:	88 e0       	ldi	r24, 0x08	; 8
 24a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
 24e:	c8 01       	movw	r24, r16
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init+0x5c>
 //lcd_wait(WAIT_15m);
_delay_ms(2);	
	lcd_cmd_write(CLR_DISPLAY);       // Display clear: 0x01 clear data                 	 
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
 25a:	c8 01       	movw	r24, r16
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x68>
	
  // lcd_wait(WAIT_15m);                // 1.53 mS  
     _delay_ms(2);                  
                               

   lcd_cmd_write(SET_ENTRY_MODE+INC_BIT);          //  +INC_BIT  // Entry mode set: shift cursor 1 position to right
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
 266:	c8 01       	movw	r24, r16
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x74>
  //   lcd_wait(WAIT_15m);      
  _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY+ON_BIT+CUR_BIT+BLK_BIT); //+CUR_BIT+BLK_BIT);   Display ON/OFF control: 0x0f
 26c:	8f e0       	ldi	r24, 0x0F	; 15
 26e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
 272:	c8 01       	movw	r24, r16
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <lcd_init+0x80>
  //   lcd_wait(WAIT_15m);                               // Wait 39 uS                      // 1.53 mS     
_delay_ms(2);	
	lcd_cmd_write(RTN_HOME);
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
 27e:	c8 01       	movw	r24, r16
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x8c>
  //lcd_wait(WAIT_15m);                            // 1.53 mS  
_delay_ms(2);
  
   } // end lcd_init()
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <lcdClear>:


//clear the display
void lcdClear(void) {

lcd_cmd_write(CLR_DISPLAY);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
//lcd_wait(WAIT_15m);
lcd_cmd_write(CLR_DISPLAY+RTN_HOME);
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
//lcd_wait(WAIT_15m);


}
 296:	08 95       	ret

00000298 <LCDPutString>:




//! write a zero-terminated ASCII string to the display
void LCDPutString(char *str) {
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <LCDPutString+0xe>
   char c;
for (; (c = *str) != 0; str++) lcd_data_write(c);
 2a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_data_write>
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	88 81       	ld	r24, Y
 2a8:	88 23       	and	r24, r24
 2aa:	d1 f7       	brne	.-12     	; 0x2a0 <LCDPutString+0x8>

  
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <lcd_wait>:
   for ( i = 0 ; i < count ; i++ );    //4 cycles per count
    // end lcd_wait()

  

   } // end lcd_transfer()
 2b2:	08 95       	ret

000002b4 <GoTo>:

//goto x-position and y-line called by parameters x, y used in main() and internally LCDPutChar()

void GoTo(unsigned char x, unsigned char y){

switch (y) {
 2b4:	61 30       	cpi	r22, 0x01	; 1
 2b6:	49 f0       	breq	.+18     	; 0x2ca <GoTo+0x16>
 2b8:	61 30       	cpi	r22, 0x01	; 1
 2ba:	28 f0       	brcs	.+10     	; 0x2c6 <GoTo+0x12>
 2bc:	62 30       	cpi	r22, 0x02	; 2
 2be:	39 f0       	breq	.+14     	; 0x2ce <GoTo+0x1a>
 2c0:	63 30       	cpi	r22, 0x03	; 3
 2c2:	61 f4       	brne	.+24     	; 0x2dc <GoTo+0x28>
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <GoTo+0x22>
case 0: 

 lcd_cmd_write(SET_DRAM_ADDR+x);
 2c6:	80 58       	subi	r24, 0x80	; 128
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
 break;

 case 1: 

lcd_cmd_write(SET_DRAM_ADDR+line_1+x);
 2ca:	80 54       	subi	r24, 0x40	; 64
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
break;

case 2:
lcd_cmd_write(SET_DRAM_ADDR+line_2+x);
 2ce:	8c 56       	subi	r24, 0x6C	; 108
 2d0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
 2d4:	08 95       	ret
 lcd_wait(WAIT_15m);  
break;

case 3:
lcd_cmd_write(SET_DRAM_ADDR+line_3+x);
 2d6:	8c 52       	subi	r24, 0x2C	; 44
 2d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_cmd_write>
 2dc:	08 95       	ret

000002de <clearLine>:
//lcd_wait(WAIT_15m);


}

void clearLine(unsigned char x, unsigned char y){
 2de:	cf 92       	push	r12
 2e0:	df 92       	push	r13
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	18 2f       	mov	r17, r24
 2f0:	06 2f       	mov	r16, r22

unsigned char max_x=20;

GoTo(x,y);
 2f2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <GoTo>
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
for (int i=x; i<max_x; i++)
 2fa:	e1 2e       	mov	r14, r17
 2fc:	ff 24       	eor	r15, r15
 2fe:	84 ec       	ldi	r24, 0xC4	; 196
 300:	c8 2e       	mov	r12, r24
 302:	89 e0       	ldi	r24, 0x09	; 9
 304:	d8 2e       	mov	r13, r24
 306:	07 c0       	rjmp	.+14     	; 0x316 <clearLine+0x38>
{
lcd_data_write(0x20);
 308:	80 e2       	ldi	r24, 0x20	; 32
 30a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_data_write>
 30e:	c6 01       	movw	r24, r12
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <clearLine+0x32>
 314:	21 96       	adiw	r28, 0x01	; 1
void clearLine(unsigned char x, unsigned char y){

unsigned char max_x=20;

GoTo(x,y);
for (int i=x; i<max_x; i++)
 316:	ce 01       	movw	r24, r28
 318:	8e 0d       	add	r24, r14
 31a:	9f 1d       	adc	r25, r15
 31c:	44 97       	sbiw	r24, 0x14	; 20
 31e:	a4 f3       	brlt	.-24     	; 0x308 <clearLine+0x2a>
{
lcd_data_write(0x20);
_delay_ms(1);
}
GoTo(x,y);
 320:	81 2f       	mov	r24, r17
 322:	60 2f       	mov	r22, r16
 324:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <GoTo>
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	df 90       	pop	r13
 336:	cf 90       	pop	r12
 338:	08 95       	ret

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
