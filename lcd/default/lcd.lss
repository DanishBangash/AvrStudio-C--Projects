
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000083  00000000  00000000  0000097d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005aa  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017b  00000000  00000000  00000faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000142  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_nibble_transfer>:
 lcd_nibble_transfer(d<<4);   //lsn);
 
   } // end lcd_transfer()
void lcd_nibble_transfer( unsigned char d )  
    { 
     lcd_port|= (1<<PA3);
  6c:	db 9a       	sbi	0x1b, 3	; 27
	 asm volatile("NOP");   // Slow down timing 100 nS
  6e:	00 00       	nop
   	lcd_port= (lcd_port & 0x0f)| (d &0xf0);   //(always msn as 4 bit data bus)
  70:	9b b3       	in	r25, 0x1b	; 27
  72:	80 7f       	andi	r24, 0xF0	; 240
  74:	9f 70       	andi	r25, 0x0F	; 15
  76:	89 2b       	or	r24, r25
  78:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	88 ec       	ldi	r24, 0xC8	; 200
  7c:	8a 95       	dec	r24
  7e:	f1 f7       	brne	.-4      	; 0x7c <lcd_nibble_transfer+0x10>
  	_delay_us(60); // Slow down  60 us
	lcd_port &= ~(1<<PA3);
  80:	db 98       	cbi	0x1b, 3	; 27
  82:	88 ec       	ldi	r24, 0xC8	; 200
  84:	8a 95       	dec	r24
  86:	f1 f7       	brne	.-4      	; 0x84 <lcd_nibble_transfer+0x18>
_delay_us(60);
   } // end lcd_nibble_transfer()
  88:	08 95       	ret

0000008a <lcd_transfer>:
 //Low level functions
// Write to the lcd data bus - generate E pulse 

void lcd_transfer (unsigned char d)

   {
  8a:	1f 93       	push	r17
  8c:	18 2f       	mov	r17, r24
	 lcd_port|= (1<<PA3);
  8e:	db 9a       	sbi	0x1b, 3	; 27
	  asm volatile("NOP");  // Slow down timing 100 nS
  90:	00 00       	nop
     asm volatile("NOP"); // Slow down timing 100 nS
  92:	00 00       	nop
       lcd_nibble_transfer(d);   //(msn)
  94:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_nibble_transfer>
 
//	 asm volatile("NOP");   // Slow down timing 100 nS	 
	 	asm volatile("NOP");   // Slow down timing 100 nS
  98:	00 00       	nop
		lcd_port |= (1<<PA3);
  9a:	db 9a       	sbi	0x1b, 3	; 27

 lcd_nibble_transfer(d<<4);   //lsn);
  9c:	81 2f       	mov	r24, r17
  9e:	82 95       	swap	r24
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_nibble_transfer>
 
   } // end lcd_transfer()
  a6:	1f 91       	pop	r17
  a8:	08 95       	ret

000000aa <lcd_data_write>:


void lcd_data_write(unsigned char d)

   {
   lcd_direction &= 0xfc;
  aa:	9a b3       	in	r25, 0x1a	; 26
  ac:	9c 7f       	andi	r25, 0xFC	; 252
  ae:	9a bb       	out	0x1a, r25	; 26
   lcd_port|=(1<<PA2);	//rs=1 when writing data
  b0:	da 9a       	sbi	0x1b, 2	; 27
   
  asm volatile("NOP");   // Slow down timing 100 nS
  b2:	00 00       	nop
   asm volatile("NOP");   // Slow down timing 100 nS
  b4:	00 00       	nop

   lcd_transfer(d); 
  b6:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_transfer>
   } // end lcd_data_write()
  ba:	08 95       	ret

000000bc <lcd_cmd_write>:
// Medium level functions 
// Select RS / RW mode and call lower level funtion to complete the transfer

void lcd_cmd_write(unsigned char cmd)
   { 
    lcd_direction &= 0xfc;
  bc:	9a b3       	in	r25, 0x1a	; 26
  be:	9c 7f       	andi	r25, 0xFC	; 252
  c0:	9a bb       	out	0x1a, r25	; 26
     //lcd_RS=0;
  lcd_port &= ~(1<<PA2);
  c2:	da 98       	cbi	0x1b, 2	; 27
 asm volatile("NOP");  // Slow down timing 100 nS
  c4:	00 00       	nop
   asm volatile("NOP");   // Slow down timing 100 nS
  c6:	00 00       	nop
   lcd_transfer(cmd);
  c8:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_transfer>
   } // end lcd_cmd_write()
  cc:	08 95       	ret

000000ce <lcd_init>:
#include <stdio.h> 

#include "LCD.h"    //header file

void lcd_init() {   // Works like a constructor
lcd_direction |= 0xfc;      //	set port A a as output bit 7 downto 2
  ce:	8a b3       	in	r24, 0x1a	; 26
  d0:	8c 6f       	ori	r24, 0xFC	; 252
  d2:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	98 e0       	ldi	r25, 0x08	; 8
  d8:	ad e3       	ldi	r26, 0x3D	; 61
  da:	81 50       	subi	r24, 0x01	; 1
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	a0 40       	sbci	r26, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <lcd_init+0xc>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_init+0x16>
  e4:	00 00       	nop
_delay_ms(2000);      //power on delay
	lcd_port &= ~((1<<PA3) | (1<<PA2));        // EN=0, RS=0
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	83 7f       	andi	r24, 0xF3	; 243
  ea:	8b bb       	out	0x1b, r24	; 27
   lcd_nibble_transfer(SET_FUNCTION);
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_nibble_transfer>
  f2:	af e5       	ldi	r26, 0x5F	; 95
  f4:	ba ee       	ldi	r27, 0xEA	; 234
  f6:	11 97       	sbiw	r26, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_init+0x28>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_init+0x2e>
  fc:	00 00       	nop
   _delay_ms(24);
   lcd_nibble_transfer(SET_FUNCTION); 
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_nibble_transfer>
 104:	8f e5       	ldi	r24, 0x5F	; 95
 106:	9a ee       	ldi	r25, 0xEA	; 234
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_init+0x3a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_init+0x40>
 10e:	00 00       	nop
_delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION);
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_nibble_transfer>
 116:	af e5       	ldi	r26, 0x5F	; 95
 118:	ba ee       	ldi	r27, 0xEA	; 234
 11a:	11 97       	sbiw	r26, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_init+0x4c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_init+0x52>
 120:	00 00       	nop
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION);
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_nibble_transfer>
 128:	8f e5       	ldi	r24, 0x5F	; 95
 12a:	9a ee       	ldi	r25, 0xEA	; 234
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x5e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0x64>
 132:	00 00       	nop
   _delay_ms(24);
   lcd_cmd_write(SET_FUNCTION+LN2_BIT);                 // Function set: 0x28  2 lines
 134:	88 e2       	ldi	r24, 0x28	; 40
 136:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_cmd_write>
 13a:	a7 e8       	ldi	r26, 0x87	; 135
 13c:	b3 e1       	ldi	r27, 0x13	; 19
 13e:	11 97       	sbiw	r26, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x70>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x76>
 144:	00 00       	nop
_delay_ms(2);
    lcd_cmd_write(SET_DISPLAY);	           //display off
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_cmd_write>
 14c:	87 e8       	ldi	r24, 0x87	; 135
 14e:	93 e1       	ldi	r25, 0x13	; 19
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_init+0x82>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_init+0x88>
 156:	00 00       	nop
_delay_ms(2);	
	lcd_cmd_write(CLR_DISPLAY);       // Display clear: 0x01 clear data                 	 
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_cmd_write>
 15e:	a7 e8       	ldi	r26, 0x87	; 135
 160:	b3 e1       	ldi	r27, 0x13	; 19
 162:	11 97       	sbiw	r26, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x94>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_init+0x9a>
 168:	00 00       	nop
_delay_ms(2);                                              
   lcd_cmd_write(SET_ENTRY_MODE+INC_BIT);          //  +INC_BIT  // Entry mode set: shift cursor 1 position to right
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_cmd_write>
 170:	87 e8       	ldi	r24, 0x87	; 135
 172:	93 e1       	ldi	r25, 0x13	; 19
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_init+0xa6>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_init+0xac>
 17a:	00 00       	nop
_delay_ms(2);
    lcd_cmd_write(SET_DISPLAY+ON_BIT+CUR_BIT+BLK_BIT);     //+CUR_BIT+BLK_BIT);   Display ON/OFF control: 0x0f
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_cmd_write>
 182:	a7 e8       	ldi	r26, 0x87	; 135
 184:	b3 e1       	ldi	r27, 0x13	; 19
 186:	11 97       	sbiw	r26, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0xb8>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0xbe>
 18c:	00 00       	nop
_delay_ms(2);	
lcd_cmd_write(RTN_HOME);
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_cmd_write>
 194:	87 e8       	ldi	r24, 0x87	; 135
 196:	93 e1       	ldi	r25, 0x13	; 19
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_init+0xca>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_init+0xd0>
 19e:	00 00       	nop
_delay_ms(2);
  
    } // end lcd_init()
 1a0:	08 95       	ret

000001a2 <main>:
  	_delay_us(60); // Slow down  60 us
	lcd_port &= ~(1<<PA3);
_delay_us(60);
   } // end lcd_nibble_transfer()
   int main (){
   lcd_cmd_write(0x02);       //cursor home
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_cmd_write>

lcd_cmd_write(0x0c);       //cursor off
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_cmd_write>
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <main+0xc>

000001b0 <lcd_wait>:

   { 
   unsigned int i;

   for ( i = 0 ; i < count ; i++ );    //4 cycles per count  
   } // end lcd_wait()
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
