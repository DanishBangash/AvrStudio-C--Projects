
LCD0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000390  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800072  00800072  00000436  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000154  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000901  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003a0  00000000  00000000  0000161e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006d7  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  00002098  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001bd  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002ad  00000000  00000000  00002355  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000070  00000000  00000000  00002602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c1 01 	call	0x382	; 0x382 <main>
  8a:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_nibble_transfer>:


void lcd_nibble_transfer( unsigned char d )  
 
   { 
     lcd_port|= (1<<lcd_E);
  92:	db 9a       	sbi	0x1b, 3	; 27
	 asm volatile("NOP");   // Slow down timing 100 nS
  94:	00 00       	nop
   	lcd_port= (lcd_port & 0x0f)| (d &0xf0);   //(always msn as 4 bit data bus)
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	9f 70       	andi	r25, 0x0F	; 15
  9c:	89 2b       	or	r24, r25
  9e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	88 ec       	ldi	r24, 0xC8	; 200
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_nibble_transfer+0x10>
  
  	
 	 //lcd_wait(8);   // Slow down  58 us
_delay_us(60);
	lcd_port &= ~(1<<lcd_E);
  a6:	db 98       	cbi	0x1b, 3	; 27
  a8:	88 ec       	ldi	r24, 0xC8	; 200
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_nibble_transfer+0x18>
//	lcd_wait(8);
_delay_us(60);
   } // end lcd_nibble_transfer()
  ae:	08 95       	ret

000000b0 <lcd_transfer>:
// Low level functions
// Write to the lcd data bus - generate E pulse 

void lcd_transfer (unsigned char d)

   {
  b0:	1f 93       	push	r17
  b2:	18 2f       	mov	r17, r24
	 lcd_port|= (1<<lcd_E);
  b4:	db 9a       	sbi	0x1b, 3	; 27
	  asm volatile("NOP");  // Slow down timing 100 nS
  b6:	00 00       	nop
     asm volatile("NOP"); // Slow down timing 100 nS
  b8:	00 00       	nop
 lcd_nibble_transfer(d);   //(msn)
  ba:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 
//	 asm volatile("NOP");   // Slow down timing 100 nS	 
	 	asm volatile("NOP");   // Slow down timing 100 nS
  be:	00 00       	nop
		lcd_port |= (1<<lcd_E);
  c0:	db 9a       	sbi	0x1b, 3	; 27

 lcd_nibble_transfer(d<<4);   //lsn);
  c2:	81 2f       	mov	r24, r17
  c4:	82 95       	swap	r24
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 
   } // end lcd_transfer()
  cc:	1f 91       	pop	r17
  ce:	08 95       	ret

000000d0 <lcd_data_write>:


void lcd_data_write(unsigned char d)

   {
   lcd_direction |= 0xfc;
  d0:	9a b3       	in	r25, 0x1a	; 26
  d2:	9c 6f       	ori	r25, 0xFC	; 252
  d4:	9a bb       	out	0x1a, r25	; 26
   lcd_port|=(1<<lcd_RS);				//rs=1 when writing data
  d6:	da 9a       	sbi	0x1b, 2	; 27
   
  // lcd_port &= ~(1<<lcd_RW);
    asm volatile("NOP");   // Slow down timing 100 nS
  d8:	00 00       	nop
   	asm volatile("NOP");   // Slow down timing 100 nS
  da:	00 00       	nop

   lcd_transfer(d); 
  dc:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_transfer>
   } // end lcd_data_write()
  e0:	08 95       	ret

000000e2 <lcd_cmd_write>:
// Medium level functions 
// Select RS / RW mode and call lower level funtion to complete the transfer

void lcd_cmd_write(unsigned char cmd)
   { 
    lcd_direction |= 0xfc;
  e2:	9a b3       	in	r25, 0x1a	; 26
  e4:	9c 6f       	ori	r25, 0xFC	; 252
  e6:	9a bb       	out	0x1a, r25	; 26
     //lcd_RS=0;
  lcd_port &= ~(1<<lcd_RS);
  e8:	da 98       	cbi	0x1b, 2	; 27
 
  // lcd_port &= ~(1<<lcd_RW);
  asm volatile("NOP");  // Slow down timing 100 nS
  ea:	00 00       	nop
   asm volatile("NOP");   // Slow down timing 100 nS
  ec:	00 00       	nop
   lcd_transfer(cmd);
  ee:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_transfer>
   } // end lcd_cmd_write()
  f2:	08 95       	ret

000000f4 <lcd_init>:
void lcd_init()    // Works like a constructor
   
   {

   // Power on delay
	lcd_direction |= 0xfc;							//	set port a as output
  f4:	8a b3       	in	r24, 0x1a	; 26
  f6:	8c 6f       	ori	r24, 0xFC	; 252
  f8:	8a bb       	out	0x1a, r24	; 26
   lcd_wait( 20000 );                                   // Power on wait 
   lcd_wait( 20000 );
	lcd_port &= ~((1<<lcd_E) | (1<<lcd_RS)); // EN=0, RS=0
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	83 7f       	andi	r24, 0xF3	; 243
  fe:	8b bb       	out	0x1b, r24	; 27
//	lcd_port &= ~(1<<lcd_RW);               // Set RW = 0 in case it is connected
 
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f e5       	ldi	r24, 0x5F	; 95
 108:	9a ee       	ldi	r25, 0xEA	; 234
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_init+0x16>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_init+0x1c>
 110:	00 00       	nop
   //lcd_wait(longdelay );  						 // wait 24 ms
   _delay_ms(24);
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 112:	80 e3       	ldi	r24, 0x30	; 48
 114:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 118:	8f e5       	ldi	r24, 0x5F	; 95
 11a:	9a ee       	ldi	r25, 0xEA	; 234
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_init+0x28>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_init+0x2e>
 122:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 124:	80 e3       	ldi	r24, 0x30	; 48
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 12a:	8f e5       	ldi	r24, 0x5F	; 95
 12c:	9a ee       	ldi	r25, 0xEA	; 234
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0x3a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_init+0x40>
 134:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION);
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 13c:	8f e5       	ldi	r24, 0x5F	; 95
 13e:	9a ee       	ldi	r25, 0xEA	; 234
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x4c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_init+0x52>
 146:	00 00       	nop
  // lcd_wait(longdelay);
   _delay_ms(24);
   lcd_cmd_write(SET_FUNCTION+LN2_BIT);                 // Function set: 0x28  2 lines
 148:	88 e2       	ldi	r24, 0x28	; 40
 14a:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 14e:	87 e8       	ldi	r24, 0x87	; 135
 150:	93 e1       	ldi	r25, 0x13	; 19
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init+0x5e>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_init+0x64>
 158:	00 00       	nop
  // lcd_wait(WAIT_15m);                              // Wait 39 uS
 _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY);						//display off
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 160:	87 e8       	ldi	r24, 0x87	; 135
 162:	93 e1       	ldi	r25, 0x13	; 19
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x70>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_init+0x76>
 16a:	00 00       	nop
 //lcd_wait(WAIT_15m);
_delay_ms(2);	
	lcd_cmd_write(CLR_DISPLAY);       // Display clear: 0x01 clear data                 	 
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 172:	87 e8       	ldi	r24, 0x87	; 135
 174:	93 e1       	ldi	r25, 0x13	; 19
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x82>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_init+0x88>
 17c:	00 00       	nop
	
  // lcd_wait(WAIT_15m);                // 1.53 mS  
     _delay_ms(2);                  
                               

   lcd_cmd_write(SET_ENTRY_MODE+INC_BIT);          //  +INC_BIT  // Entry mode set: shift cursor 1 position to right
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 184:	87 e8       	ldi	r24, 0x87	; 135
 186:	93 e1       	ldi	r25, 0x13	; 19
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x94>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init+0x9a>
 18e:	00 00       	nop
  //   lcd_wait(WAIT_15m);      
  _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY+ON_BIT+CUR_BIT+BLK_BIT); //+CUR_BIT+BLK_BIT);   Display ON/OFF control: 0x0f
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 196:	87 e8       	ldi	r24, 0x87	; 135
 198:	93 e1       	ldi	r25, 0x13	; 19
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0xa6>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0xac>
 1a0:	00 00       	nop
  //   lcd_wait(WAIT_15m);                               // Wait 39 uS                      // 1.53 mS     
_delay_ms(2);	
	lcd_cmd_write(RTN_HOME);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 1a8:	87 e8       	ldi	r24, 0x87	; 135
 1aa:	93 e1       	ldi	r25, 0x13	; 19
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0xb8>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_init+0xbe>
 1b2:	00 00       	nop
  //lcd_wait(WAIT_15m);                            // 1.53 mS  
_delay_ms(2);
  
   } // end lcd_init()
 1b4:	08 95       	ret

000001b6 <lcdClear>:


//clear the display
void lcdClear(void) {

lcd_cmd_write(CLR_DISPLAY);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
//lcd_wait(WAIT_15m);
lcd_cmd_write(CLR_DISPLAY+RTN_HOME);
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
//lcd_wait(WAIT_15m);


}
 1c2:	08 95       	ret

000001c4 <LCDPutString>:




//! write a zero-terminated ASCII string to the display
void LCDPutString(char *str) {
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	e8 2e       	mov	r14, r24
 1ce:	e7 01       	movw	r28, r14
 1d0:	7e 01       	movw	r14, r28
 1d2:	f9 2e       	mov	r15, r25
 1d4:	e7 01       	movw	r28, r14
   char c;
for (; (c = *str) != 0; str++) lcd_data_write(c);
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <LCDPutString+0x18>
 1d8:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_data_write>
 1dc:	89 91       	ld	r24, Y+
 1de:	88 23       	and	r24, r24
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <LCDPutString+0x14>

  
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	08 95       	ret

000001ec <lcd_wait>:
   for ( i = 0 ; i < count ; i++ );    //4 cycles per count
    // end lcd_wait()

  

   } // end lcd_transfer()
 1ec:	08 95       	ret

000001ee <GoTo>:

//goto x-position and y-line called by parameters x, y used in main() and internally LCDPutChar()

void GoTo(unsigned char x, unsigned char y){

switch (y) {
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	49 f0       	breq	.+18     	; 0x204 <GoTo+0x16>
 1f2:	61 30       	cpi	r22, 0x01	; 1
 1f4:	28 f0       	brcs	.+10     	; 0x200 <GoTo+0x12>
 1f6:	62 30       	cpi	r22, 0x02	; 2
 1f8:	39 f0       	breq	.+14     	; 0x208 <GoTo+0x1a>
 1fa:	63 30       	cpi	r22, 0x03	; 3
 1fc:	61 f4       	brne	.+24     	; 0x216 <GoTo+0x28>
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <GoTo+0x22>
case 0: 

 lcd_cmd_write(SET_DRAM_ADDR+x);
 200:	80 58       	subi	r24, 0x80	; 128
 202:	03 c0       	rjmp	.+6      	; 0x20a <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
 break;

 case 1: 

lcd_cmd_write(SET_DRAM_ADDR+line_1+x);
 204:	80 54       	subi	r24, 0x40	; 64
 206:	01 c0       	rjmp	.+2      	; 0x20a <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
break;

case 2:
lcd_cmd_write(SET_DRAM_ADDR+line_2+x);
 208:	8c 56       	subi	r24, 0x6C	; 108
 20a:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 20e:	08 95       	ret
 lcd_wait(WAIT_15m);  
break;

case 3:
lcd_cmd_write(SET_DRAM_ADDR+line_3+x);
 210:	8c 52       	subi	r24, 0x2C	; 44
 212:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 216:	08 95       	ret

00000218 <clearLine>:
//lcd_wait(WAIT_15m);


}

void clearLine(unsigned char x, unsigned char y){
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	18 2f       	mov	r17, r24
 222:	06 2f       	mov	r16, r22

unsigned char max_x=20;

GoTo(x,y);
 224:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GoTo>
for (int i=x; i<max_x; i++)
 228:	c1 2f       	mov	r28, r17
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	0a c0       	rjmp	.+20     	; 0x242 <clearLine+0x2a>
{
lcd_data_write(0x20);
 22e:	80 e2       	ldi	r24, 0x20	; 32
 230:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_data_write>
 234:	83 ec       	ldi	r24, 0xC3	; 195
 236:	99 e0       	ldi	r25, 0x09	; 9
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <clearLine+0x20>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <clearLine+0x26>
 23e:	00 00       	nop
void clearLine(unsigned char x, unsigned char y){

unsigned char max_x=20;

GoTo(x,y);
for (int i=x; i<max_x; i++)
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	c4 31       	cpi	r28, 0x14	; 20
 244:	d1 05       	cpc	r29, r1
 246:	9c f3       	brlt	.-26     	; 0x22e <clearLine+0x16>
{
lcd_data_write(0x20);
_delay_ms(1);
}
GoTo(x,y);
 248:	81 2f       	mov	r24, r17
 24a:	60 2f       	mov	r22, r16
 24c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GoTo>
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <keypad_init>:

find_Key();
}
void keypad_init()
{
		DDRA|=0x03;
 25a:	8a b3       	in	r24, 0x1a	; 26
 25c:	83 60       	ori	r24, 0x03	; 3
 25e:	8a bb       	out	0x1a, r24	; 26
		DDRC&=0x3F;
 260:	84 b3       	in	r24, 0x14	; 20
 262:	8f 73       	andi	r24, 0x3F	; 63
 264:	84 bb       	out	0x14, r24	; 20
		lcd_init();
 266:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_init>

}
 26a:	08 95       	ret

0000026c <find_Key>:

void find_Key(){
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	00 d0       	rcall	.+0      	; 0x272 <find_Key+0x6>
 272:	0f 92       	push	r0
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
unsigned volatile char col;
unsigned volatile  char oldcol;
unsigned volatile char res;
				
				//_delay_ms(20);
				oldcol=(PINC&0xC0);
 278:	83 b3       	in	r24, 0x13	; 19
 27a:	80 7c       	andi	r24, 0xC0	; 192
 27c:	8a 83       	std	Y+2, r24	; 0x02
 27e:	8f e4       	ldi	r24, 0x4F	; 79
 280:	93 ec       	ldi	r25, 0xC3	; 195
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <find_Key+0x16>
 286:	00 c0       	rjmp	.+0      	; 0x288 <find_Key+0x1c>
 288:	00 00       	nop
				_delay_ms(20);
				col=(PINC&0xC0);
 28a:	83 b3       	in	r24, 0x13	; 19
 28c:	80 7c       	andi	r24, 0xC0	; 192
 28e:	89 83       	std	Y+1, r24	; 0x01
				if(col==oldcol){
 290:	99 81       	ldd	r25, Y+1	; 0x01
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	98 17       	cp	r25, r24
 296:	09 f0       	breq	.+2      	; 0x29a <find_Key+0x2e>
 298:	41 c0       	rjmp	.+130    	; 0x31c <find_Key+0xb0>
			switch(col)
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	80 34       	cpi	r24, 0x40	; 64
 29e:	79 f0       	breq	.+30     	; 0x2be <find_Key+0x52>
 2a0:	80 38       	cpi	r24, 0x80	; 128
 2a2:	c1 f0       	breq	.+48     	; 0x2d4 <find_Key+0x68>
 2a4:	88 23       	and	r24, r24
 2a6:	09 f5       	brne	.+66     	; 0x2ea <find_Key+0x7e>
			{
			case 0x00:
			res=keypad[row][3];
 2a8:	e0 91 97 00 	lds	r30, 0x0097
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	ee 0f       	add	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	ef 59       	subi	r30, 0x9F	; 159
 2b8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ba:	83 81       	ldd	r24, Z+3	; 0x03
 2bc:	20 c0       	rjmp	.+64     	; 0x2fe <find_Key+0x92>
			break;

			case 0x40:
			res=keypad[row][1];
 2be:	e0 91 97 00 	lds	r30, 0x0097
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	ef 59       	subi	r30, 0x9F	; 159
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	81 81       	ldd	r24, Z+1	; 0x01
 2d2:	15 c0       	rjmp	.+42     	; 0x2fe <find_Key+0x92>
			break;

			case 0x80:
			res=keypad[row][2];
 2d4:	e0 91 97 00 	lds	r30, 0x0097
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	ef 59       	subi	r30, 0x9F	; 159
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	82 81       	ldd	r24, Z+2	; 0x02
 2e8:	0a c0       	rjmp	.+20     	; 0x2fe <find_Key+0x92>
			break;
				
			default:
			res=keypad[row][0];	
 2ea:	e0 91 97 00 	lds	r30, 0x0097
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	ef 59       	subi	r30, 0x9F	; 159
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	80 81       	ld	r24, Z
 2fe:	8b 83       	std	Y+3, r24	; 0x03
		//if(res=='C')lcd_cmd_write(CLR_DISPLAY);
	//	else{
		/*	if((res=='F')||(res=='E')||(res=='D')||(res=='C')){
			_delay_ms(10);
			}*/
			while(PINB&(1<<PB2));
 300:	b2 99       	sbic	0x16, 2	; 22
 302:	fe cf       	rjmp	.-4      	; 0x300 <find_Key+0x94>

			lcd_data_write(res);
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_data_write>
 30a:	8f e1       	ldi	r24, 0x1F	; 31
 30c:	9f eb       	ldi	r25, 0xBF	; 191
 30e:	a2 e0       	ldi	r26, 0x02	; 2
 310:	81 50       	subi	r24, 0x01	; 1
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	a0 40       	sbci	r26, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <find_Key+0xa4>
 318:	00 c0       	rjmp	.+0      	; 0x31a <find_Key+0xae>
 31a:	00 00       	nop
			_delay_ms(90);
//}
			 
	}
}
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	08 95       	ret

00000328 <scan_keypad>:
							  {'4','5','6','E'},
							  {'7','8','9','D'},
							  {'A','0','B','C'} };

void scan_keypad(){
int i=0;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
			break;

			case 1:
			PORTA&=0xFC;
			PORTA|=0x01;
			row=2;
 32c:	52 e0       	ldi	r21, 0x02	; 2
			break;

			case 2:
			PORTA&=0xFC;
			PORTA|=0x02;
			row=1;
 32e:	41 e0       	ldi	r20, 0x01	; 1

{
	switch(i)
	{ case 0:
			PORTA&=0xFC;
			row=3;
 330:	33 e0       	ldi	r19, 0x03	; 3
							  {'A','0','B','C'} };

void scan_keypad(){
int i=0;

while(!(PINB&(1<<PB2)))
 332:	22 c0       	rjmp	.+68     	; 0x378 <scan_keypad+0x50>

{
	switch(i)
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	91 05       	cpc	r25, r1
 338:	59 f0       	breq	.+22     	; 0x350 <scan_keypad+0x28>
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	91 05       	cpc	r25, r1
 33e:	79 f0       	breq	.+30     	; 0x35e <scan_keypad+0x36>
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	a1 f4       	brne	.+40     	; 0x36c <scan_keypad+0x44>
	{ case 0:
			PORTA&=0xFC;
 344:	2b b3       	in	r18, 0x1b	; 27
 346:	2c 7f       	andi	r18, 0xFC	; 252
 348:	2b bb       	out	0x1b, r18	; 27
			row=3;
 34a:	30 93 97 00 	sts	0x0097, r19
			break;
 34e:	13 c0       	rjmp	.+38     	; 0x376 <scan_keypad+0x4e>

			case 1:
			PORTA&=0xFC;
 350:	2b b3       	in	r18, 0x1b	; 27
 352:	2c 7f       	andi	r18, 0xFC	; 252
 354:	2b bb       	out	0x1b, r18	; 27
			PORTA|=0x01;
 356:	d8 9a       	sbi	0x1b, 0	; 27
			row=2;
 358:	50 93 97 00 	sts	0x0097, r21
			break;
 35c:	0c c0       	rjmp	.+24     	; 0x376 <scan_keypad+0x4e>

			case 2:
			PORTA&=0xFC;
 35e:	2b b3       	in	r18, 0x1b	; 27
 360:	2c 7f       	andi	r18, 0xFC	; 252
 362:	2b bb       	out	0x1b, r18	; 27
			PORTA|=0x02;
 364:	d9 9a       	sbi	0x1b, 1	; 27
			row=1;
 366:	40 93 97 00 	sts	0x0097, r20
			break;
 36a:	05 c0       	rjmp	.+10     	; 0x376 <scan_keypad+0x4e>

			default:
		//	PORTA&=0xFC;
			PORTA|=0x03;
 36c:	2b b3       	in	r18, 0x1b	; 27
 36e:	23 60       	ori	r18, 0x03	; 3
 370:	2b bb       	out	0x1b, r18	; 27
			row=0;		
 372:	10 92 97 00 	sts	0x0097, r1
			break;
		
	}
	i++;
 376:	01 96       	adiw	r24, 0x01	; 1
							  {'A','0','B','C'} };

void scan_keypad(){
int i=0;

while(!(PINB&(1<<PB2)))
 378:	b2 9b       	sbis	0x16, 2	; 22
 37a:	dc cf       	rjmp	.-72     	; 0x334 <scan_keypad+0xc>
		
	}
	i++;
	}

find_Key();
 37c:	0e 94 36 01 	call	0x26c	; 0x26c <find_Key>
}
 380:	08 95       	ret

00000382 <main>:


int main(void)
{
//lcd_init();
keypad_init();  
 382:	0e 94 2d 01 	call	0x25a	; 0x25a <keypad_init>
//init();
//DDRB=0b00000000;
//PORTB=0b00000010;
//char lastkey=0;
while(1){
scan_keypad();
 386:	0e 94 94 01 	call	0x328	; 0x328 <scan_keypad>
 38a:	fd cf       	rjmp	.-6      	; 0x386 <main+0x4>

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
