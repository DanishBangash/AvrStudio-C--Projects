
LCD1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006c  00000000  00000000  00000939  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000302  00000000  00000000  000009a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014b  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031b  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000137  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  000012a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6f 00 	call	0xde	; 0xde <main>
  64:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Peek_A_Boo>:

 DataDir_MrLCDscrib =0xFF; 
}
void Peek_A_Boo()
{
 MrLCDsControl |= 1<<LightSwitch;
  6c:	db 9a       	sbi	0x1b, 3	; 27
 asm volatile ("nop");
  6e:	00 00       	nop
 asm volatile ("nop");
  70:	00 00       	nop
 MrLCDsControl &=~1<<LightSwitch;
  72:	8b b3       	in	r24, 0x1b	; 27
  74:	80 7f       	andi	r24, 0xF0	; 240
  76:	8b bb       	out	0x1b, r24	; 27
}
  78:	08 95       	ret

0000007a <check_if_MrLCD_isbusy>:
   {
   }
}
void check_if_MrLCD_isbusy()
{
 DataDir_MrLCDscrib = 0;
  7a:	1a ba       	out	0x1a, r1	; 26
 MrLCDsControl |= 1<<Readwrite;
  7c:	df 9a       	sbi	0x1b, 7	; 27
 MrLCDsControl &= ~1<<BiPolarMood;
  7e:	8b b3       	in	r24, 0x1b	; 27
  80:	88 7f       	andi	r24, 0xF8	; 248
  82:	8b bb       	out	0x1b, r24	; 27
 while( MrLCDscrib>= 0x80)
  84:	02 c0       	rjmp	.+4      	; 0x8a <check_if_MrLCD_isbusy+0x10>
 {
   Peek_A_Boo();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <Peek_A_Boo>
void check_if_MrLCD_isbusy()
{
 DataDir_MrLCDscrib = 0;
 MrLCDsControl |= 1<<Readwrite;
 MrLCDsControl &= ~1<<BiPolarMood;
 while( MrLCDscrib>= 0x80)
  8a:	df 99       	sbic	0x1b, 7	; 27
  8c:	fc cf       	rjmp	.-8      	; 0x86 <check_if_MrLCD_isbusy+0xc>
   Peek_A_Boo();
 }



 DataDir_MrLCDscrib =0xFF; 
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a bb       	out	0x1a, r24	; 26
}
  92:	08 95       	ret

00000094 <Send_A_Command>:
void Peek_A_Boo(void);
void Send_A_command(unsigned char command);
void Send_A_character(unsigned char character);

void Send_A_Command(unsigned char command)
{
  94:	df 93       	push	r29
  96:	cf 93       	push	r28
  98:	0f 92       	push	r0
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
 check_if_MrLCD_isbusy();
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	0e 94 3d 00 	call	0x7a	; 0x7a <check_if_MrLCD_isbusy>
 MrLCDscrib=command;
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	8b bb       	out	0x1b, r24	; 27
 MrLCDsControl &= ~ (1<<BiPolarMood);///1<<Readwrite|
  a8:	da 98       	cbi	0x1b, 2	; 27
 Peek_A_Boo();
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <Peek_A_Boo>
 MrLCDscrib = 0;
  ae:	1b ba       	out	0x1b, r1	; 27
}
  b0:	0f 90       	pop	r0
  b2:	cf 91       	pop	r28
  b4:	df 91       	pop	r29
  b6:	08 95       	ret

000000b8 <Send_A_character>:
 MrLCDsControl &=~1<<LightSwitch;
}


void Send_A_character(unsigned char character)
{
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	0f 92       	push	r0
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
check_if_MrLCD_isbusy();
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	0e 94 3d 00 	call	0x7a	; 0x7a <check_if_MrLCD_isbusy>
MrLCDscrib = character;
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	8b bb       	out	0x1b, r24	; 27
MrLCDsControl &= ~ (1<<Readwrite);
  cc:	df 98       	cbi	0x1b, 7	; 27
MrLCDsControl |=1<<BiPolarMood;
  ce:	da 9a       	sbi	0x1b, 2	; 27
 Peek_A_Boo();
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <Peek_A_Boo>
 MrLCDscrib = 0;
  d4:	1b ba       	out	0x1b, r1	; 27
}
  d6:	0f 90       	pop	r0
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <main>:
 Peek_A_Boo();
 MrLCDscrib = 0;
}
int main(void)
{  
   DataDir_MrLCDControl |=1<<LightSwitch |1<<BiPolarMood;//|1<<Readwrite 
  de:	8a b3       	in	r24, 0x1a	; 26
  e0:	8c 60       	ori	r24, 0x0C	; 12
  e2:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	85 ea       	ldi	r24, 0xA5	; 165
  e6:	9e e0       	ldi	r25, 0x0E	; 14
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0xa>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x10>
  ee:	00 00       	nop
   _delay_ms(15);
   
   Send_A_Command(0x38);
  f0:	88 e3       	ldi	r24, 0x38	; 56
  f2:	0e 94 4a 00 	call	0x94	; 0x94 <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	90 e1       	ldi	r25, 0x10	; 16
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x1a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x20>
   _delay_us(50);
  
   Send_A_Command(0b00001110);
  fe:	8e e0       	ldi	r24, 0x0E	; 14
 100:	0e 94 4a 00 	call	0x94	; 0x94 <Send_A_Command>
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x28>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x2e>
   _delay_us(50);
      
   Send_A_character(0x65); //
 10c:	85 e6       	ldi	r24, 0x65	; 101
 10e:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x77); //
 112:	87 e7       	ldi	r24, 0x77	; 119
 114:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x62); //
 118:	82 e6       	ldi	r24, 0x62	; 98
 11a:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x69); //
 11e:	89 e6       	ldi	r24, 0x69	; 105
 120:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
  Send_A_character(0x65); //
 124:	85 e6       	ldi	r24, 0x65	; 101
 126:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x48); //
 12a:	88 e4       	ldi	r24, 0x48	; 72
 12c:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x61); //
 130:	81 e6       	ldi	r24, 0x61	; 97
 132:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x63); //
 136:	83 e6       	ldi	r24, 0x63	; 99
 138:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x6B); //
 13c:	8b e6       	ldi	r24, 0x6B	; 107
 13e:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x2E); //
 142:	8e e2       	ldi	r24, 0x2E	; 46
 144:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x63); //
 148:	83 e6       	ldi	r24, 0x63	; 99
 14a:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x6F); //
 14e:	8f e6       	ldi	r24, 0x6F	; 111
 150:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   Send_A_character(0x6D); // 
 154:	8d e6       	ldi	r24, 0x6D	; 109
 156:	0e 94 5c 00 	call	0xb8	; 0xb8 <Send_A_character>
   
   Send_A_Command(0x01); //clear screen 0x01
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 4a 00 	call	0x94	; 0x94 <Send_A_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	83 ef       	ldi	r24, 0xF3	; 243
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x86>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x8c>
 16a:	00 00       	nop
 16c:	ff cf       	rjmp	.-2      	; 0x16c <main+0x8e>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
