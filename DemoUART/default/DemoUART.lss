
DemoUART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000168  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000005d  00000000  00000000  000008d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000123  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000bc  00000000  00000000  00000a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000193  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000be  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:
#include <avr/interrupt.h>
char data=0;

void init ()
{
DDRB |= 0x01; // bit 0 for output
  7c:	b8 9a       	sbi	0x17, 0	; 23
PORTB |= 0x01; /// LED is Off
  7e:	c0 9a       	sbi	0x18, 0	; 24
sei();
  80:	78 94       	sei
}
  82:	08 95       	ret

00000084 <init_uart>:

void init_uart(int baudrate)
{
UCSRB |=(1<<RXEN) | (1<<TXEN)|(1<<RXCIE);
  84:	2a b1       	in	r18, 0x0a	; 10
  86:	28 69       	ori	r18, 0x98	; 152
  88:	2a b9       	out	0x0a, r18	; 10
UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8 data bits and 1 stop bit 
  8a:	20 b5       	in	r18, 0x20	; 32
  8c:	26 68       	ori	r18, 0x86	; 134
  8e:	20 bd       	out	0x20, r18	; 32
UCSRA = (1<<U2X); // full duplex
  90:	22 e0       	ldi	r18, 0x02	; 2
  92:	2b b9       	out	0x0b, r18	; 11

UBRRH = (char) ( baudrate>>8); // move the upper byte in the integer for fit 8 bits in 16 bits 
  94:	29 2f       	mov	r18, r25
  96:	33 27       	eor	r19, r19
  98:	27 fd       	sbrc	r18, 7
  9a:	3a 95       	dec	r19
  9c:	20 bd       	out	0x20, r18	; 32
UBRRL=(char) baudrate;
  9e:	89 b9       	out	0x09, r24	; 9

}
  a0:	08 95       	ret

000000a2 <uart_transmit>:
 void uart_transmit(char Abyte)
{
 while(!(UCSRA & (1<<UDRE)));
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <uart_transmit>
 UDR= Abyte;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <main>:

 
 int main()
 {
  init();
  aa:	0e 94 3e 00 	call	0x7c	; 0x7c <init>

  init_uart( 0x40);
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 42 00 	call	0x84	; 0x84 <init_uart>
  while (1)
  {
    if (data=='a'){
  b6:	80 91 60 00 	lds	r24, 0x0060
  ba:	81 36       	cpi	r24, 0x61	; 97
  bc:	41 f4       	brne	.+16     	; 0xce <main+0x24>
	PORTB &=0x00; // light up the LED
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	18 ba       	out	0x18, r1	; 24
    uart_transmit(data); // to transmit data into terminal
  c2:	81 e6       	ldi	r24, 0x61	; 97
  c4:	0e 94 51 00 	call	0xa2	; 0xa2 <uart_transmit>
	data=0; //// data clears to zero
  c8:	10 92 60 00 	sts	0x0060, r1
  cc:	f4 cf       	rjmp	.-24     	; 0xb6 <main+0xc>
	}
	else
	PORTB |=0x01;
  ce:	c0 9a       	sbi	0x18, 0	; 24
  d0:	f2 cf       	rjmp	.-28     	; 0xb6 <main+0xc>

000000d2 <__vector_13>:
  
  }
 }
ISR(USART_RXC_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
 data = UDR;
  de:	8c b1       	in	r24, 0x0c	; 12
  e0:	80 93 60 00 	sts	0x0060, r24

}
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
