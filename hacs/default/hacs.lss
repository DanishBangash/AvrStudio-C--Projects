
hacs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000bd2  00000c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  008000a0  008000a0  00000ca6  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002d9  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000014f8  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000979  00000000  00000000  000033b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001575  00000000  00000000  00003d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000230  00000000  00000000  000052a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000042a  00000000  00000000  000054d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ade  00000000  00000000  000058fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001a8  00000000  00000000  000063dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  00006584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3d       	cpi	r26, 0xDB	; 219
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
  8a:	0c 94 e7 05 	jmp	0xbce	; 0xbce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_nibble_transfer>:


void lcd_nibble_transfer( unsigned char d )  
 
   { 
     lcd_port|= (1<<lcd_E);
  92:	db 9a       	sbi	0x1b, 3	; 27
	 asm volatile("NOP");   // Slow down timing 100 nS
  94:	00 00       	nop
   	lcd_port= (lcd_port & 0x0f)| (d &0xf0);   //(always msn as 4 bit data bus)
  96:	9b b3       	in	r25, 0x1b	; 27
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	9f 70       	andi	r25, 0x0F	; 15
  9c:	89 2b       	or	r24, r25
  9e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	88 ec       	ldi	r24, 0xC8	; 200
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_nibble_transfer+0x10>
  
  	
 	 //lcd_wait(8);   // Slow down  58 us
_delay_us(60);
	lcd_port &= ~(1<<lcd_E);
  a6:	db 98       	cbi	0x1b, 3	; 27
  a8:	88 ec       	ldi	r24, 0xC8	; 200
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_nibble_transfer+0x18>
//	lcd_wait(8);
_delay_us(60);
   } // end lcd_nibble_transfer()
  ae:	08 95       	ret

000000b0 <lcd_transfer>:
// Low level functions
// Write to the lcd data bus - generate E pulse 

void lcd_transfer (unsigned char d)

   {
  b0:	1f 93       	push	r17
  b2:	18 2f       	mov	r17, r24
	 lcd_port|= (1<<lcd_E);
  b4:	db 9a       	sbi	0x1b, 3	; 27
	  asm volatile("NOP");  // Slow down timing 100 nS
  b6:	00 00       	nop
     asm volatile("NOP"); // Slow down timing 100 nS
  b8:	00 00       	nop
 lcd_nibble_transfer(d);   //(msn)
  ba:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 
//	 asm volatile("NOP");   // Slow down timing 100 nS	 
	 	asm volatile("NOP");   // Slow down timing 100 nS
  be:	00 00       	nop
		lcd_port |= (1<<lcd_E);
  c0:	db 9a       	sbi	0x1b, 3	; 27

 lcd_nibble_transfer(d<<4);   //lsn);
  c2:	81 2f       	mov	r24, r17
  c4:	82 95       	swap	r24
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 
   } // end lcd_transfer()
  cc:	1f 91       	pop	r17
  ce:	08 95       	ret

000000d0 <lcd_data_write>:


void lcd_data_write(unsigned char d)

   {
   lcd_direction |= 0xfc;
  d0:	9a b3       	in	r25, 0x1a	; 26
  d2:	9c 6f       	ori	r25, 0xFC	; 252
  d4:	9a bb       	out	0x1a, r25	; 26
   lcd_port|=(1<<lcd_RS);				//rs=1 when writing data
  d6:	da 9a       	sbi	0x1b, 2	; 27
   
  // lcd_port &= ~(1<<lcd_RW);
    asm volatile("NOP");   // Slow down timing 100 nS
  d8:	00 00       	nop
   	asm volatile("NOP");   // Slow down timing 100 nS
  da:	00 00       	nop

   lcd_transfer(d); 
  dc:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_transfer>
   } // end lcd_data_write()
  e0:	08 95       	ret

000000e2 <lcd_cmd_write>:
// Medium level functions 
// Select RS / RW mode and call lower level funtion to complete the transfer

void lcd_cmd_write(unsigned char cmd)
   { 
    lcd_direction |= 0xfc;
  e2:	9a b3       	in	r25, 0x1a	; 26
  e4:	9c 6f       	ori	r25, 0xFC	; 252
  e6:	9a bb       	out	0x1a, r25	; 26
     //lcd_RS=0;
  lcd_port &= ~(1<<lcd_RS);
  e8:	da 98       	cbi	0x1b, 2	; 27
 
  // lcd_port &= ~(1<<lcd_RW);
  asm volatile("NOP");  // Slow down timing 100 nS
  ea:	00 00       	nop
   asm volatile("NOP");   // Slow down timing 100 nS
  ec:	00 00       	nop
   lcd_transfer(cmd);
  ee:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_transfer>
   } // end lcd_cmd_write()
  f2:	08 95       	ret

000000f4 <lcd_init>:
void lcd_init()    // Works like a constructor
   
   {

   // Power on delay
	lcd_direction |= 0xfc;							//	set port a as output
  f4:	8a b3       	in	r24, 0x1a	; 26
  f6:	8c 6f       	ori	r24, 0xFC	; 252
  f8:	8a bb       	out	0x1a, r24	; 26
   lcd_wait( 20000 );                                   // Power on wait 
   lcd_wait( 20000 );
	lcd_port &= ~((1<<lcd_E) | (1<<lcd_RS)); // EN=0, RS=0
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	83 7f       	andi	r24, 0xF3	; 243
  fe:	8b bb       	out	0x1b, r24	; 27
//	lcd_port &= ~(1<<lcd_RW);               // Set RW = 0 in case it is connected
 
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 100:	80 e3       	ldi	r24, 0x30	; 48
 102:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f e5       	ldi	r24, 0x5F	; 95
 108:	9a ee       	ldi	r25, 0xEA	; 234
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_init+0x16>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_init+0x1c>
 110:	00 00       	nop
   //lcd_wait(longdelay );  						 // wait 24 ms
   _delay_ms(24);
   lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 112:	80 e3       	ldi	r24, 0x30	; 48
 114:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 118:	8f e5       	ldi	r24, 0x5F	; 95
 11a:	9a ee       	ldi	r25, 0xEA	; 234
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_init+0x28>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_init+0x2e>
 122:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION+IN8_BIT);
 124:	80 e3       	ldi	r24, 0x30	; 48
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 12a:	8f e5       	ldi	r24, 0x5F	; 95
 12c:	9a ee       	ldi	r25, 0xEA	; 234
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_init+0x3a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_init+0x40>
 134:	00 00       	nop
   //lcd_wait(longdelay);
    _delay_ms(24);
	lcd_nibble_transfer(SET_FUNCTION);
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	0e 94 49 00 	call	0x92	; 0x92 <lcd_nibble_transfer>
 13c:	8f e5       	ldi	r24, 0x5F	; 95
 13e:	9a ee       	ldi	r25, 0xEA	; 234
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x4c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_init+0x52>
 146:	00 00       	nop
  // lcd_wait(longdelay);
   _delay_ms(24);
   lcd_cmd_write(SET_FUNCTION+LN2_BIT);                 // Function set: 0x28  2 lines
 148:	88 e2       	ldi	r24, 0x28	; 40
 14a:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 14e:	87 e8       	ldi	r24, 0x87	; 135
 150:	93 e1       	ldi	r25, 0x13	; 19
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init+0x5e>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_init+0x64>
 158:	00 00       	nop
  // lcd_wait(WAIT_15m);                              // Wait 39 uS
 _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY);						//display off
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 160:	87 e8       	ldi	r24, 0x87	; 135
 162:	93 e1       	ldi	r25, 0x13	; 19
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x70>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_init+0x76>
 16a:	00 00       	nop
 //lcd_wait(WAIT_15m);
_delay_ms(2);	
	lcd_cmd_write(CLR_DISPLAY);       // Display clear: 0x01 clear data                 	 
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 172:	87 e8       	ldi	r24, 0x87	; 135
 174:	93 e1       	ldi	r25, 0x13	; 19
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x82>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_init+0x88>
 17c:	00 00       	nop
	
  // lcd_wait(WAIT_15m);                // 1.53 mS  
     _delay_ms(2);                  
                               

   lcd_cmd_write(SET_ENTRY_MODE+INC_BIT);          //  +INC_BIT  // Entry mode set: shift cursor 1 position to right
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 184:	87 e8       	ldi	r24, 0x87	; 135
 186:	93 e1       	ldi	r25, 0x13	; 19
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x94>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init+0x9a>
 18e:	00 00       	nop
  //   lcd_wait(WAIT_15m);      
  _delay_ms(2);
    lcd_cmd_write(SET_DISPLAY+ON_BIT+CUR_BIT+BLK_BIT); //+CUR_BIT+BLK_BIT);   Display ON/OFF control: 0x0f
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 196:	87 e8       	ldi	r24, 0x87	; 135
 198:	93 e1       	ldi	r25, 0x13	; 19
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0xa6>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0xac>
 1a0:	00 00       	nop
  //   lcd_wait(WAIT_15m);                               // Wait 39 uS                      // 1.53 mS     
_delay_ms(2);	
	lcd_cmd_write(RTN_HOME);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 1a8:	87 e8       	ldi	r24, 0x87	; 135
 1aa:	93 e1       	ldi	r25, 0x13	; 19
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0xb8>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_init+0xbe>
 1b2:	00 00       	nop
  //lcd_wait(WAIT_15m);                            // 1.53 mS  
_delay_ms(2);
  
   } // end lcd_init()
 1b4:	08 95       	ret

000001b6 <lcdClear>:


//clear the display
void lcdClear(void) {

lcd_cmd_write(CLR_DISPLAY);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
//lcd_wait(WAIT_15m);
lcd_cmd_write(CLR_DISPLAY+RTN_HOME);
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
//lcd_wait(WAIT_15m);


}
 1c2:	08 95       	ret

000001c4 <LCDPutString>:




//! write a zero-terminated ASCII string to the display
void LCDPutString(char *str) {
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	e8 2e       	mov	r14, r24
 1ce:	e7 01       	movw	r28, r14
 1d0:	7e 01       	movw	r14, r28
 1d2:	f9 2e       	mov	r15, r25
 1d4:	e7 01       	movw	r28, r14
   char c;
for (; (c = *str) != 0; str++) 
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <LCDPutString+0x18>
lcd_data_write(c);
 1d8:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_data_write>


//! write a zero-terminated ASCII string to the display
void LCDPutString(char *str) {
   char c;
for (; (c = *str) != 0; str++) 
 1dc:	89 91       	ld	r24, Y+
 1de:	88 23       	and	r24, r24
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <LCDPutString+0x14>
lcd_data_write(c);

  
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	08 95       	ret

000001ec <lcd_wait>:
   for ( i = 0 ; i < count ; i++ );    //4 cycles per count
    // end lcd_wait()

  

   } // end lcd_transfer()
 1ec:	08 95       	ret

000001ee <GoTo>:

//goto x-position and y-line called by parameters x, y used in main() and internally LCDPutChar()

void GoTo(unsigned char x, unsigned char y){

switch (y) {
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	49 f0       	breq	.+18     	; 0x204 <GoTo+0x16>
 1f2:	61 30       	cpi	r22, 0x01	; 1
 1f4:	28 f0       	brcs	.+10     	; 0x200 <GoTo+0x12>
 1f6:	62 30       	cpi	r22, 0x02	; 2
 1f8:	39 f0       	breq	.+14     	; 0x208 <GoTo+0x1a>
 1fa:	63 30       	cpi	r22, 0x03	; 3
 1fc:	61 f4       	brne	.+24     	; 0x216 <GoTo+0x28>
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <GoTo+0x22>
case 0: 

 lcd_cmd_write(SET_DRAM_ADDR+x);
 200:	80 58       	subi	r24, 0x80	; 128
 202:	03 c0       	rjmp	.+6      	; 0x20a <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
 break;

 case 1: 

lcd_cmd_write(SET_DRAM_ADDR+line_1+x);
 204:	80 54       	subi	r24, 0x40	; 64
 206:	01 c0       	rjmp	.+2      	; 0x20a <GoTo+0x1c>
 lcd_wait(WAIT_15m);  
break;

case 2:
lcd_cmd_write(SET_DRAM_ADDR+line_2+x);
 208:	8c 56       	subi	r24, 0x6C	; 108
 20a:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 20e:	08 95       	ret
 lcd_wait(WAIT_15m);  
break;

case 3:
lcd_cmd_write(SET_DRAM_ADDR+line_3+x);
 210:	8c 52       	subi	r24, 0x2C	; 44
 212:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_cmd_write>
 216:	08 95       	ret

00000218 <clearLine>:
//lcd_wait(WAIT_15m);


}

void clearLine(unsigned char x, unsigned char y){
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	18 2f       	mov	r17, r24
 222:	06 2f       	mov	r16, r22

unsigned char max_x=20;

GoTo(x,y);
 224:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GoTo>
for (int i=x; i<max_x; i++)
 228:	c1 2f       	mov	r28, r17
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	0a c0       	rjmp	.+20     	; 0x242 <clearLine+0x2a>
{
lcd_data_write(0x20);
 22e:	80 e2       	ldi	r24, 0x20	; 32
 230:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_data_write>
 234:	83 ec       	ldi	r24, 0xC3	; 195
 236:	99 e0       	ldi	r25, 0x09	; 9
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <clearLine+0x20>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <clearLine+0x26>
 23e:	00 00       	nop
void clearLine(unsigned char x, unsigned char y){

unsigned char max_x=20;

GoTo(x,y);
for (int i=x; i<max_x; i++)
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	c4 31       	cpi	r28, 0x14	; 20
 244:	d1 05       	cpc	r29, r1
 246:	9c f3       	brlt	.-26     	; 0x22e <clearLine+0x16>
{
lcd_data_write(0x20);
_delay_ms(1);
}
GoTo(x,y);
 248:	81 2f       	mov	r24, r17
 24a:	60 2f       	mov	r22, r16
 24c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <GoTo>
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <key_init>:
							  {'7','8','9','D'},
							  {'A','0','B','C'} };

void key_init ()
{
  key_DDRA  |=(1<<key_row0 )|(1<<key_row1); 
 25a:	8a b3       	in	r24, 0x1a	; 26
 25c:	83 60       	ori	r24, 0x03	; 3
 25e:	8a bb       	out	0x1a, r24	; 26
  key_DDRC  &=(1<<key_col0 )|(1<<key_col1); 
 260:	84 b3       	in	r24, 0x14	; 20
 262:	80 7c       	andi	r24, 0xC0	; 192
 264:	84 bb       	out	0x14, r24	; 20
  lcd_init();
 266:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_init>
}
 26a:	08 95       	ret

0000026c <key_look>:
void key_look()
{
unsigned char column;
unsigned char lastkey;
unsigned char keyit;
			 	lastkey=(key_PINC & 0xC0);
 26c:	93 b3       	in	r25, 0x13	; 19
 26e:	af e4       	ldi	r26, 0x4F	; 79
 270:	b3 ec       	ldi	r27, 0xC3	; 195
 272:	11 97       	sbiw	r26, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <key_look+0x6>
 276:	00 c0       	rjmp	.+0      	; 0x278 <key_look+0xc>
 278:	00 00       	nop
				_delay_ms(20);
				column=(key_PINC & 0xC0);
 27a:	83 b3       	in	r24, 0x13	; 19
 27c:	80 7c       	andi	r24, 0xC0	; 192
void key_look()
{
unsigned char column;
unsigned char lastkey;
unsigned char keyit;
			 	lastkey=(key_PINC & 0xC0);
 27e:	90 7c       	andi	r25, 0xC0	; 192
				_delay_ms(20);
				column=(key_PINC & 0xC0);
if(column==lastkey)
 280:	89 17       	cp	r24, r25
 282:	e1 f5       	brne	.+120    	; 0x2fc <key_look+0x90>
{
 	switch(column)
 284:	80 34       	cpi	r24, 0x40	; 64
 286:	79 f0       	breq	.+30     	; 0x2a6 <key_look+0x3a>
 288:	80 38       	cpi	r24, 0x80	; 128
 28a:	c1 f0       	breq	.+48     	; 0x2bc <key_look+0x50>
 28c:	e0 91 ca 00 	lds	r30, 0x00CA
 290:	88 23       	and	r24, r24
 292:	f9 f4       	brne	.+62     	; 0x2d2 <key_look+0x66>
	{
		case 0x00:keyit= keytab[row][3];break;
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	ee 0f       	add	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	ef 59       	subi	r30, 0x9F	; 159
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	83 81       	ldd	r24, Z+3	; 0x03
 2a4:	1e c0       	rjmp	.+60     	; 0x2e2 <key_look+0x76>
		case 0x40:keyit= keytab[row][2];break;///column PC6
 2a6:	e0 91 ca 00 	lds	r30, 0x00CA
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	ef 59       	subi	r30, 0x9F	; 159
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	82 81       	ldd	r24, Z+2	; 0x02
 2ba:	13 c0       	rjmp	.+38     	; 0x2e2 <key_look+0x76>
		case 0x80:keyit= keytab[row][1];break;///column PC7
 2bc:	e0 91 ca 00 	lds	r30, 0x00CA
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	ef 59       	subi	r30, 0x9F	; 159
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	81 81       	ldd	r24, Z+1	; 0x01
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <key_look+0x76>
		default  :keyit= keytab[row][0];break; 
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	ef 59       	subi	r30, 0x9F	; 159
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	80 81       	ld	r24, Z
	}
	while (key_PINB & (1<<key_active));
 2e2:	b2 99       	sbic	0x16, 2	; 22
 2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <key_look+0x76>
	
	 lcd_data_write(keyit);
 2e6:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_data_write>
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	9d e0       	ldi	r25, 0x0D	; 13
 2ee:	a3 e0       	ldi	r26, 0x03	; 3
 2f0:	81 50       	subi	r24, 0x01	; 1
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	a0 40       	sbci	r26, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <key_look+0x84>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <key_look+0x8e>
 2fa:	00 00       	nop
 2fc:	08 95       	ret

000002fe <key_read>:
  lcd_init();
}

void key_read()
{
int i= 0 ;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
while (!(key_PINB &(1<<key_active)))
{
switch(i)
{
row3: key_PORTA &= 0xFC; 					 		  row=3; 		break;
row2: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row0 ); row=2; 		break;
 302:	52 e0       	ldi	r21, 0x02	; 2
row1: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row1);  row=1; 		break;
 304:	41 e0       	ldi	r20, 0x01	; 1
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
{
switch(i)
{
row3: key_PORTA &= 0xFC; 					 		  row=3; 		break;
 306:	33 e0       	ldi	r19, 0x03	; 3
}

void key_read()
{
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
 308:	22 c0       	rjmp	.+68     	; 0x34e <key_read+0x50>
{
switch(i)
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	91 05       	cpc	r25, r1
 30e:	59 f0       	breq	.+22     	; 0x326 <key_read+0x28>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	91 05       	cpc	r25, r1
 314:	79 f0       	breq	.+30     	; 0x334 <key_read+0x36>
 316:	00 97       	sbiw	r24, 0x00	; 0
 318:	a1 f4       	brne	.+40     	; 0x342 <key_read+0x44>
{
row3: key_PORTA &= 0xFC; 					 		  row=3; 		break;
 31a:	2b b3       	in	r18, 0x1b	; 27
 31c:	2c 7f       	andi	r18, 0xFC	; 252
 31e:	2b bb       	out	0x1b, r18	; 27
 320:	30 93 ca 00 	sts	0x00CA, r19
 324:	13 c0       	rjmp	.+38     	; 0x34c <key_read+0x4e>
row2: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row0 ); row=2; 		break;
 326:	2b b3       	in	r18, 0x1b	; 27
 328:	2c 7f       	andi	r18, 0xFC	; 252
 32a:	2b bb       	out	0x1b, r18	; 27
 32c:	d8 9a       	sbi	0x1b, 0	; 27
 32e:	50 93 ca 00 	sts	0x00CA, r21
 332:	0c c0       	rjmp	.+24     	; 0x34c <key_read+0x4e>
row1: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row1);  row=1; 		break;
 334:	2b b3       	in	r18, 0x1b	; 27
 336:	2c 7f       	andi	r18, 0xFC	; 252
 338:	2b bb       	out	0x1b, r18	; 27
 33a:	d9 9a       	sbi	0x1b, 1	; 27
 33c:	40 93 ca 00 	sts	0x00CA, r20
 340:	05 c0       	rjmp	.+10     	; 0x34c <key_read+0x4e>
default: 		         key_PORTA |= (1<<key_row0 )|(1<<key_row1); row=0; break;
 342:	2b b3       	in	r18, 0x1b	; 27
 344:	23 60       	ori	r18, 0x03	; 3
 346:	2b bb       	out	0x1b, r18	; 27
 348:	10 92 ca 00 	sts	0x00CA, r1
	}
		i++;	
 34c:	01 96       	adiw	r24, 0x01	; 1
}

void key_read()
{
int i= 0 ;
while (!(key_PINB &(1<<key_active)))
 34e:	b2 9b       	sbis	0x16, 2	; 22
 350:	dc cf       	rjmp	.-72     	; 0x30a <key_read+0xc>
row1: key_PORTA &= 0xFC; key_PORTA |= (1<<key_row1);  row=1; 		break;
default: 		         key_PORTA |= (1<<key_row0 )|(1<<key_row1); row=0; break;
	}
		i++;	
	}
		key_look();	
 352:	0e 94 36 01 	call	0x26c	; 0x26c <key_look>
	}
 356:	08 95       	ret

00000358 <init>:
#include "spi.h"

	void init ()
	{   
	  
		DDRB |= 0x01; // bit 0 for output		
 358:	b8 9a       	sbi	0x17, 0	; 23
		PORTB |= 0x01; /// LED is Off	
 35a:	c0 9a       	sbi	0x18, 0	; 24
	    TCCR0 |= (1<<CS01)|(1<<CS00); // timer 0 normal mode 8 prescaler		
 35c:	83 b7       	in	r24, 0x33	; 51
 35e:	83 60       	ori	r24, 0x03	; 3
 360:	83 bf       	out	0x33, r24	; 51
	}
 362:	08 95       	ret

00000364 <SPI_MasterInit>:
void SPI_MasterInit(void)
		{
		DDRB |=(1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK);
 364:	87 b3       	in	r24, 0x17	; 23
 366:	80 6b       	ori	r24, 0xB0	; 176
 368:	87 bb       	out	0x17, r24	; 23
		SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 36a:	8d b1       	in	r24, 0x0d	; 13
 36c:	81 65       	ori	r24, 0x51	; 81
 36e:	8d b9       	out	0x0d, r24	; 13
	    PORTB|=(1<<SPI_SS)|(1<<SPI_MISO)|(1<<SPI_SCK);
 370:	88 b3       	in	r24, 0x18	; 24
 372:	80 6d       	ori	r24, 0xD0	; 208
 374:	88 bb       	out	0x18, r24	; 24
		}
 376:	08 95       	ret

00000378 <receiveSPI>:

char receiveSPI(){
	//PORTB &= ~(1<<SPI_SS);
//	SPDR = 0xF5;
	while(!(SPSR & (1<<SPIF))){}
 378:	77 9b       	sbis	0x0e, 7	; 14
 37a:	fe cf       	rjmp	.-4      	; 0x378 <receiveSPI>
	PORTB |= (1<<SPI_SS);
 37c:	c4 9a       	sbi	0x18, 4	; 24
	return SPDR;
 37e:	8f b1       	in	r24, 0x0f	; 15
}
 380:	08 95       	ret

00000382 <SPI_MasterTransmit>:


		void SPI_MasterTransmit(char data)
		{
		PORTB&=~(1<<SPI_SS);
 382:	c4 98       	cbi	0x18, 4	; 24
		SPDR = data;
 384:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
 386:	77 9b       	sbis	0x0e, 7	; 14
 388:	fe cf       	rjmp	.-4      	; 0x386 <SPI_MasterTransmit+0x4>
	    PORTB|=(1<<SPI_SS);
 38a:	c4 9a       	sbi	0x18, 4	; 24
		}
 38c:	08 95       	ret

0000038e <main>:
#include "keypad.h"
#include "variables.h"
#include <avr/interrupt.h>
	
	int main()
			 {
 38e:	1f 93       	push	r17
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	0f 92       	push	r0
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
			    sei();
 39a:	78 94       	sei
			    init();
 39c:	0e 94 ac 01 	call	0x358	; 0x358 <init>
	  		  	init_uart( 0x40);
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <init_uart>
	            lcd_init();
 3a8:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_init>
			   	SPI_MasterInit();
 3ac:	0e 94 b2 01 	call	0x364	; 0x364 <SPI_MasterInit>
			    key_init();
 3b0:	0e 94 2d 01 	call	0x25a	; 0x25a <key_init>
	volatile char flag=0; 
 3b4:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{
		if (flag==0) {
			if ((PIND & 0x04)==0x04) { 
					card_flag=1;  //bit mask should be 0x04 not 1<<PD2					
 3b6:	11 e0       	ldi	r17, 0x01	; 1
			   	SPI_MasterInit();
			    key_init();
	volatile char flag=0; 
	while (1)
	{
		if (flag==0) {
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	88 23       	and	r24, r24
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <main+0x38>
			if ((PIND & 0x04)==0x04) { 
 3be:	82 9b       	sbis	0x10, 2	; 16
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <main+0x38>
					card_flag=1;  //bit mask should be 0x04 not 1<<PD2					
 3c2:	10 93 a5 00 	sts	0x00A5, r17
			
					 	}
	          				}    
				if ((PIND & 0x08)== 0x08)  {
 3c6:	83 9b       	sbis	0x10, 3	; 16
 3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <main+0x42>
								TIMSK |=(1<<TOV0);  //bit mask should be 0x08 not (1<<PD3)!
 3ca:	89 b7       	in	r24, 0x39	; 57
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	89 bf       	out	0x39, r24	; 57
								}
	if (card_flag==1)
 3d0:	80 91 a5 00 	lds	r24, 0x00A5
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	59 f5       	brne	.+86     	; 0x42e <main+0xa0>
					{
					flag=1;
 3d8:	89 83       	std	Y+1, r24	; 0x01
					SPI_MasterTransmit(0x55);
 3da:	85 e5       	ldi	r24, 0x55	; 85
 3dc:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_MasterTransmit>
					LCDPutString("Hello Danish Khan");
 3e0:	81 e7       	ldi	r24, 0x71	; 113
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCDPutString>
 3e8:	8f e7       	ldi	r24, 0x7F	; 127
 3ea:	9d e8       	ldi	r25, 0x8D	; 141
 3ec:	ab e5       	ldi	r26, 0x5B	; 91
 3ee:	81 50       	subi	r24, 0x01	; 1
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	a0 40       	sbci	r26, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <main+0x60>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <main+0x6a>
 3f8:	00 00       	nop
					_delay_ms(3000);
					lcdClear();
 3fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcdClear>
 3fe:	8f e3       	ldi	r24, 0x3F	; 63
 400:	9d e0       	ldi	r25, 0x0D	; 13
 402:	a3 e0       	ldi	r26, 0x03	; 3
 404:	81 50       	subi	r24, 0x01	; 1
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	a0 40       	sbci	r26, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <main+0x76>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <main+0x80>
 40e:	00 00       	nop
					_delay_ms(100);
					LCDPutString("Your ID :           ");
 410:	83 e8       	ldi	r24, 0x83	; 131
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCDPutString>
 418:	8f e7       	ldi	r24, 0x7F	; 127
 41a:	9a e1       	ldi	r25, 0x1A	; 26
 41c:	a6 e0       	ldi	r26, 0x06	; 6
 41e:	81 50       	subi	r24, 0x01	; 1
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	a0 40       	sbci	r26, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <main+0x90>
 426:	00 c0       	rjmp	.+0      	; 0x428 <main+0x9a>
 428:	00 00       	nop
					_delay_ms(200);					
					card_flag=0;
 42a:	10 92 a5 00 	sts	0x00A5, r1
					}
				    	if (data_flag==1)
 42e:	80 91 a4 00 	lds	r24, 0x00A4
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	09 f6       	brne	.-126    	; 0x3b8 <main+0x2a>
						{
						data_flag=0;	
 436:	10 92 a4 00 	sts	0x00A4, r1
						uart_transmit(buffer[i]); // to transmit data into terminal
 43a:	e0 91 9d 00 	lds	r30, 0x009D
 43e:	f0 91 9e 00 	lds	r31, 0x009E
 442:	e3 53       	subi	r30, 0x33	; 51
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	80 81       	ld	r24, Z
 448:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uart_transmit>
						LCDPutString(buffer);
 44c:	8d ec       	ldi	r24, 0xCD	; 205
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCDPutString>
						key_read(); 		
 454:	0e 94 7f 01 	call	0x2fe	; 0x2fe <key_read>
 458:	af cf       	rjmp	.-162    	; 0x3b8 <main+0x2a>

0000045a <__vector_11>:
						}
						}			
	return (0);
			  }
			  ISR(TIMER0_OVF_vect)
		 {
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	4f 93       	push	r20
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31

		  SPI_MasterTransmit(0xF5);
 47c:	85 ef       	ldi	r24, 0xF5	; 245
 47e:	0e 94 c1 01 	call	0x382	; 0x382 <SPI_MasterTransmit>
		 data=SPDR;
 482:	2f b1       	in	r18, 0x0f	; 15
 484:	20 93 a8 00 	sts	0x00A8, r18
		 if((j<max)&&(data!=0x86)){//
 488:	80 91 a6 00 	lds	r24, 0x00A6
 48c:	8e 30       	cpi	r24, 0x0E	; 14
 48e:	08 f0       	brcs	.+2      	; 0x492 <__vector_11+0x38>
 490:	48 c0       	rjmp	.+144    	; 0x522 <__vector_11+0xc8>
 492:	26 38       	cpi	r18, 0x86	; 134
 494:	09 f4       	brne	.+2      	; 0x498 <__vector_11+0x3e>
 496:	45 c0       	rjmp	.+138    	; 0x522 <__vector_11+0xc8>
		 sprintf(Hexbuffer, "%02X", data);
 498:	00 d0       	rcall	.+0      	; 0x49a <__vector_11+0x40>
 49a:	00 d0       	rcall	.+0      	; 0x49c <__vector_11+0x42>
 49c:	00 d0       	rcall	.+0      	; 0x49e <__vector_11+0x44>
 49e:	ed b7       	in	r30, 0x3d	; 61
 4a0:	fe b7       	in	r31, 0x3e	; 62
 4a2:	31 96       	adiw	r30, 0x01	; 1
 4a4:	8b ec       	ldi	r24, 0xCB	; 203
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ad b7       	in	r26, 0x3d	; 61
 4aa:	be b7       	in	r27, 0x3e	; 62
 4ac:	12 96       	adiw	r26, 0x02	; 2
 4ae:	9c 93       	st	X, r25
 4b0:	8e 93       	st	-X, r24
 4b2:	11 97       	sbiw	r26, 0x01	; 1
 4b4:	88 e9       	ldi	r24, 0x98	; 152
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	93 83       	std	Z+3, r25	; 0x03
 4ba:	82 83       	std	Z+2, r24	; 0x02
 4bc:	24 83       	std	Z+4, r18	; 0x04
 4be:	15 82       	std	Z+5, r1	; 0x05
 4c0:	0e 94 06 03 	call	0x60c	; 0x60c <sprintf>
			buffer[i]=Hexbuffer[1];
 4c4:	e0 91 9d 00 	lds	r30, 0x009D
 4c8:	f0 91 9e 00 	lds	r31, 0x009E
 4cc:	e3 53       	subi	r30, 0x33	; 51
 4ce:	ff 4f       	sbci	r31, 0xFF	; 255
 4d0:	80 91 cc 00 	lds	r24, 0x00CC
 4d4:	80 83       	st	Z, r24
			i--;
 4d6:	80 91 9d 00 	lds	r24, 0x009D
 4da:	90 91 9e 00 	lds	r25, 0x009E
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	90 93 9e 00 	sts	0x009E, r25
 4e4:	80 93 9d 00 	sts	0x009D, r24
	
			buffer[i]=Hexbuffer[0];
 4e8:	e0 91 9d 00 	lds	r30, 0x009D
 4ec:	f0 91 9e 00 	lds	r31, 0x009E
 4f0:	e3 53       	subi	r30, 0x33	; 51
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
 4f4:	80 91 cb 00 	lds	r24, 0x00CB
 4f8:	80 83       	st	Z, r24
			ii=0;
 4fa:	10 92 a7 00 	sts	0x00A7, r1
			i--;
 4fe:	80 91 9d 00 	lds	r24, 0x009D
 502:	90 91 9e 00 	lds	r25, 0x009E
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	90 93 9e 00 	sts	0x009E, r25
 50c:	80 93 9d 00 	sts	0x009D, r24
			 PORTB &=0xFE;
 510:	c0 98       	cbi	0x18, 0	; 24
 512:	8d b7       	in	r24, 0x3d	; 61
 514:	9e b7       	in	r25, 0x3e	; 62
 516:	06 96       	adiw	r24, 0x06	; 6
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	9e bf       	out	0x3e, r25	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	8d bf       	out	0x3d, r24	; 61
			}	 
		 if (j==max-7) {
 522:	80 91 a6 00 	lds	r24, 0x00A6
 526:	87 30       	cpi	r24, 0x07	; 7
 528:	61 f4       	brne	.+24     	; 0x542 <__vector_11+0xe8>
		 data_flag=1;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 a4 00 	sts	0x00A4, r24
		  j=0;
 530:	10 92 a6 00 	sts	0x00A6, r1
		 i=max-1;
 534:	8d e0       	ldi	r24, 0x0D	; 13
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 9e 00 	sts	0x009E, r25
 53c:	80 93 9d 00 	sts	0x009D, r24
 540:	03 c0       	rjmp	.+6      	; 0x548 <__vector_11+0xee>
		 }
		 else j++;
 542:	8f 5f       	subi	r24, 0xFF	; 255
 544:	80 93 a6 00 	sts	0x00A6, r24
	}
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <__vector_13>:
ISR(USART_RXC_vect)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
 //Udata = UDR;
lcd_data_write(uart_recieve());
 58c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <uart_recieve>
 590:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_data_write>

}
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	bf 91       	pop	r27
 59a:	af 91       	pop	r26
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	7f 91       	pop	r23
 5a2:	6f 91       	pop	r22
 5a4:	5f 91       	pop	r21
 5a6:	4f 91       	pop	r20
 5a8:	3f 91       	pop	r19
 5aa:	2f 91       	pop	r18
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <init_uart>:

/*init uart*/

void init_uart(int baudrate)
	{
	UCSRB |=(1<<RXEN) | (1<<TXEN)|(1<<RXCIE);
 5b6:	2a b1       	in	r18, 0x0a	; 10
 5b8:	28 69       	ori	r18, 0x98	; 152
 5ba:	2a b9       	out	0x0a, r18	; 10
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8 data bits and 1 stop bit no parity bit 
 5bc:	20 b5       	in	r18, 0x20	; 32
 5be:	26 68       	ori	r18, 0x86	; 134
 5c0:	20 bd       	out	0x20, r18	; 32
	UCSRA = (1<<U2X); // full duplex
 5c2:	22 e0       	ldi	r18, 0x02	; 2
 5c4:	2b b9       	out	0x0b, r18	; 11

	UBRRH = (char) ( baudrate>>8); // move the upper byte in the integer for fit 8 bits in 16 bits 
 5c6:	29 2f       	mov	r18, r25
 5c8:	33 27       	eor	r19, r19
 5ca:	27 fd       	sbrc	r18, 7
 5cc:	3a 95       	dec	r19
 5ce:	20 bd       	out	0x20, r18	; 32
	UBRRL=(char) baudrate;
 5d0:	89 b9       	out	0x09, r24	; 9

	}
 5d2:	08 95       	ret

000005d4 <uart_transmit>:


	 void uart_transmit(char data)
	{
	 while(!(UCSRA & (1<<UDRE)));     ///wrong ==0 only please read the manual careful.p. 154
 5d4:	5d 9b       	sbis	0x0b, 5	; 11
 5d6:	fe cf       	rjmp	.-4      	; 0x5d4 <uart_transmit>
	 UDR=data;
 5d8:	8c b9       	out	0x0c, r24	; 12
	 
	}
 5da:	08 95       	ret

000005dc <uart_recieve>:
	unsigned char uart_recieve(void)
	{
	while (!(UCSRA &(1<<RXC)));
 5dc:	5f 9b       	sbis	0x0b, 7	; 11
 5de:	fe cf       	rjmp	.-4      	; 0x5dc <uart_recieve>
	return UDR;
 5e0:	8c b1       	in	r24, 0x0c	; 12
	
	}
 5e2:	08 95       	ret

000005e4 <PutString>:
		void PutString(char *str) {
 5e4:	ef 92       	push	r14
 5e6:	ff 92       	push	r15
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	e8 2e       	mov	r14, r24
 5ee:	e7 01       	movw	r28, r14
 5f0:	7e 01       	movw	r14, r28
 5f2:	f9 2e       	mov	r15, r25
 5f4:	e7 01       	movw	r28, r14
   char c;
   for (; (c = *str) != 0; str++)
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <PutString+0x18>
    uart_transmit(c); //transmit char handles the individual character
 5f8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <uart_transmit>
	return UDR;
	
	}
		void PutString(char *str) {
   char c;
   for (; (c = *str) != 0; str++)
 5fc:	89 91       	ld	r24, Y+
 5fe:	88 23       	and	r24, r24
 600:	d9 f7       	brne	.-10     	; 0x5f8 <PutString+0x14>
    uart_transmit(c); //transmit char handles the individual character
}
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	08 95       	ret

0000060c <sprintf>:
 60c:	ae e0       	ldi	r26, 0x0E	; 14
 60e:	b0 e0       	ldi	r27, 0x00	; 0
 610:	ec e0       	ldi	r30, 0x0C	; 12
 612:	f3 e0       	ldi	r31, 0x03	; 3
 614:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__prologue_saves__+0x1c>
 618:	0d 89       	ldd	r16, Y+21	; 0x15
 61a:	1e 89       	ldd	r17, Y+22	; 0x16
 61c:	86 e0       	ldi	r24, 0x06	; 6
 61e:	8c 83       	std	Y+4, r24	; 0x04
 620:	1a 83       	std	Y+2, r17	; 0x02
 622:	09 83       	std	Y+1, r16	; 0x01
 624:	8f ef       	ldi	r24, 0xFF	; 255
 626:	9f e7       	ldi	r25, 0x7F	; 127
 628:	9e 83       	std	Y+6, r25	; 0x06
 62a:	8d 83       	std	Y+5, r24	; 0x05
 62c:	9e 01       	movw	r18, r28
 62e:	27 5e       	subi	r18, 0xE7	; 231
 630:	3f 4f       	sbci	r19, 0xFF	; 255
 632:	ce 01       	movw	r24, r28
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	6f 89       	ldd	r22, Y+23	; 0x17
 638:	78 8d       	ldd	r23, Y+24	; 0x18
 63a:	a9 01       	movw	r20, r18
 63c:	0e 94 29 03 	call	0x652	; 0x652 <vfprintf>
 640:	ef 81       	ldd	r30, Y+7	; 0x07
 642:	f8 85       	ldd	r31, Y+8	; 0x08
 644:	e0 0f       	add	r30, r16
 646:	f1 1f       	adc	r31, r17
 648:	10 82       	st	Z, r1
 64a:	2e 96       	adiw	r28, 0x0e	; 14
 64c:	e4 e0       	ldi	r30, 0x04	; 4
 64e:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__epilogue_restores__+0x1c>

00000652 <vfprintf>:
 652:	ac e0       	ldi	r26, 0x0C	; 12
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	ef e2       	ldi	r30, 0x2F	; 47
 658:	f3 e0       	ldi	r31, 0x03	; 3
 65a:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__prologue_saves__>
 65e:	6c 01       	movw	r12, r24
 660:	1b 01       	movw	r2, r22
 662:	8a 01       	movw	r16, r20
 664:	fc 01       	movw	r30, r24
 666:	17 82       	std	Z+7, r1	; 0x07
 668:	16 82       	std	Z+6, r1	; 0x06
 66a:	83 81       	ldd	r24, Z+3	; 0x03
 66c:	81 ff       	sbrs	r24, 1
 66e:	d1 c1       	rjmp	.+930    	; 0xa12 <__stack+0x1b3>
 670:	2e 01       	movw	r4, r28
 672:	08 94       	sec
 674:	41 1c       	adc	r4, r1
 676:	51 1c       	adc	r5, r1
 678:	f6 01       	movw	r30, r12
 67a:	93 81       	ldd	r25, Z+3	; 0x03
 67c:	f1 01       	movw	r30, r2
 67e:	93 fd       	sbrc	r25, 3
 680:	85 91       	lpm	r24, Z+
 682:	93 ff       	sbrs	r25, 3
 684:	81 91       	ld	r24, Z+
 686:	1f 01       	movw	r2, r30
 688:	88 23       	and	r24, r24
 68a:	09 f4       	brne	.+2      	; 0x68e <vfprintf+0x3c>
 68c:	be c1       	rjmp	.+892    	; 0xa0a <__stack+0x1ab>
 68e:	85 32       	cpi	r24, 0x25	; 37
 690:	39 f4       	brne	.+14     	; 0x6a0 <vfprintf+0x4e>
 692:	93 fd       	sbrc	r25, 3
 694:	85 91       	lpm	r24, Z+
 696:	93 ff       	sbrs	r25, 3
 698:	81 91       	ld	r24, Z+
 69a:	1f 01       	movw	r2, r30
 69c:	85 32       	cpi	r24, 0x25	; 37
 69e:	29 f4       	brne	.+10     	; 0x6aa <vfprintf+0x58>
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	b6 01       	movw	r22, r12
 6a4:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 6a8:	e7 cf       	rjmp	.-50     	; 0x678 <vfprintf+0x26>
 6aa:	ee 24       	eor	r14, r14
 6ac:	ff 24       	eor	r15, r15
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	20 32       	cpi	r18, 0x20	; 32
 6b2:	b0 f4       	brcc	.+44     	; 0x6e0 <vfprintf+0x8e>
 6b4:	8b 32       	cpi	r24, 0x2B	; 43
 6b6:	69 f0       	breq	.+26     	; 0x6d2 <vfprintf+0x80>
 6b8:	8c 32       	cpi	r24, 0x2C	; 44
 6ba:	28 f4       	brcc	.+10     	; 0x6c6 <vfprintf+0x74>
 6bc:	80 32       	cpi	r24, 0x20	; 32
 6be:	51 f0       	breq	.+20     	; 0x6d4 <vfprintf+0x82>
 6c0:	83 32       	cpi	r24, 0x23	; 35
 6c2:	71 f4       	brne	.+28     	; 0x6e0 <vfprintf+0x8e>
 6c4:	0b c0       	rjmp	.+22     	; 0x6dc <vfprintf+0x8a>
 6c6:	8d 32       	cpi	r24, 0x2D	; 45
 6c8:	39 f0       	breq	.+14     	; 0x6d8 <vfprintf+0x86>
 6ca:	80 33       	cpi	r24, 0x30	; 48
 6cc:	49 f4       	brne	.+18     	; 0x6e0 <vfprintf+0x8e>
 6ce:	21 60       	ori	r18, 0x01	; 1
 6d0:	2c c0       	rjmp	.+88     	; 0x72a <vfprintf+0xd8>
 6d2:	22 60       	ori	r18, 0x02	; 2
 6d4:	24 60       	ori	r18, 0x04	; 4
 6d6:	29 c0       	rjmp	.+82     	; 0x72a <vfprintf+0xd8>
 6d8:	28 60       	ori	r18, 0x08	; 8
 6da:	27 c0       	rjmp	.+78     	; 0x72a <vfprintf+0xd8>
 6dc:	20 61       	ori	r18, 0x10	; 16
 6de:	25 c0       	rjmp	.+74     	; 0x72a <vfprintf+0xd8>
 6e0:	27 fd       	sbrc	r18, 7
 6e2:	2c c0       	rjmp	.+88     	; 0x73c <vfprintf+0xea>
 6e4:	38 2f       	mov	r19, r24
 6e6:	30 53       	subi	r19, 0x30	; 48
 6e8:	3a 30       	cpi	r19, 0x0A	; 10
 6ea:	98 f4       	brcc	.+38     	; 0x712 <vfprintf+0xc0>
 6ec:	26 ff       	sbrs	r18, 6
 6ee:	08 c0       	rjmp	.+16     	; 0x700 <vfprintf+0xae>
 6f0:	8e 2d       	mov	r24, r14
 6f2:	88 0f       	add	r24, r24
 6f4:	e8 2e       	mov	r14, r24
 6f6:	ee 0c       	add	r14, r14
 6f8:	ee 0c       	add	r14, r14
 6fa:	e8 0e       	add	r14, r24
 6fc:	e3 0e       	add	r14, r19
 6fe:	15 c0       	rjmp	.+42     	; 0x72a <vfprintf+0xd8>
 700:	8f 2d       	mov	r24, r15
 702:	88 0f       	add	r24, r24
 704:	f8 2e       	mov	r15, r24
 706:	ff 0c       	add	r15, r15
 708:	ff 0c       	add	r15, r15
 70a:	f8 0e       	add	r15, r24
 70c:	f3 0e       	add	r15, r19
 70e:	20 62       	ori	r18, 0x20	; 32
 710:	0c c0       	rjmp	.+24     	; 0x72a <vfprintf+0xd8>
 712:	8e 32       	cpi	r24, 0x2E	; 46
 714:	21 f4       	brne	.+8      	; 0x71e <vfprintf+0xcc>
 716:	26 fd       	sbrc	r18, 6
 718:	78 c1       	rjmp	.+752    	; 0xa0a <__stack+0x1ab>
 71a:	20 64       	ori	r18, 0x40	; 64
 71c:	06 c0       	rjmp	.+12     	; 0x72a <vfprintf+0xd8>
 71e:	8c 36       	cpi	r24, 0x6C	; 108
 720:	11 f4       	brne	.+4      	; 0x726 <vfprintf+0xd4>
 722:	20 68       	ori	r18, 0x80	; 128
 724:	02 c0       	rjmp	.+4      	; 0x72a <vfprintf+0xd8>
 726:	88 36       	cpi	r24, 0x68	; 104
 728:	49 f4       	brne	.+18     	; 0x73c <vfprintf+0xea>
 72a:	f1 01       	movw	r30, r2
 72c:	93 fd       	sbrc	r25, 3
 72e:	85 91       	lpm	r24, Z+
 730:	93 ff       	sbrs	r25, 3
 732:	81 91       	ld	r24, Z+
 734:	1f 01       	movw	r2, r30
 736:	88 23       	and	r24, r24
 738:	09 f0       	breq	.+2      	; 0x73c <vfprintf+0xea>
 73a:	ba cf       	rjmp	.-140    	; 0x6b0 <vfprintf+0x5e>
 73c:	98 2f       	mov	r25, r24
 73e:	95 54       	subi	r25, 0x45	; 69
 740:	93 30       	cpi	r25, 0x03	; 3
 742:	18 f0       	brcs	.+6      	; 0x74a <vfprintf+0xf8>
 744:	90 52       	subi	r25, 0x20	; 32
 746:	93 30       	cpi	r25, 0x03	; 3
 748:	28 f4       	brcc	.+10     	; 0x754 <vfprintf+0x102>
 74a:	0c 5f       	subi	r16, 0xFC	; 252
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	ff e3       	ldi	r31, 0x3F	; 63
 750:	f9 83       	std	Y+1, r31	; 0x01
 752:	0d c0       	rjmp	.+26     	; 0x76e <vfprintf+0x11c>
 754:	83 36       	cpi	r24, 0x63	; 99
 756:	31 f0       	breq	.+12     	; 0x764 <vfprintf+0x112>
 758:	83 37       	cpi	r24, 0x73	; 115
 75a:	71 f0       	breq	.+28     	; 0x778 <vfprintf+0x126>
 75c:	83 35       	cpi	r24, 0x53	; 83
 75e:	09 f0       	breq	.+2      	; 0x762 <vfprintf+0x110>
 760:	60 c0       	rjmp	.+192    	; 0x822 <vfprintf+0x1d0>
 762:	22 c0       	rjmp	.+68     	; 0x7a8 <vfprintf+0x156>
 764:	f8 01       	movw	r30, r16
 766:	80 81       	ld	r24, Z
 768:	89 83       	std	Y+1, r24	; 0x01
 76a:	0e 5f       	subi	r16, 0xFE	; 254
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
 76e:	42 01       	movw	r8, r4
 770:	71 e0       	ldi	r23, 0x01	; 1
 772:	a7 2e       	mov	r10, r23
 774:	b1 2c       	mov	r11, r1
 776:	16 c0       	rjmp	.+44     	; 0x7a4 <vfprintf+0x152>
 778:	62 e0       	ldi	r22, 0x02	; 2
 77a:	66 2e       	mov	r6, r22
 77c:	71 2c       	mov	r7, r1
 77e:	60 0e       	add	r6, r16
 780:	71 1e       	adc	r7, r17
 782:	f8 01       	movw	r30, r16
 784:	80 80       	ld	r8, Z
 786:	91 80       	ldd	r9, Z+1	; 0x01
 788:	26 ff       	sbrs	r18, 6
 78a:	03 c0       	rjmp	.+6      	; 0x792 <vfprintf+0x140>
 78c:	6e 2d       	mov	r22, r14
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <vfprintf+0x144>
 792:	6f ef       	ldi	r22, 0xFF	; 255
 794:	7f ef       	ldi	r23, 0xFF	; 255
 796:	c4 01       	movw	r24, r8
 798:	2c 87       	std	Y+12, r18	; 0x0c
 79a:	0e 94 1b 05 	call	0xa36	; 0xa36 <strnlen>
 79e:	5c 01       	movw	r10, r24
 7a0:	83 01       	movw	r16, r6
 7a2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7a4:	2f 77       	andi	r18, 0x7F	; 127
 7a6:	17 c0       	rjmp	.+46     	; 0x7d6 <vfprintf+0x184>
 7a8:	52 e0       	ldi	r21, 0x02	; 2
 7aa:	65 2e       	mov	r6, r21
 7ac:	71 2c       	mov	r7, r1
 7ae:	60 0e       	add	r6, r16
 7b0:	71 1e       	adc	r7, r17
 7b2:	f8 01       	movw	r30, r16
 7b4:	80 80       	ld	r8, Z
 7b6:	91 80       	ldd	r9, Z+1	; 0x01
 7b8:	26 ff       	sbrs	r18, 6
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <vfprintf+0x170>
 7bc:	6e 2d       	mov	r22, r14
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <vfprintf+0x174>
 7c2:	6f ef       	ldi	r22, 0xFF	; 255
 7c4:	7f ef       	ldi	r23, 0xFF	; 255
 7c6:	c4 01       	movw	r24, r8
 7c8:	2c 87       	std	Y+12, r18	; 0x0c
 7ca:	0e 94 10 05 	call	0xa20	; 0xa20 <strnlen_P>
 7ce:	5c 01       	movw	r10, r24
 7d0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7d2:	20 68       	ori	r18, 0x80	; 128
 7d4:	83 01       	movw	r16, r6
 7d6:	23 fd       	sbrc	r18, 3
 7d8:	20 c0       	rjmp	.+64     	; 0x81a <vfprintf+0x1c8>
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <vfprintf+0x19a>
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	b6 01       	movw	r22, r12
 7e2:	2c 87       	std	Y+12, r18	; 0x0c
 7e4:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 7e8:	fa 94       	dec	r15
 7ea:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ec:	8f 2d       	mov	r24, r15
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	a8 16       	cp	r10, r24
 7f2:	b9 06       	cpc	r11, r25
 7f4:	98 f3       	brcs	.-26     	; 0x7dc <vfprintf+0x18a>
 7f6:	11 c0       	rjmp	.+34     	; 0x81a <vfprintf+0x1c8>
 7f8:	f4 01       	movw	r30, r8
 7fa:	27 fd       	sbrc	r18, 7
 7fc:	85 91       	lpm	r24, Z+
 7fe:	27 ff       	sbrs	r18, 7
 800:	81 91       	ld	r24, Z+
 802:	4f 01       	movw	r8, r30
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	b6 01       	movw	r22, r12
 808:	2c 87       	std	Y+12, r18	; 0x0c
 80a:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 80e:	2c 85       	ldd	r18, Y+12	; 0x0c
 810:	f1 10       	cpse	r15, r1
 812:	fa 94       	dec	r15
 814:	08 94       	sec
 816:	a1 08       	sbc	r10, r1
 818:	b1 08       	sbc	r11, r1
 81a:	a1 14       	cp	r10, r1
 81c:	b1 04       	cpc	r11, r1
 81e:	61 f7       	brne	.-40     	; 0x7f8 <vfprintf+0x1a6>
 820:	f1 c0       	rjmp	.+482    	; 0xa04 <__stack+0x1a5>
 822:	84 36       	cpi	r24, 0x64	; 100
 824:	11 f0       	breq	.+4      	; 0x82a <vfprintf+0x1d8>
 826:	89 36       	cpi	r24, 0x69	; 105
 828:	49 f5       	brne	.+82     	; 0x87c <__stack+0x1d>
 82a:	27 ff       	sbrs	r18, 7
 82c:	08 c0       	rjmp	.+16     	; 0x83e <vfprintf+0x1ec>
 82e:	f8 01       	movw	r30, r16
 830:	60 81       	ld	r22, Z
 832:	71 81       	ldd	r23, Z+1	; 0x01
 834:	82 81       	ldd	r24, Z+2	; 0x02
 836:	93 81       	ldd	r25, Z+3	; 0x03
 838:	0c 5f       	subi	r16, 0xFC	; 252
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	09 c0       	rjmp	.+18     	; 0x850 <vfprintf+0x1fe>
 83e:	f8 01       	movw	r30, r16
 840:	60 81       	ld	r22, Z
 842:	71 81       	ldd	r23, Z+1	; 0x01
 844:	88 27       	eor	r24, r24
 846:	77 fd       	sbrc	r23, 7
 848:	80 95       	com	r24
 84a:	98 2f       	mov	r25, r24
 84c:	0e 5f       	subi	r16, 0xFE	; 254
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	4f e6       	ldi	r20, 0x6F	; 111
 852:	b4 2e       	mov	r11, r20
 854:	b2 22       	and	r11, r18
 856:	97 ff       	sbrs	r25, 7
 858:	09 c0       	rjmp	.+18     	; 0x86c <__stack+0xd>
 85a:	90 95       	com	r25
 85c:	80 95       	com	r24
 85e:	70 95       	com	r23
 860:	61 95       	neg	r22
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	8f 4f       	sbci	r24, 0xFF	; 255
 866:	9f 4f       	sbci	r25, 0xFF	; 255
 868:	f0 e8       	ldi	r31, 0x80	; 128
 86a:	bf 2a       	or	r11, r31
 86c:	a2 01       	movw	r20, r4
 86e:	2a e0       	ldi	r18, 0x0A	; 10
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__ultoa_invert>
 876:	78 2e       	mov	r7, r24
 878:	74 18       	sub	r7, r4
 87a:	45 c0       	rjmp	.+138    	; 0x906 <__stack+0xa7>
 87c:	85 37       	cpi	r24, 0x75	; 117
 87e:	31 f4       	brne	.+12     	; 0x88c <__stack+0x2d>
 880:	3f ee       	ldi	r19, 0xEF	; 239
 882:	b3 2e       	mov	r11, r19
 884:	b2 22       	and	r11, r18
 886:	2a e0       	ldi	r18, 0x0A	; 10
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	25 c0       	rjmp	.+74     	; 0x8d6 <__stack+0x77>
 88c:	99 ef       	ldi	r25, 0xF9	; 249
 88e:	b9 2e       	mov	r11, r25
 890:	b2 22       	and	r11, r18
 892:	8f 36       	cpi	r24, 0x6F	; 111
 894:	c1 f0       	breq	.+48     	; 0x8c6 <__stack+0x67>
 896:	80 37       	cpi	r24, 0x70	; 112
 898:	20 f4       	brcc	.+8      	; 0x8a2 <__stack+0x43>
 89a:	88 35       	cpi	r24, 0x58	; 88
 89c:	09 f0       	breq	.+2      	; 0x8a0 <__stack+0x41>
 89e:	b5 c0       	rjmp	.+362    	; 0xa0a <__stack+0x1ab>
 8a0:	0d c0       	rjmp	.+26     	; 0x8bc <__stack+0x5d>
 8a2:	80 37       	cpi	r24, 0x70	; 112
 8a4:	21 f0       	breq	.+8      	; 0x8ae <__stack+0x4f>
 8a6:	88 37       	cpi	r24, 0x78	; 120
 8a8:	09 f0       	breq	.+2      	; 0x8ac <__stack+0x4d>
 8aa:	af c0       	rjmp	.+350    	; 0xa0a <__stack+0x1ab>
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
 8ae:	20 e1       	ldi	r18, 0x10	; 16
 8b0:	b2 2a       	or	r11, r18
 8b2:	b4 fe       	sbrs	r11, 4
 8b4:	0b c0       	rjmp	.+22     	; 0x8cc <__stack+0x6d>
 8b6:	84 e0       	ldi	r24, 0x04	; 4
 8b8:	b8 2a       	or	r11, r24
 8ba:	08 c0       	rjmp	.+16     	; 0x8cc <__stack+0x6d>
 8bc:	b4 fe       	sbrs	r11, 4
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__stack+0x73>
 8c0:	e6 e0       	ldi	r30, 0x06	; 6
 8c2:	be 2a       	or	r11, r30
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <__stack+0x73>
 8c6:	28 e0       	ldi	r18, 0x08	; 8
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <__stack+0x77>
 8cc:	20 e1       	ldi	r18, 0x10	; 16
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
 8d2:	20 e1       	ldi	r18, 0x10	; 16
 8d4:	32 e0       	ldi	r19, 0x02	; 2
 8d6:	b7 fe       	sbrs	r11, 7
 8d8:	08 c0       	rjmp	.+16     	; 0x8ea <__stack+0x8b>
 8da:	f8 01       	movw	r30, r16
 8dc:	60 81       	ld	r22, Z
 8de:	71 81       	ldd	r23, Z+1	; 0x01
 8e0:	82 81       	ldd	r24, Z+2	; 0x02
 8e2:	93 81       	ldd	r25, Z+3	; 0x03
 8e4:	0c 5f       	subi	r16, 0xFC	; 252
 8e6:	1f 4f       	sbci	r17, 0xFF	; 255
 8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <__stack+0x99>
 8ea:	f8 01       	movw	r30, r16
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 5f       	subi	r16, 0xFE	; 254
 8f6:	1f 4f       	sbci	r17, 0xFF	; 255
 8f8:	a2 01       	movw	r20, r4
 8fa:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__ultoa_invert>
 8fe:	78 2e       	mov	r7, r24
 900:	74 18       	sub	r7, r4
 902:	ff e7       	ldi	r31, 0x7F	; 127
 904:	bf 22       	and	r11, r31
 906:	b6 fe       	sbrs	r11, 6
 908:	0b c0       	rjmp	.+22     	; 0x920 <__stack+0xc1>
 90a:	2e ef       	ldi	r18, 0xFE	; 254
 90c:	b2 22       	and	r11, r18
 90e:	7e 14       	cp	r7, r14
 910:	38 f4       	brcc	.+14     	; 0x920 <__stack+0xc1>
 912:	b4 fe       	sbrs	r11, 4
 914:	07 c0       	rjmp	.+14     	; 0x924 <__stack+0xc5>
 916:	b2 fc       	sbrc	r11, 2
 918:	05 c0       	rjmp	.+10     	; 0x924 <__stack+0xc5>
 91a:	8f ee       	ldi	r24, 0xEF	; 239
 91c:	b8 22       	and	r11, r24
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
 920:	a7 2c       	mov	r10, r7
 922:	01 c0       	rjmp	.+2      	; 0x926 <__stack+0xc7>
 924:	ae 2c       	mov	r10, r14
 926:	8b 2d       	mov	r24, r11
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	b4 fe       	sbrs	r11, 4
 92c:	0d c0       	rjmp	.+26     	; 0x948 <__stack+0xe9>
 92e:	fe 01       	movw	r30, r28
 930:	e7 0d       	add	r30, r7
 932:	f1 1d       	adc	r31, r1
 934:	20 81       	ld	r18, Z
 936:	20 33       	cpi	r18, 0x30	; 48
 938:	19 f4       	brne	.+6      	; 0x940 <__stack+0xe1>
 93a:	e9 ee       	ldi	r30, 0xE9	; 233
 93c:	be 22       	and	r11, r30
 93e:	09 c0       	rjmp	.+18     	; 0x952 <__stack+0xf3>
 940:	a3 94       	inc	r10
 942:	b2 fe       	sbrs	r11, 2
 944:	06 c0       	rjmp	.+12     	; 0x952 <__stack+0xf3>
 946:	04 c0       	rjmp	.+8      	; 0x950 <__stack+0xf1>
 948:	86 78       	andi	r24, 0x86	; 134
 94a:	90 70       	andi	r25, 0x00	; 0
 94c:	00 97       	sbiw	r24, 0x00	; 0
 94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0xf3>
 950:	a3 94       	inc	r10
 952:	8b 2c       	mov	r8, r11
 954:	99 24       	eor	r9, r9
 956:	b3 fc       	sbrc	r11, 3
 958:	14 c0       	rjmp	.+40     	; 0x982 <__stack+0x123>
 95a:	b0 fe       	sbrs	r11, 0
 95c:	0f c0       	rjmp	.+30     	; 0x97c <__stack+0x11d>
 95e:	af 14       	cp	r10, r15
 960:	28 f4       	brcc	.+10     	; 0x96c <__stack+0x10d>
 962:	e7 2c       	mov	r14, r7
 964:	ef 0c       	add	r14, r15
 966:	ea 18       	sub	r14, r10
 968:	af 2c       	mov	r10, r15
 96a:	08 c0       	rjmp	.+16     	; 0x97c <__stack+0x11d>
 96c:	e7 2c       	mov	r14, r7
 96e:	06 c0       	rjmp	.+12     	; 0x97c <__stack+0x11d>
 970:	80 e2       	ldi	r24, 0x20	; 32
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	b6 01       	movw	r22, r12
 976:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 97a:	a3 94       	inc	r10
 97c:	af 14       	cp	r10, r15
 97e:	c0 f3       	brcs	.-16     	; 0x970 <__stack+0x111>
 980:	04 c0       	rjmp	.+8      	; 0x98a <__stack+0x12b>
 982:	af 14       	cp	r10, r15
 984:	10 f4       	brcc	.+4      	; 0x98a <__stack+0x12b>
 986:	fa 18       	sub	r15, r10
 988:	01 c0       	rjmp	.+2      	; 0x98c <__stack+0x12d>
 98a:	ff 24       	eor	r15, r15
 98c:	84 fe       	sbrs	r8, 4
 98e:	0f c0       	rjmp	.+30     	; 0x9ae <__stack+0x14f>
 990:	80 e3       	ldi	r24, 0x30	; 48
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	b6 01       	movw	r22, r12
 996:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 99a:	82 fe       	sbrs	r8, 2
 99c:	1f c0       	rjmp	.+62     	; 0x9dc <__stack+0x17d>
 99e:	81 fe       	sbrs	r8, 1
 9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <__stack+0x149>
 9a2:	88 e5       	ldi	r24, 0x58	; 88
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	10 c0       	rjmp	.+32     	; 0x9c8 <__stack+0x169>
 9a8:	88 e7       	ldi	r24, 0x78	; 120
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0d c0       	rjmp	.+26     	; 0x9c8 <__stack+0x169>
 9ae:	c4 01       	movw	r24, r8
 9b0:	86 78       	andi	r24, 0x86	; 134
 9b2:	90 70       	andi	r25, 0x00	; 0
 9b4:	00 97       	sbiw	r24, 0x00	; 0
 9b6:	91 f0       	breq	.+36     	; 0x9dc <__stack+0x17d>
 9b8:	81 fc       	sbrc	r8, 1
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0x161>
 9bc:	80 e2       	ldi	r24, 0x20	; 32
 9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__stack+0x163>
 9c0:	8b e2       	ldi	r24, 0x2B	; 43
 9c2:	b7 fc       	sbrc	r11, 7
 9c4:	8d e2       	ldi	r24, 0x2D	; 45
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	b6 01       	movw	r22, r12
 9ca:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <__stack+0x17d>
 9d0:	80 e3       	ldi	r24, 0x30	; 48
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	b6 01       	movw	r22, r12
 9d6:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 9da:	ea 94       	dec	r14
 9dc:	7e 14       	cp	r7, r14
 9de:	c0 f3       	brcs	.-16     	; 0x9d0 <__stack+0x171>
 9e0:	7a 94       	dec	r7
 9e2:	f2 01       	movw	r30, r4
 9e4:	e7 0d       	add	r30, r7
 9e6:	f1 1d       	adc	r31, r1
 9e8:	80 81       	ld	r24, Z
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	b6 01       	movw	r22, r12
 9ee:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 9f2:	77 20       	and	r7, r7
 9f4:	a9 f7       	brne	.-22     	; 0x9e0 <__stack+0x181>
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <__stack+0x1a5>
 9f8:	80 e2       	ldi	r24, 0x20	; 32
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	b6 01       	movw	r22, r12
 9fe:	0e 94 26 05 	call	0xa4c	; 0xa4c <fputc>
 a02:	fa 94       	dec	r15
 a04:	ff 20       	and	r15, r15
 a06:	c1 f7       	brne	.-16     	; 0x9f8 <__stack+0x199>
 a08:	37 ce       	rjmp	.-914    	; 0x678 <vfprintf+0x26>
 a0a:	f6 01       	movw	r30, r12
 a0c:	26 81       	ldd	r18, Z+6	; 0x06
 a0e:	37 81       	ldd	r19, Z+7	; 0x07
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <__stack+0x1b7>
 a12:	2f ef       	ldi	r18, 0xFF	; 255
 a14:	3f ef       	ldi	r19, 0xFF	; 255
 a16:	c9 01       	movw	r24, r18
 a18:	2c 96       	adiw	r28, 0x0c	; 12
 a1a:	e2 e1       	ldi	r30, 0x12	; 18
 a1c:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__epilogue_restores__>

00000a20 <strnlen_P>:
 a20:	fc 01       	movw	r30, r24
 a22:	05 90       	lpm	r0, Z+
 a24:	61 50       	subi	r22, 0x01	; 1
 a26:	70 40       	sbci	r23, 0x00	; 0
 a28:	01 10       	cpse	r0, r1
 a2a:	d8 f7       	brcc	.-10     	; 0xa22 <strnlen_P+0x2>
 a2c:	80 95       	com	r24
 a2e:	90 95       	com	r25
 a30:	8e 0f       	add	r24, r30
 a32:	9f 1f       	adc	r25, r31
 a34:	08 95       	ret

00000a36 <strnlen>:
 a36:	fc 01       	movw	r30, r24
 a38:	61 50       	subi	r22, 0x01	; 1
 a3a:	70 40       	sbci	r23, 0x00	; 0
 a3c:	01 90       	ld	r0, Z+
 a3e:	01 10       	cpse	r0, r1
 a40:	d8 f7       	brcc	.-10     	; 0xa38 <strnlen+0x2>
 a42:	80 95       	com	r24
 a44:	90 95       	com	r25
 a46:	8e 0f       	add	r24, r30
 a48:	9f 1f       	adc	r25, r31
 a4a:	08 95       	ret

00000a4c <fputc>:
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	8c 01       	movw	r16, r24
 a56:	eb 01       	movw	r28, r22
 a58:	8b 81       	ldd	r24, Y+3	; 0x03
 a5a:	81 ff       	sbrs	r24, 1
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <fputc+0x48>
 a5e:	82 ff       	sbrs	r24, 2
 a60:	0d c0       	rjmp	.+26     	; 0xa7c <fputc+0x30>
 a62:	2e 81       	ldd	r18, Y+6	; 0x06
 a64:	3f 81       	ldd	r19, Y+7	; 0x07
 a66:	8c 81       	ldd	r24, Y+4	; 0x04
 a68:	9d 81       	ldd	r25, Y+5	; 0x05
 a6a:	28 17       	cp	r18, r24
 a6c:	39 07       	cpc	r19, r25
 a6e:	64 f4       	brge	.+24     	; 0xa88 <fputc+0x3c>
 a70:	e8 81       	ld	r30, Y
 a72:	f9 81       	ldd	r31, Y+1	; 0x01
 a74:	01 93       	st	Z+, r16
 a76:	f9 83       	std	Y+1, r31	; 0x01
 a78:	e8 83       	st	Y, r30
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <fputc+0x3c>
 a7c:	e8 85       	ldd	r30, Y+8	; 0x08
 a7e:	f9 85       	ldd	r31, Y+9	; 0x09
 a80:	80 2f       	mov	r24, r16
 a82:	09 95       	icall
 a84:	00 97       	sbiw	r24, 0x00	; 0
 a86:	31 f4       	brne	.+12     	; 0xa94 <fputc+0x48>
 a88:	8e 81       	ldd	r24, Y+6	; 0x06
 a8a:	9f 81       	ldd	r25, Y+7	; 0x07
 a8c:	01 96       	adiw	r24, 0x01	; 1
 a8e:	9f 83       	std	Y+7, r25	; 0x07
 a90:	8e 83       	std	Y+6, r24	; 0x06
 a92:	02 c0       	rjmp	.+4      	; 0xa98 <fputc+0x4c>
 a94:	0f ef       	ldi	r16, 0xFF	; 255
 a96:	1f ef       	ldi	r17, 0xFF	; 255
 a98:	c8 01       	movw	r24, r16
 a9a:	df 91       	pop	r29
 a9c:	cf 91       	pop	r28
 a9e:	1f 91       	pop	r17
 aa0:	0f 91       	pop	r16
 aa2:	08 95       	ret

00000aa4 <__ultoa_invert>:
 aa4:	fa 01       	movw	r30, r20
 aa6:	aa 27       	eor	r26, r26
 aa8:	28 30       	cpi	r18, 0x08	; 8
 aaa:	51 f1       	breq	.+84     	; 0xb00 <__ultoa_invert+0x5c>
 aac:	20 31       	cpi	r18, 0x10	; 16
 aae:	81 f1       	breq	.+96     	; 0xb10 <__ultoa_invert+0x6c>
 ab0:	e8 94       	clt
 ab2:	6f 93       	push	r22
 ab4:	6e 7f       	andi	r22, 0xFE	; 254
 ab6:	6e 5f       	subi	r22, 0xFE	; 254
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	af 4f       	sbci	r26, 0xFF	; 255
 ac0:	b1 e0       	ldi	r27, 0x01	; 1
 ac2:	3e d0       	rcall	.+124    	; 0xb40 <__ultoa_invert+0x9c>
 ac4:	b4 e0       	ldi	r27, 0x04	; 4
 ac6:	3c d0       	rcall	.+120    	; 0xb40 <__ultoa_invert+0x9c>
 ac8:	67 0f       	add	r22, r23
 aca:	78 1f       	adc	r23, r24
 acc:	89 1f       	adc	r24, r25
 ace:	9a 1f       	adc	r25, r26
 ad0:	a1 1d       	adc	r26, r1
 ad2:	68 0f       	add	r22, r24
 ad4:	79 1f       	adc	r23, r25
 ad6:	8a 1f       	adc	r24, r26
 ad8:	91 1d       	adc	r25, r1
 ada:	a1 1d       	adc	r26, r1
 adc:	6a 0f       	add	r22, r26
 ade:	71 1d       	adc	r23, r1
 ae0:	81 1d       	adc	r24, r1
 ae2:	91 1d       	adc	r25, r1
 ae4:	a1 1d       	adc	r26, r1
 ae6:	20 d0       	rcall	.+64     	; 0xb28 <__ultoa_invert+0x84>
 ae8:	09 f4       	brne	.+2      	; 0xaec <__ultoa_invert+0x48>
 aea:	68 94       	set
 aec:	3f 91       	pop	r19
 aee:	2a e0       	ldi	r18, 0x0A	; 10
 af0:	26 9f       	mul	r18, r22
 af2:	11 24       	eor	r1, r1
 af4:	30 19       	sub	r19, r0
 af6:	30 5d       	subi	r19, 0xD0	; 208
 af8:	31 93       	st	Z+, r19
 afa:	de f6       	brtc	.-74     	; 0xab2 <__ultoa_invert+0xe>
 afc:	cf 01       	movw	r24, r30
 afe:	08 95       	ret
 b00:	46 2f       	mov	r20, r22
 b02:	47 70       	andi	r20, 0x07	; 7
 b04:	40 5d       	subi	r20, 0xD0	; 208
 b06:	41 93       	st	Z+, r20
 b08:	b3 e0       	ldi	r27, 0x03	; 3
 b0a:	0f d0       	rcall	.+30     	; 0xb2a <__ultoa_invert+0x86>
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__ultoa_invert+0x5c>
 b0e:	f6 cf       	rjmp	.-20     	; 0xafc <__ultoa_invert+0x58>
 b10:	46 2f       	mov	r20, r22
 b12:	4f 70       	andi	r20, 0x0F	; 15
 b14:	40 5d       	subi	r20, 0xD0	; 208
 b16:	4a 33       	cpi	r20, 0x3A	; 58
 b18:	18 f0       	brcs	.+6      	; 0xb20 <__ultoa_invert+0x7c>
 b1a:	49 5d       	subi	r20, 0xD9	; 217
 b1c:	31 fd       	sbrc	r19, 1
 b1e:	40 52       	subi	r20, 0x20	; 32
 b20:	41 93       	st	Z+, r20
 b22:	02 d0       	rcall	.+4      	; 0xb28 <__ultoa_invert+0x84>
 b24:	a9 f7       	brne	.-22     	; 0xb10 <__ultoa_invert+0x6c>
 b26:	ea cf       	rjmp	.-44     	; 0xafc <__ultoa_invert+0x58>
 b28:	b4 e0       	ldi	r27, 0x04	; 4
 b2a:	a6 95       	lsr	r26
 b2c:	97 95       	ror	r25
 b2e:	87 95       	ror	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	ba 95       	dec	r27
 b36:	c9 f7       	brne	.-14     	; 0xb2a <__ultoa_invert+0x86>
 b38:	00 97       	sbiw	r24, 0x00	; 0
 b3a:	61 05       	cpc	r22, r1
 b3c:	71 05       	cpc	r23, r1
 b3e:	08 95       	ret
 b40:	9b 01       	movw	r18, r22
 b42:	ac 01       	movw	r20, r24
 b44:	0a 2e       	mov	r0, r26
 b46:	06 94       	lsr	r0
 b48:	57 95       	ror	r21
 b4a:	47 95       	ror	r20
 b4c:	37 95       	ror	r19
 b4e:	27 95       	ror	r18
 b50:	ba 95       	dec	r27
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__ultoa_invert+0xa2>
 b54:	62 0f       	add	r22, r18
 b56:	73 1f       	adc	r23, r19
 b58:	84 1f       	adc	r24, r20
 b5a:	95 1f       	adc	r25, r21
 b5c:	a0 1d       	adc	r26, r0
 b5e:	08 95       	ret

00000b60 <__prologue_saves__>:
 b60:	2f 92       	push	r2
 b62:	3f 92       	push	r3
 b64:	4f 92       	push	r4
 b66:	5f 92       	push	r5
 b68:	6f 92       	push	r6
 b6a:	7f 92       	push	r7
 b6c:	8f 92       	push	r8
 b6e:	9f 92       	push	r9
 b70:	af 92       	push	r10
 b72:	bf 92       	push	r11
 b74:	cf 92       	push	r12
 b76:	df 92       	push	r13
 b78:	ef 92       	push	r14
 b7a:	ff 92       	push	r15
 b7c:	0f 93       	push	r16
 b7e:	1f 93       	push	r17
 b80:	cf 93       	push	r28
 b82:	df 93       	push	r29
 b84:	cd b7       	in	r28, 0x3d	; 61
 b86:	de b7       	in	r29, 0x3e	; 62
 b88:	ca 1b       	sub	r28, r26
 b8a:	db 0b       	sbc	r29, r27
 b8c:	0f b6       	in	r0, 0x3f	; 63
 b8e:	f8 94       	cli
 b90:	de bf       	out	0x3e, r29	; 62
 b92:	0f be       	out	0x3f, r0	; 63
 b94:	cd bf       	out	0x3d, r28	; 61
 b96:	09 94       	ijmp

00000b98 <__epilogue_restores__>:
 b98:	2a 88       	ldd	r2, Y+18	; 0x12
 b9a:	39 88       	ldd	r3, Y+17	; 0x11
 b9c:	48 88       	ldd	r4, Y+16	; 0x10
 b9e:	5f 84       	ldd	r5, Y+15	; 0x0f
 ba0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ba2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ba4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ba6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ba8:	aa 84       	ldd	r10, Y+10	; 0x0a
 baa:	b9 84       	ldd	r11, Y+9	; 0x09
 bac:	c8 84       	ldd	r12, Y+8	; 0x08
 bae:	df 80       	ldd	r13, Y+7	; 0x07
 bb0:	ee 80       	ldd	r14, Y+6	; 0x06
 bb2:	fd 80       	ldd	r15, Y+5	; 0x05
 bb4:	0c 81       	ldd	r16, Y+4	; 0x04
 bb6:	1b 81       	ldd	r17, Y+3	; 0x03
 bb8:	aa 81       	ldd	r26, Y+2	; 0x02
 bba:	b9 81       	ldd	r27, Y+1	; 0x01
 bbc:	ce 0f       	add	r28, r30
 bbe:	d1 1d       	adc	r29, r1
 bc0:	0f b6       	in	r0, 0x3f	; 63
 bc2:	f8 94       	cli
 bc4:	de bf       	out	0x3e, r29	; 62
 bc6:	0f be       	out	0x3f, r0	; 63
 bc8:	cd bf       	out	0x3d, r28	; 61
 bca:	ed 01       	movw	r28, r26
 bcc:	08 95       	ret

00000bce <_exit>:
 bce:	f8 94       	cli

00000bd0 <__stop_program>:
 bd0:	ff cf       	rjmp	.-2      	; 0xbd0 <__stop_program>
